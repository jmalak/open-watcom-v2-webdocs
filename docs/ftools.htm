<HEAD>
<TITLE> Open Watcom 2.0 FORTRAN 77 Tools User's Guide </TITLE>
</HEAD>
<BODY>
<H1 ID="Index_of_Topics"> Index of Topics </H1>
<DL>
<DT>- A -
<DD><A HREF="#a">a</A>
<BR><A HREF="#Adding_Modules_to_a_Library_File">Adding Modules to a Library File</A>
<BR><A HREF="#The_Alternate_Addressing_Form_Option_M__fi_">The Alternate Addressing Form Option - &quot;fi&quot;</A>
<BR><A HREF="#Always_Create_a_New_Library_M__n__Option">Always Create a New Library - &quot;n&quot; Option</A>
<BR><A HREF="#Applying_a_Patch">Applying a Patch</A>
<BR><A HREF="#Approximate_Timestamp_Matching_L_FUZZYR">Approximate Timestamp Matching (.FUZZY)</A>
<BR><A HREF="#Assembler_Directives__Operators_and_Assembly_Opcodes">Assembler Directives, Operators and Assembly Opcodes</A>
<BR><A HREF="#The_Assembly_Format_Option_M__a_">The Assembly Format Option - &quot;a&quot;</A>
<BR><A HREF="#Automatic_Dependency_Detection_L_AUTODEPENDR">Automatic Dependency Detection (.AUTODEPEND)</A>
<DT>- B -
<DD><A HREF="#b">b</A>
<DT>- C -
<DD><A HREF="#c">c</A>
<BR><A HREF="#Cache_Search_Path_L_OPTIMIZER">Cache Search Path (.OPTIMIZE)</A>
<BR><A HREF="#Calling_convention">Calling convention</A>
<BR><A HREF="#Case_Sensitive_Symbol_Names_M__c__Option">Case Sensitive Symbol Names - &quot;c&quot; Option</A>
<BR><A HREF="#Changing_the_Internal_Label_Character_M__iEXcharY_">Changing the Internal Label Character - &quot;i=&lt;char&gt;&quot;</A>
<BR><A HREF="#Command_Line_Options">Command Line Options</A>
<BR><A HREF="#Command_List_Directives">Command List Directives</A>
<BR><A HREF="#Command_List_Execution">Command List Execution</A>
<BR><A HREF="#Command_Lists">Command Lists</A>
<BR><A HREF="#Commands_from_a_File_or_Environment_Variable">Commands from a File or Environment Variable</A>
<BR><A HREF="#Compatibility_Between_Open_Watcom_Make_and_UNIX_Make">Compatibility Between Open Watcom Make and UNIX Make</A>
<BR><A HREF="#Conditional_Processing">Conditional Processing</A>
<BR><A HREF="#Creating_a_Listing_File_M__l__Option">Creating a Listing File - &quot;l&quot; Option</A>
<BR><A HREF="#Creating_Import_Libraries">Creating Import Libraries</A>
<BR><A HREF="#Creating_Import_Library_Entries">Creating Import Library Entries</A>
<DT>- D -
<DD><A HREF="#d">d</A>
<BR><A HREF="#Default_Command_List_L_DEFAULTR">Default Command List (.DEFAULT)</A>
<BR><A HREF="#Defining_Recognized_File_Extensions_L_EXTENSIONSR">Defining Recognized File Extensions (.EXTENSIONS)</A>
<BR><A HREF="#Defining_Recognized_File_Extensions_L_SUFFIXESR">Defining Recognized File Extensions (.SUFFIXES)</A>
<BR><A HREF="#Deleting_Modules_from_a_Library_File">Deleting Modules from a Library File</A>
<BR><A HREF="#Dependency_Declarations">Dependency Declarations</A>
<BR><A HREF="#Diagnostic_Messages">Diagnostic Messages</A>
<BR><A HREF="#Disable_Implicit_Rules_L_BLOCKR">Disable Implicit Rules (.BLOCK)</A>
<BR><A HREF="#Display_CPP_Mangled_Names_M__m__Option">Display C++ Mangled Names - &quot;m&quot; Option</A>
<BR><A HREF="#Double_Colon_Explicit_Rules">Double Colon Explicit Rules</A>
<DT>- E -
<DD><A HREF="#e">e</A>
<BR><A HREF="#Erasing_Targets_After_Error_L_ERASER">Erasing Targets After Error (.ERASE)</A>
<BR><A HREF="#Error_Action_L_ERRORR">Error Action (.ERROR)</A>
<BR><A HREF="#An_Example">An Example</A>
<BR><A HREF="#Exe2bin_Messages">Exe2bin Messages</A>
<BR><A HREF="#Explode_Library_File_M__x__Option">Explode Library File - &quot;x&quot; Option</A>
<BR><A HREF="#The_External_Symbols_Option_M__e_">The External Symbols Option - &quot;e&quot;</A>
<BR><A HREF="#Extracting_a_Module_from_a_Library_File">Extracting a Module from a Library File</A>
<DT>- F -
<DD><A HREF="#f">f</A>
<BR><A HREF="#Far_Call_Optimizations_for_NonMOpen_Watcom_Object_Modules">Far Call Optimizations for Non-Open Watcom Object Modules</A>
<BR><A HREF="#File_Inclusion">File Inclusion</A>
<BR><A HREF="#Final_Commands_L_AFTERR">Final Commands (.AFTER)</A>
<BR><A HREF="#The_FPU_emulator_fixups_Option_M__ff_">The FPU emulator fixups Option - &quot;ff&quot;</A>
<DT>- G -
<DD><A HREF="#Generating_Imports_M__i__Option">Generating Imports - &quot;i&quot; Option</A>
<DT>- H -
<DD><A HREF="#h">h</A>
<DT>- I -
<DD><A HREF="#i">i</A>
<BR><A HREF="#IDE2MAKE_Operation">IDE2MAKE Operation</A>
<BR><A HREF="#The_IDE2MAKE_Utility">The IDE2MAKE Utility</A>
<BR><A HREF="#Ignoring_Dependent_Timestamps_L_ALWAYSR">Ignoring Dependent Timestamps (.ALWAYS)</A>
<BR><A HREF="#Ignoring_Errors_L_CONTINUER">Ignoring Errors (.CONTINUE)</A>
<BR><A HREF="#Ignoring_Return_Codes_L_IGNORER">Ignoring Return Codes (.IGNORE)</A>
<BR><A HREF="#Ignoring_Target_Timestamp_L_EXISTSONLYR">Ignoring Target Timestamp (.EXISTSONLY)</A>
<BR><A HREF="#Ignoring_Target_Timestamp_L_NOCHECKR">Ignoring Target Timestamp (.NOCHECK)</A>
<BR><A HREF="#Implicit_Rules">Implicit Rules</A>
<BR><A HREF="#Initial_Commands_L_BEFORER">Initial Commands (.BEFORE)</A>
<DT>- K -
<DD><A HREF="#k">k</A>
<DT>- L -
<DD><A HREF="#l">l</A>
<BR><A HREF="#Librarian_Error_Messages">Librarian Error Messages</A>
<BR><A HREF="#The_Listing_Option_M__lUEXlist_fileYV_">The Listing Option - &quot;l[=&lt;list_file&gt;]&quot;</A>
<BR><A HREF="#Loading_Dynamic_Link_Libraries">Loading Dynamic Link Libraries</A>
<DT>- M -
<DD><A HREF="#m">m</A>
<BR><A HREF="#Macros">Macros</A>
<BR><A HREF="#MAKEINIT_File">MAKEINIT File</A>
<BR><A HREF="#Minimising_Target_Timestamp_L_JUST_ENOUGHR">Minimising Target Timestamp (.JUST_ENOUGH)</A>
<BR><A HREF="#ms">ms</A>
<BR><A HREF="#Multiple_Dependents">Multiple Dependents</A>
<BR><A HREF="#Multiple_Rules">Multiple Rules</A>
<BR><A HREF="#Multiple_Targets">Multiple Targets</A>
<DT>- N -
<DD><A HREF="#n">n</A>
<BR><A HREF="#Name_Command_Sequence_L_PROCEDURER">Name Command Sequence (.PROCEDURE)</A>
<BR><A HREF="#Naming_convention">Naming convention</A>
<BR><A HREF="#The_No_Instruction_Name_Pseudonyms_Option_M__fp_">The No Instruction Name Pseudonyms Option - &quot;fp&quot;</A>
<BR><A HREF="#The_No_Register_Name_Pseudonyms_Option_M__fr_">The No Register Name Pseudonyms Option - &quot;fr&quot;</A>
<DT>- O -
<DD><A HREF="#o">o</A>
<BR><A HREF="#The_Object_File_Disassembler">The Object File Disassembler</A>
<BR><A HREF="#Open_Watcom__C__name_mangler">Open Watcom &quot;C&quot; name mangler</A>
<BR><A HREF="#The_Open_Watcom_Assembler">The Open Watcom Assembler</A>
<BR><A HREF="#Open_Watcom_Assembler_Diagnostic_Messages">Open Watcom Assembler Diagnostic Messages</A>
<BR><A HREF="#Open_Watcom_Assembler_Specific">Open Watcom Assembler Specific</A>
<BR><A HREF="#Open_Watcom_Compile_and_Link_Options_Summary">Open Watcom Compile and Link Options Summary</A>
<BR><A HREF="#The_Open_Watcom_Exe2bin_Utility">The Open Watcom Exe2bin Utility</A>
<BR><A HREF="#The_Open_Watcom_Exe2bin_Utility_Command_Line">The Open Watcom Exe2bin Utility Command Line</A>
<BR><A HREF="#The_Open_Watcom_Far_Call_Optimization_Enabling_Utility">The Open Watcom Far Call Optimization Enabling Utility</A>
<BR><A HREF="#The_Open_Watcom_FORTRAN_77_Compile_and_Link_Utility">The Open Watcom FORTRAN 77 Compile and Link Utility</A>
<BR><A HREF="#The_Open_Watcom_Library_Manager">The Open Watcom Library Manager</A>
<BR><A HREF="#The_Open_Watcom_Library_Manager_Command_Line">The Open Watcom Library Manager Command Line</A>
<BR><A HREF="#Open_Watcom_Library_Manager_Module_Commands">Open Watcom Library Manager Module Commands</A>
<BR><A HREF="#Open_Watcom_Library_Manager_Options">Open Watcom Library Manager Options</A>
<BR><A HREF="#Open_Watcom_Make_Command_Line_Format">Open Watcom Make Command Line Format</A>
<BR><A HREF="#Open_Watcom_Make_Diagnostic_Messages">Open Watcom Make Diagnostic Messages</A>
<BR><A HREF="#Open_Watcom_Make_Options_Summary">Open Watcom Make Options Summary</A>
<BR><A HREF="#Open_Watcom_Make_Reference">Open Watcom Make Reference</A>
<BR><A HREF="#The_Open_Watcom_Make_Utility">The Open Watcom Make Utility</A>
<BR><A HREF="#The_Open_Watcom_Patch_Utility">The Open Watcom Patch Utility</A>
<BR><A HREF="#The_Open_Watcom_Strip_Utility">The Open Watcom Strip Utility</A>
<BR><A HREF="#The_Open_Watcom_Strip_Utility_Command_Line">The Open Watcom Strip Utility Command Line</A>
<BR><A HREF="#Operate_Quietly_M__q__Option">Operate Quietly - &quot;q&quot; Option</A>
<BR><A HREF="#Operate_Verbosely_M__v__Option">Operate Verbosely - &quot;v&quot; Option</A>
<BR><A HREF="#Optimization_of_Far_Calls">Optimization of Far Calls</A>
<DT>- P -
<DD><A HREF="#p">p</A>
<BR><A HREF="#Preprocessing_Directives">Preprocessing Directives</A>
<BR><A HREF="#Preserving_Targets_L_PRECIOUSR">Preserving Targets (.PRECIOUS)</A>
<BR><A HREF="#Preserving_Targets_After_Error_L_HOLDR">Preserving Targets After Error (.HOLD)</A>
<BR><A HREF="#The_Public_Symbols_Option_M__p_">The Public Symbols Option - &quot;p&quot;</A>
<DT>- Q -
<DD><A HREF="#q">q</A>
<DT>- R -
<DD><A HREF="#r">r</A>
<BR><A HREF="#ReMChecking_Target_Timestamp_L_RECHECKR">Re-Checking Target Timestamp (.RECHECK)</A>
<BR><A HREF="#Replacing_Modules_in_a_Library_File">Replacing Modules in a Library File</A>
<BR><A HREF="#Retain_CPP_Mangled_Names__M__m_">Retain C++ Mangled Names - &quot;m&quot;</A>
<DT>- S -
<DD><A HREF="#s">s</A>
<BR><A HREF="#sn">sn</A>
<BR><A HREF="#The_Source_Option_M__sUEXsource_fileYV_">The Source Option - &quot;s[=&lt;source_file&gt;]&quot;</A>
<BR><A HREF="#Special_Macros">Special Macros</A>
<BR><A HREF="#Specify_Output_Directory_M__d__Option">Specify Output Directory - &quot;d&quot; Option</A>
<BR><A HREF="#Specify_Output_Format_M__f__Option">Specify Output Format - &quot;f&quot; Option</A>
<BR><A HREF="#Specifying_a_Library_Record_Size_M__p__and__pa__Options">Specifying a Library Record Size - &quot;p&quot; and &quot;pa&quot; Options</A>
<BR><A HREF="#Specifying_an_Output_File_Name_M__o__Option">Specifying an Output File Name - &quot;o&quot; Option</A>
<BR><A HREF="#Specifying_Explicitly_Updated_Targets_L_EXPLICITR">Specifying Explicitly Updated Targets (.EXPLICIT)</A>
<BR><A HREF="#Strip_Line_Number_Records_M__s__Option">Strip Line Number Records - &quot;s&quot; Option</A>
<BR><A HREF="#Strip_Utility_Messages">Strip Utility Messages</A>
<BR><A HREF="#Suppress_Creation_of_Backup_File_M__b__Option">Suppress Creation of Backup File - &quot;b&quot; Option</A>
<BR><A HREF="#Suppressing_Terminal_Output_L_SILENTR">Suppressing Terminal Output (.SILENT)</A>
<DT>- T -
<DD><A HREF="#t">t</A>
<BR><A HREF="#Targets_Without_Any_Dependents_L_SYMBOLICR">Targets Without Any Dependents (.SYMBOLIC)</A>
<BR><A HREF="#The_Touch_Utility">The Touch Utility</A>
<BR><A HREF="#Trim_Module_Name_M__t__Option">Trim Module Name - &quot;t&quot; Option</A>
<DT>- U -
<DD><A HREF="#u">u</A>
<BR><A HREF="#Unsupported_Directives">Unsupported Directives</A>
<BR><A HREF="#Updating_Targets_Multiple_Times_L_MULTIPLER">Updating Targets Multiple Times (.MULTIPLE)</A>
<BR><A HREF="#The_Uppercase_InstructionsDRegisters_Option_M__fu_">The Uppercase Instructions/Registers Option - &quot;fu&quot;</A>
<DT>- V -
<DD><A HREF="#v">v</A>
<DT>- W -
<DD><A HREF="#WFLDWFL386_Command_Line_Examples">WFL/WFL386 Command Line Examples</A>
<BR><A HREF="#WFLDWFL386_Command_Line_Format">WFL/WFL386 Command Line Format</A>
<BR><A HREF="#WFLDWFL386_Environment_Variables">WFL/WFL386 Environment Variables</A>
<BR><A HREF="#WTOUCH_Operation">WTOUCH Operation</A>
<DT>- Y -
<DD><A HREF="#y">y</A>
<DT>- Z -
<DD><A HREF="#z">z</A>
</DL>
<H1 ID="The_Open_Watcom_FORTRAN_77_Compile_and_Link_Utility"> The Open Watcom FORTRAN 77 Compile and Link Utility </H1>
<BR>The Open Watcom FORTRAN 77 Compile and Link Utility is designed for generating applications, simply and quickly, using
a single command line.&nbsp; On the command line, you can list source file names as well as object file names.&nbsp; Source
files are compiled; object files and libraries are simply included in the link phase.&nbsp; Options can be passed on to both
the compiler and linker.
<H2 ID="WFLDWFL386_Command_Line_Format"> WFL/WFL386 Command Line Format </H2>
<BR>The format of the command line is:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WFL [files] [options]</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WFL386 [files] [options]</TT>
<BR><BR>The square brackets [ ] denote items which are optional.
<DL>
<DT>WFL
<DD>is the name of the Open Watcom Compile and Link utility that invokes the 16-bit compiler.
<DT>WFL386
<DD>is the name of the Open Watcom Compile and Link utility that invokes the 32-bit compiler.
</DL>
<BR>The files and options may be specified in any order.&nbsp; The Open Watcom Compile and Link utility uses the extension
of the file name to determine if it is a source file, an object file, or a library file.&nbsp; Files with extensions of &quot;OBJ&quot;
and &quot;LIB&quot; are assumed to be object files and library files respectively.&nbsp; Files with any other extension, including
none at all, are assumed to be FORTRAN 77 source files and will be compiled.&nbsp; Pattern matching characters (&quot;*&quot;
and &quot;?&quot;) may be used in the file specifications.&nbsp; If no file extension is specified for a file name then &quot;FOR&quot;
is assumed.
<BR><BR>Options are prefixed with a slash (/) or a dash (-) and may be specified in any order.&nbsp; Options can include any
of the Open Watcom F77 compiler options plus some additional options specific to the Open Watcom Compile and Link utility.
&nbsp;Certain options can include a &quot;NO&quot; prefix to disable an option.&nbsp; A summary of options is displayed on
the screen by simply entering the &quot;WFL&quot; or &quot;WFL386&quot; command with no arguments.
<H2 ID="Open_Watcom_Compile_and_Link_Options_Summary"> Open Watcom Compile and Link Options Summary </H2>
<DL>
<DT><B><I>General options:</I></B>
<DD><B><I>Description:</I></B>
<DT>C
<DD>compile the files only, do not link them
<DT>Y
<DD>ignore the WFL/WFL386 environment variable
</DL>
<DL>
<DT><B><I>Compiler options:</I></B>
<DD><B><I>Description:</I></B>
<DT>0
<DD>(16-bit only) assume 8088/8086 processor
<DT>1
<DD>(16-bit only) assume 188/186 processor
<DT>2
<DD>(16-bit only) assume 286 processor
<DT>3
<DD>assume 386 processor
<DT>4
<DD>assume 486 processor
<DT>5
<DD>assume Pentium processor
<DT>6
<DD>assume Pentium Pro processor
<DT>[NO]ALign
<DD>align COMMON segments
<DT>[NO]AUtomatic
<DD>all local variables on the stack
<DT>BD
<DD>(32-bit only) dynamic link library
<DT>BM
<DD>(32-bit only) multithread application
<DT>[NO]BOunds
<DD>generate subscript bounds checking code
<DT>BW
<DD>(32-bit only) default windowed application
<DT>[NO]CC
<DD>carriage control recognition requested for output devices such as the console
<DT>CHInese
<DD>Chinese character set
<DT>[NO]COde
<DD>constants in code segment
<DT>D1
<DD>include line # debugging information
<DT>D2
<DD>include full debugging information
<DT>[NO]DEBug
<DD>perform run-time checking
<DT>DEFine=&lt;macro&gt;
<DD>define macro
<DT>[NO]DEPendency
<DD>generate file dependencies
<DT>[NO]DEScriptor
<DD>pass character arguments using string descriptor
<DT>DIsk
<DD>write listing file to disk
<DT>DT=&lt;size&gt;
<DD>set data threshold
<DT>[NO]ERrorfile
<DD>generate an error file
<DT>[NO]EXPlicit
<DD>declare type of all symbols
<DT>[NO]EXtensions
<DD>issue extension messages
<DT>[NO]EZ
<DD>(32-bit only) Easy OMF-386 object files
<DT>FO=&lt;obj_default&gt;
<DD>set default object file name
<DT>[NO]FORmat
<DD>relax format type checking
<DT>FPC
<DD>generate calls to floating-point library
<DT>FPD
<DD>enable generation of Pentium FDIV bug check code
<DT>FPI
<DD>generate inline 80x87 instructions with emulation
<DT>FPI87
<DD>generate inline 80x87 instructions
<DT>FPR
<DD>floating-point backward compatibility
<DT>FP2
<DD>generate inline 80x87 instructions
<DT>FP3
<DD>generate inline 80387 instructions
<DT>FP5
<DD>optimize floating-point for Pentium
<DT>FP6
<DD>optimize floating-point for Pentium Pro
<DT>[NO]FSfloats
<DD>FS not fixed
<DT>[NO]GSfloats
<DD>GS not fixed
<DT>HC
<DD>Codeview debugging information
<DT>HD
<DD>DWARF debugging information
<DT>HW
<DD>Open Watcom debugging information
<DT>[NO]INCList
<DD>write content of INCLUDE files to listing
<DT>INCPath=[d:]path
<DD>[d:]path...&nbsp; path for INCLUDE files
<DT>[NO]IPromote
<DD>promote INTEGER*1 and INTEGER*2 arguments to INTEGER*4
<DT>Japanese
<DD>Japanese character set
<DT>KOrean
<DD>Korean character set
<DT>[NO]LFwithff
<DD>LF with FF
<DT>[NO]LIBinfo
<DD>include default library information in object file
<DT>[NO]LISt
<DD>generate a listing file
<DT>[NO]MAngle
<DD>mangle COMMON segment names
<DT>MC
<DD>(32-bit only) compact memory model
<DT>MF
<DD>(32-bit only) flat memory model
<DT>MH
<DD>(16-bit only) huge memory model
<DT>ML
<DD>large memory model
<DT>MM
<DD>medium memory model
<DT>MS
<DD>(32-bit only) small memory model
<DT>OB
<DD>(32-bit only) base pointer optimizations
<DT>OBP
<DD>branch prediction
<DT>OC
<DD>do not convert &quot;call&quot; followed by &quot;ret&quot; to &quot;jmp&quot;
<DT>OD
<DD>disable optimizations
<DT>ODO
<DD>DO-variables do not overflow
<DT>OF
<DD>always generate a stack frame
<DT>OH
<DD>enable repeated optimizations (longer compiles)
<DT>OI
<DD>generate statement functions in-line
<DT>OK
<DD>enable control flow prologues and epilogues
<DT>OL
<DD>perform loop optimizations
<DT>OL+
<DD>perform loop optimizations with loop unrolling
<DT>OM
<DD>generate floating-point 80x87 math instructions in-line
<DT>ON
<DD>numeric optimizations
<DT>OP
<DD>precision optimizations
<DT>OR
<DD>instruction scheduling
<DT>OS
<DD>optimize for space
<DT>OT
<DD>optimize for time
<DT>OX
<DD>equivalent to OBP, ODO, OI, OK, OL, OM, OR, and OT (16-bit) or OB, OBP, ODO, OI, OK, OL, OM, OR, and OT (32-bit)
<DT>PRint
<DD>write listing file to printer
<DT>[NO]Quiet
<DD>operate quietly
<DT>[NO]Reference
<DD>issue unreferenced warning
<DT>[NO]RESource
<DD>messages in resource file
<DT>[NO]SAve
<DD>SAVE local variables
<DT>[NO]SC
<DD>(32-bit only) stack calling convention
<DT>[NO]SEpcomma
<DD>allow comma separator in formatted input
<DT>[NO]SG
<DD>(32-bit only) automatic stack growing
<DT>[NO]SHort
<DD>set default INTEGER/LOGICAL size to 2/1 bytes
<DT>[NO]SR
<DD>save/restore segment registers
<DT>[NO]SSfloats
<DD>(16-bit only) SS is not default data segment
<DT>[NO]STack
<DD>generate stack checking code
<DT>[NO]SYntax
<DD>syntax check only
<DT>[NO]TErminal
<DD>messages to terminal
<DT>[NO]TRace
<DD>generate code for run-time traceback
<DT>TYpe
<DD>write listing file to terminal
<DT>[NO]WArnings
<DD>issue warning messages
<DT>[NO]WILd
<DD>relax wild branch checking
<DT>[NO]WIndows
<DD>(16-bit only) compile code for Windows
<DT>[NO]XFloat
<DD>extend floating-point precision
<DT>[NO]XLine
<DD>extend line length to 132
</DL>
<DL>
<DT><B><I>Linker options:</I></B>
<DD><B><I>Description:</I></B>
<DT>FD[=&lt;directive_file&gt;]
<DD>keep directive file and, optionally, rename it (default name is &quot;__WFL__.LNK&quot;).
<DT>FE=&lt;executable&gt;
<DD>name executable file
<DT>FI=&lt;fn&gt;
<DD>include additional directive file
<DT>FM[=&lt;map_file&gt;]
<DD>generate map file and, optionally, name it
<DT>K=&lt;stack_size&gt;
<DD>set stack size
<DT>LP
<DD>(16-bit only) create an OS/2 protected-mode program
<DT>LR
<DD>(16-bit only) create a DOS real-mode program
<DT>L=&lt;system_name&gt;
<DD>link a program for the specified system.&nbsp; Among the supported systems are:
<DL>
<DT>286
<DD>16-bit DOS executables (synonym for &quot;DOS&quot;) under DOS and NT hosted platforms; 16-bit OS/2 executables (synonym for
&quot;OS2&quot;) under 32-bit OS/2 hosted OS/2 session.
<DT>386
<DD>32-bit DOS executables (synonym for &quot;DOS4G&quot;) under DOS; 32-bit NT character-mode executables (synonym for &quot;NT&quot;)
under Windows NT; 32-bit OS/2 executables (synonym for &quot;OS2V2&quot;) under 32-bit OS/2 hosted OS/2 session.
<DT>COM
<DD>16-bit DOS &quot;COM&quot; files
<DT>DOS
<DD>16-bit DOS executables
<DT>DOS4G
<DD>32-bit Tenberry Software DOS Extender executables
<DT>DOS4GNZ
<DD>32-bit Tenberry Software DOS Extender non-zero base executables
<DT>NETWARE
<DD>32-bit Novell NetWare 386 NLMs
<DT>NOVELL
<DD>32-bit Novell NetWare 386 NLMs (synonym for NETWARE)
<DT>NT
<DD>32-bit Windows NT character-mode executables
<DT>NT_DLL
<DD>32-bit Windows NT DLLs
<DT>NT_WIN
<DD>32-bit Windows NT windowed executables
<DT>OS2
<DD>16-bit OS/2 V1.x executables
<DT>OS2_DLL
<DD>16-bit OS/2 DLLs
<DT>OS2_PM
<DD>16-bit OS/2 PM executables
<DT>OS2V2
<DD>32-bit OS/2 executables
<DT>OS2V2_DLL
<DD>32-bit OS/2 DLLs
<DT>OS2V2_PM
<DD>32-bit OS/2 PM executables
<DT>PHARLAP
<DD>32-bit PharLap DOS Extender executables
<DT>QNX
<DD>16-bit QNX executables
<DT>QNX386
<DD>32-bit QNX executables
<DT>TNT
<DD>32-bit Phar Lap TNT DOS-style executable
<DT>WIN386
<DD>32-bit extended Windows 3.x executables/DLLs
<DT>WIN95
<DD>32-bit Windows 9x executables/DLLs
<DT>WINDOWS
<DD>16-bit Windows executables
<DT>WINDOWS_DLL
<DD>16-bit Windows Dynamic Link Libraries
<DT>X32R
<DD>32-bit FlashTek (register calling convention) executables
<DT>X32RV
<DD>32-bit FlashTek Virtual Memory (register calling convention) executables
<DT>X32S
<DD>32-bit FlashTek (stack calling convention) executables
<DT>X32SV
<DD>32-bit FlashTek Virtual Memory (stack calling convention) executables
</DL>
<BR>These names are among the systems identified in the Open Watcom Linker initialization file, &quot;WLSYSTEM.LNK&quot;.
&nbsp;The Open Watcom Linker &quot;SYSTEM&quot; directives, found in this file, are used to specify default link options for
particular (operating) systems.&nbsp; Users can augment the Open Watcom Linker initialization file with their own system definitions
and these may be specified as an argument to the &quot;l=&quot; option.&nbsp; The &quot;system_name&quot; specified in the
&quot;l=&quot; option is used to create a &quot;SYSTEM system_name&quot; Open Watcom Linker directive when linking the application.
<DT>&quot;&lt;linker directives&gt;&quot;
<DD>specify additional linker directives
</DL>
<BR>A summary of the option defaults follows:&nbsp; 
<DL>
<DT>0
<DD>16-bit only
<DT>5
<DD>32-bit only
<DT>ALign
<DD>
<DT>NOAUtomatic
<DD>
<DT>NOBOunds
<DD>
<DT>NOCC
<DD>
<DT>NOCOde
<DD>
<DT>NODEBug
<DD>
<DT>DEPendency
<DD>
<DT>DEScriptor
<DD>
<DT>DT=256
<DD>
<DT>ERrorfile
<DD>
<DT>NOEXPlicit
<DD>
<DT>NOEXtensions
<DD>
<DT>NOEZ
<DD>32-bit only
<DT>NOFORmat
<DD>
<DT>FPI
<DD>
<DT>FP2
<DD>16-bit only
<DT>FP3
<DD>32-bit only
<DT>NOFPD
<DD>
<DT>FSfloats
<DD>all but flat memory model
<DT>NOFSfloats
<DD>flat memory model only
<DT>GSfloats
<DD>
<DT>NOINCList
<DD>
<DT>NOIPromote
<DD>
<DT>NOLFwithff
<DD>
<DT>LIBinfo
<DD>
<DT>NOLISt
<DD>
<DT>NOMAngle
<DD>
<DT>ML
<DD>16-bit only
<DT>MF
<DD>32-bit only
<DT>NOQuiet
<DD>
<DT>Reference
<DD>
<DT>NORESource
<DD>
<DT>NOSAve
<DD>
<DT>NOSC
<DD>32-bit only
<DT>NOSEpcomma
<DD>
<DT>NOSG
<DD>32-bit only
<DT>NOSHort
<DD>
<DT>NOSR
<DD>
<DT>NOSSfloats
<DD>16-bit only
<DT>NOSTack
<DD>
<DT>NOSYntax
<DD>
<DT>TErminal
<DD>
<DT>NOTRace
<DD>
<DT>WArnings
<DD>
<DT>NOWILd
<DD>
<DT>NOWIndows
<DD>16-bit only
<DT>NOXFloat
<DD>
<DT>NOXLine
<DD>
</DL>
<H2 ID="WFLDWFL386_Environment_Variables"> WFL/WFL386 Environment Variables </H2>
<BR>The<B> WFL</B> environment variable can be used to specify commonly used<B><I> WFL</I></B> options.&nbsp; The<B> WFL386</B>
environment variable can be used to specify commonly used<B><I> WFL386</I></B> options.&nbsp; These options are processed
before options specified on the command line.&nbsp; 
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;set wfl=-d1 -ot</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;set wfl386=-d1 -ot</TT>
<BR><BR>The above example defines the default options to be &quot;d1&quot; (include line number debugging information in the
object file), and &quot;ot&quot; (favour time optimizations over size optimizations).
<BR><BR>Whenever you wish to specify an option that requires the use of an &quot;=&quot; character, you can use the &quot;#&quot;
character in its place.&nbsp; This is required by the syntax of the &quot;SET&quot; command.
<BR><BR>Once the appropriate environment variable has been defined, those options listed become the default each time the<B><I>
WFL</I></B> or<B><I> WFL386</I></B> command is used.
<BR><BR>The<B> WFL</B> environment variable is used by<B><I> WFL</I></B> only.&nbsp; The<B> WFL386</B> environment variable
is used by<B><I> WFL386</I></B> only.&nbsp; Both<B><I> WFL</I></B> and<B><I> WFL386</I></B> pass the relevant options to the
Open Watcom F77 compiler and linker.&nbsp; This environment variable is not examined by the Open Watcom F77 compiler or the
linker when invoked directly.
<BR><BR><B><I>Hint:</I></B>&nbsp; If you are running DOS and you use the same<B><I> WFL</I></B> or<B><I> WFL386</I></B> options
all the time, you may find it handy to place the &quot;SET WFL&quot; or &quot;SET WFL386&quot; command in your DOS system
initialization file,<TT> AUTOEXEC.BAT.</TT>&nbsp; If you are running OS/2 and you use the same<B><I> WFL</I></B> or<B><I>
WFL386</I></B> options all the time, you may find it handy to place the &quot;SET WFL&quot; or &quot;SET WFL386&quot; command
in your OS/2 system initialization file,<TT> CONFIG.SYS.</TT>
<H2 ID="WFLDWFL386_Command_Line_Examples"> WFL/WFL386 Command Line Examples </H2>
<BR>For most small applications, the<B><I> WFL</I></B> or<B><I> WFL386</I></B> command will suffice.&nbsp; We have only scratched
the surface in describing the capabilities of the<B><I> WFL</I></B> and<B><I> WFL386</I></B> commands.&nbsp; The following
examples describe the<B><I> WFL</I></B> and<B><I> WFL386</I></B> commands in more detail.
<BR><BR>Suppose that your application is contained in three files called<TT> apdemo.for</TT>,<TT> aputils.for</TT>, and<TT>
apdata.for.</TT>&nbsp; We can compile and link all three files with one command.
<BR><BR><B>Example 1:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl -d2 apdemo.for aputils.for apdata.for</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl386 -d2 apdemo.for aputils.for apdata.for</TT>
<BR><BR>The executable program will be stored in<TT> apdemo.exe</TT> since<TT> apdemo</TT> appeared first in the list.&nbsp;
Each of the three files is compiled with the &quot;d2&quot; debug option.&nbsp; Debugging information is included in the executable
file.
<BR><BR>We can issue a simpler command if the current directory contains only our three FORTRAN 77 source files.
<BR><BR><B>Example 2:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl -d2 *.for</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl386 -d2 *.for</TT>
<BR><BR><B><I>WFL</I></B> or<B><I> WFL386</I></B> will locate all files with the &quot;.for&quot; filename extension and compile
each of them.&nbsp; The name of the executable file will depend on which of the FORTRAN 77 source files is found first.&nbsp;
Since this is a somewhat haphazard approach to naming the executable file,<B><I> WFL</I></B> and<B><I> WFL386</I></B> have
an option, &quot;fe&quot;, which will allow you to specify the name to be used.
<BR><BR><B>Example 3:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl -d2 -fe=apdemo *.for</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl386 -d2 -fe=apdemo *.for</TT>
<BR><BR>By using the &quot;fe&quot; option, the executable file will always be called<TT> apdemo.exe</TT> regardless of the
order of the FORTRAN 77 source files in the directory.
<BR><BR>If the directory contains other FORTRAN 77 source files which are not part of the application then other tricks may
be used to identify a subset of the files to be compiled and linked.
<BR><BR><B>Example 4:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl -d2 -fe=apdemo ap*.for</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl386 -d2 -fe=apdemo ap*.for</TT>
<BR><BR>Here we compile only those FORTRAN 77 source files that begin with the letters &quot;ap&quot;.
<BR><BR>In our examples, we have recompiled all the source files each time.&nbsp; In general, we will only compile one of
them and include the object code for the others.
<BR><BR><B>Example 5:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl -d2 -fe=apdemo aputils.for ap*.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl386 -d2 -fe=apdemo aputils.for ap*.obj</TT>
<BR><BR>The source file<TT> aputils.for</TT> is recompiled and<TT> apdemo.obj</TT> and<TT> apdata.obj</TT> are included when
linking the application.&nbsp; The &quot;.obj&quot; filename extension indicates that this file need not be compiled.
<BR><BR><B>Example 6:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl -fe=demo *.for utility.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl386 -fe=demo *.for utility.obj</TT>
<BR><BR>All of the FORTRAN 77 source files in the current directory are compiled and then linked with<TT> utility.obj</TT>
to generate<TT> demo.exe.</TT>&nbsp; 
<BR><BR><B>Example 7:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;set wfl=-mm -d1 -op -k=4096</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl -fe=grdemo gr*.for graph.lib -fd=grdemo</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;set wfl386=-d1 -op -k=4096</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl386 -fe=grdemo gr*.for graph.lib -fd=grdemo</TT>
<BR><BR>All FORTRAN 77 source files beginning with the letters &quot;gr&quot; are compiled and then linked with<TT> graph.lib</TT>
to generate<TT> grdemo.exe</TT> which uses a 4K stack.&nbsp; The temporary linker directive file that is created by<B><I>
WFL</I></B> or<B><I> WFL386</I></B> will be kept and renamed to<TT> grdemo.lnk.</TT>&nbsp; 
<BR><BR><B>Example 8:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;set libos2=c:\watcom\lib286\os2;c:\os2</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;set lib=c:\watcom\lib286\dos</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;set wfl=-mm -lp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wfl grdemo1 \watcom\lib286\os2\graphp.obj phapi.lib</TT>
<BR><BR>The file<TT> grdemo1</TT> is compiled for the medium memory model and then linked with<TT> graphp.obj</TT> and<TT>
phapi.lib</TT> to generate<TT> grdemo1.exe</TT> which is to be used with Phar Lap's 286 DOS Extender.&nbsp; The &quot;lp&quot;
option indicates that an OS/2 format executable is to be created.&nbsp; The file<TT> graphp.obj</TT> in the directory &quot;\WATCOM\LIB286\OS2&quot;
contains special initialization code for Phar Lap's 286 DOS Extender.&nbsp; The file<TT> phapi.lib</TT> is part of the Phar
Lap 286 DOS Extender package.&nbsp; The<B> LIBOS2</B> environment variable must include the location of the OS/2 libraries
and the<B> LIB</B> environment variable must include the location of the DOS libraries (in order to locate<TT> graph.lib</TT>).
&nbsp;The<B> LIBOS2</B> environment variable must also include the location of the OS/2 file<TT> doscalls.lib</TT> which is
usually &quot;C:\OS2&quot;.
<BR><BR>For more complex applications, you should use the &quot;Make&quot; utility.
<H1 ID="The_Open_Watcom_Assembler"> The Open Watcom Assembler </H1>
<BR><BR>This chapter describes the Open Watcom Assembler.&nbsp; It takes as input an assembler source file (a file with extension
&quot;.asm&quot;) and produces, as output, an object file.
<BR><BR>The Open Watcom Assembler command line syntax is the following.&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WASM [options] [d:][path]filename[.ext] [options] [@env_var]</TT>
<BR><BR>The square brackets [ ] denote items which are optional.
<DL>
<DT>WASM
<DD>is the name of the Open Watcom Assembler.
<DT>d:
<DD>is an optional drive specification such as &quot;A:&quot;, &quot;B:&quot;, etc.&nbsp; If not specified, the default drive
is assumed.
<DT>path
<DD>is an optional path specification such as &quot;\PROGRAMS\ASM\&quot;.&nbsp; If not specified, the current directory is assumed.
<DT>filename
<DD>is the file name of the assembler source file to be assembled.
<DT>ext
<DD>is the file extension of the assembler source file to be assembled.&nbsp; If omitted, a file extension of &quot;.asm&quot;
is assumed.&nbsp; If the period &quot;.&quot; is specified but not the extension, the file is assumed to have no file extension.
<DT>options
<DD>is a list of valid options, each preceded by a slash (&quot;/&quot;) or a dash (&quot;-&quot;).&nbsp; Options may be specified
in any order.
</DL>
<BR>The options supported by the Open Watcom Assembler are:
<DL>
<DT>{0,1,2,3,4,5,6}{p}{r,s}
<DD>
<DL>
<DT>0
<DD>same as &quot;.8086&quot;
<DT>1
<DD>same as &quot;.186&quot;
<DT>2{p}
<DD>same as &quot;.286&quot; or &quot;.286p&quot;
<DT>3{p}
<DD>same as &quot;.386&quot; or &quot;.386p&quot; (also defines &quot;__386__&quot; and changes the default USE attribute of segments
from &quot;USE16&quot; to &quot;USE32&quot;)
<DT>4{p}
<DD>same as &quot;.486&quot; or &quot;.486p&quot; (also defines &quot;__386__&quot; and changes the default USE attribute of segments
from &quot;USE16&quot; to &quot;USE32&quot;)
<DT>5{p}
<DD>same as &quot;.586&quot; or &quot;.586p&quot; (also defines &quot;__386__&quot; and changes the default USE attribute of segments
from &quot;USE16&quot; to &quot;USE32&quot;)
<DT>6{p}
<DD>same as &quot;.686&quot; or &quot;.686p&quot; (also defines &quot;__386__&quot; and changes the default USE attribute of segments
from &quot;USE16&quot; to &quot;USE32&quot;)
<DT>p
<DD>protect mode
<DT>add r
<DD>defines &quot;__REGISTER__&quot;
<DT>add s
<DD>defines &quot;__STACK__&quot;
</DL>
<BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; -2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -3p&nbsp;&nbsp;&nbsp;&nbsp; -4pr&nbsp;&nbsp;&nbsp; -5p</TT>
<DT>bt=&lt;os&gt;
<DD>defines &quot;__&lt;os&gt;__&quot; and checks the &quot;&lt;os&gt;_INCLUDE&quot; environment variable for include files
<DT>c
<DD>do not output OMF COMENT records that allow WDISASM to figure out when data bytes have been placed in a code segment
<DT>d&lt;name&gt;[=text]
<DD>define text macro
<DT>d1
<DD>line number debugging support
<DT>e
<DD>stop reading assembler source file at END directive.&nbsp; Normally, anything following the END directive will cause an error.
<DT>e&lt;number&gt;
<DD>set error limit number
<DT>fe=&lt;file_name&gt;
<DD>set error file name
<DT>fo=&lt;file_name&gt;
<DD>set object file name
<DT>fi=&lt;file_name&gt;
<DD>force &lt;file_name&gt; to be included
<DT>fpc
<DD>same as &quot;.no87&quot;
<DT>fpi
<DD>inline 80x87 instructions with emulation
<DT>fpi87
<DD>inline 80x87 instructions
<DT>fp0
<DD>same as &quot;.8087&quot;
<DT>fp2
<DD>same as &quot;.287&quot; or &quot;.287p&quot;
<DT>fp3
<DD>same as &quot;.387&quot; or &quot;.387p&quot;
<DT>fp5
<DD>same as &quot;.587&quot; or &quot;.587p&quot;
<DT>fp6
<DD>same as &quot;.687&quot; or &quot;.687p&quot;
<DT>i=&lt;directory&gt;
<DD>add directory to list of include directories
<DT>j or s
<DD>force signed types to be used for signed values
<DT>m{t,s,m,c,l,h,f}
<DD>memory model:&nbsp; (Tiny, Small, Medium, Compact, Large, Huge, Flat)
<DL>
<DT>-mt
<DD>Same as &quot;.model tiny&quot;
<DT>-ms
<DD>Same as &quot;.model small&quot;
<DT>-mm
<DD>Same as &quot;.model medium&quot;
<DT>-mc
<DD>Same as &quot;.model compact&quot;
<DT>-ml
<DD>Same as &quot;.model large&quot;
<DT>-mh
<DD>Same as &quot;.model huge&quot;
<DT>-mf
<DD>Same as &quot;.model flat&quot;
</DL>
<BR>Each of the model directives also defines &quot;__&lt;model&gt;__&quot; (e.g., &quot;.model small&quot; defines &quot;__SMALL__&quot;).
&nbsp;They also affect whether something like &quot;foo proc&quot; is considered a &quot;far&quot; or &quot;near&quot; procedure.
<DT>nd=&lt;name&gt;
<DD>set data segment name
<DT>nm=&lt;name&gt;
<DD>set module name
<DT>nt=&lt;name&gt;
<DD>set name of text segment
<DT>o
<DD>allow C form of octal constants
<DT>zcm=&lt;mode&gt;
<DD>set compatibility mode - watcom, masm or tasm, if &lt;mode&gt; is not specified then masm is used, default mode is watcom
<DT>zld
<DD>remove file dependency information
<DT>zq or q
<DD>operate quietly
<DT>zz
<DD>remove &quot;@size&quot; from STDCALL function names
<DT>zzo
<DD>don't mangle STDCALL symbols (WASM backward compatible)
<DT>?&nbsp; or h
<DD>print this message
<DT>w&lt;number&gt;
<DD>set warning level number
<DT>we
<DD>treat all warnings as errors
<DT>wx
<DD>set warning level to maximum setting
</DL>
<H2 ID="Assembler_Directives__Operators_and_Assembly_Opcodes"> Assembler Directives, Operators and Assembly Opcodes </H2>
<BR>It is not the intention of this chapter to describe assembly-language programming in any detail.&nbsp; You should consult
a book that deals with this topic.&nbsp; However, we present an alphabetically ordered list of the directives, opcodes and
register names that are recognized by the assembler.
<BR><BR><TT>.186&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .286&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; .286c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .286p&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;.287&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .386&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; .386p&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .387&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;.486&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .486p&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;.586&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .586p&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;.686&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .686p&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;.8086&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .8087&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alias&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
align&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; assume&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .break&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; byte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; casemap&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; catstr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .code&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; comm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; comment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;.const&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .continue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cref&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .data?&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; db&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; df&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .dosseg&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dosseg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dt&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dw
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dword&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
echo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; elseif&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .endif&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endif
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endp&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ends&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .endw&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; equ
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; equ2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
.err&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .errb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
.errdef&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .errdif&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .errdifi&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; .erre&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .erridn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
.erridni&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .errnb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .errndef&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; .errnz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; even&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;.exit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exitm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
extern&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; externdef&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extrn&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; far&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fardata&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; .fardata?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
forc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fword&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; global&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;group&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; high&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; highword&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
.if&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; if1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; ifb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ifdef&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; ifdif&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ifdifi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; ife&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ifidn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; ifidni&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ifnb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;ifndef&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; includelib
&nbsp;&nbsp;&nbsp; invoke&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; irpc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .k3d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; le&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lengthof&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .lfcond
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .list&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .listall&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; .listif&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .listmacro&nbsp;&nbsp;&nbsp;&nbsp; .listmacroall&nbsp; local
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; low&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lowword
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lroffset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; macro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mask&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; .mmx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; .model&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; ne&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; near&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; .no87&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .nocref&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; .nolist&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>offset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; opattr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; option
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; org&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oword&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; popcontext&nbsp;
&nbsp;&nbsp; proc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proto&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; ptr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;purge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pushcontext&nbsp;&nbsp;&nbsp; pword&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; qword&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .radix&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; record&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .repeat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; repeat
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .sall&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sbyte&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sdword&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; seg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; segment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .seq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; .sfcond&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;sizeof&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .stack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .startup
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; subtitle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subttl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sword
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tbyte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; textequ&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .tfcond&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; title&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typedef&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;union&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .until&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uses
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .while&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; width&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; word&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .xcref&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .xlist&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .xmm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; .xmm2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .xmm3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;</TT>
<BR><BR><TT>aaa&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aad&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; aam&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aas&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; adc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addps&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addsd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addss&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; addsubpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addsubps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; andnpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; andnps&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; andpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; andps&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; arpl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bound&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; bp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bsf&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bsr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bswap&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; btc&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; btr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
bts&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; callf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cbw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; cdq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; cld&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clflush&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; cli&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clts&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; cmc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmova&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; cmovae&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;cmovbe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmove
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovge&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovle&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; cmovna&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovnae&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;cmovnb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovnbe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovnc&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovne&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovng&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; cmovnge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovnl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmovnle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovno&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovnp&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovns&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovnz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; cmovo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;cmovpe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovpo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovs
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmovz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmp&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpeqpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpeqps&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; cmpeqsd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpeqss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmplepd
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpleps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmplesd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; cmpless&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpltpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpltps&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; cmpltsd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpltss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmpneqpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpneqps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpneqsd&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; cmpneqss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpnlepd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpnleps&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; cmpnlesd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpnless&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpnltpd&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; cmpnltps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpnltsd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpnltss&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; cmpordpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpordps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpordsd
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpordss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmppd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; cmpps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;cmpsb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpsd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cmpss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpunordpd
&nbsp;&nbsp;&nbsp; cmpunordps&nbsp;&nbsp;&nbsp;&nbsp; cmpunordsd&nbsp;&nbsp;&nbsp;&nbsp; cmpunordss&nbsp;&nbsp;&nbsp;&nbsp;
cmpxchg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmpxchg8b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; comisd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; comiss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpuid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;cvtdq2pd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvtdq2ps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvtpd2dq&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; cvtpd2pi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvtpd2ps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvtpi2pd&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; cvtpi2ps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvtps2dq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvtps2pd&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; cvtps2pi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvtsd2si&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvtsd2ss
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvtsi2sd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvtsi2ss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvtss2sd
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvtss2si&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvttpd2dq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvttpd2pi
&nbsp;&nbsp;&nbsp;&nbsp; cvttps2dq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvttps2pi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cvttsd2si&nbsp;&nbsp;
&nbsp; </TT>
<BR><TT>cvttss2si&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cwd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cwde
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; daa&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
das&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; div&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; divpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; divps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; divsd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;divss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; emms&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;enter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f2xm1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fabs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fadd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;faddp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fbld&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;fbstp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fchs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;fclex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fcmovb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fcmovbe
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fcmove&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fcmovnb&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; fcmovnbe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fcmovne&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fcmovnu&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fcmovu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fcom&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; fcomi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fcomip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; fcomp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fcompp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fcos&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fdecstp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fdisi&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fdiv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fdivp&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fdivr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fdivrp&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; femms&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; feni&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ffree&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fiadd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; ficom&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ficomp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fidiv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fidivr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fild&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fimul&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fincstp&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fist&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; fistp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fisttp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; fisub&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fisubr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;flat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fld&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; fld1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fldcw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; fldenv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fldenvd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fldenvw&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fldl2e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fldl2t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; fldlg2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fldln2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fldpi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fldz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fmul&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fmulp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fnclex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fndisi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fneni&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fninit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fnop&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fnrstor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fnrstord&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fnrstorw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fnsave&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fnsaved&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; fnsavew&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fnstcw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fnstenv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fnstenvd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fnstenvw&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; fnstsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fpatan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fprem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fprem1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fptan&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frndint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frstor&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; frstord&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frstorw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fsave
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fsaved&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fsavew&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fscale&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fsetpm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; fsin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fsincos&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;fsqrt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fst&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; fstcw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fstenv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fstenvd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fstenvw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fstp&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fstsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fsub&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fsubp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fsubr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; fsubrp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ftst&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; fucom&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fucomi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fucomip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fucomp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fucompp&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; fwait&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fxam&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; fxch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fxrstor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; fxsave&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fxtract&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fyl2x&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fyl2xp1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; haddpd&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; haddps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hlt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; </TT>
<BR><TT>hsubpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hsubps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; idiv
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; imul&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; ins&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; insb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; insd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; insw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; into&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; invd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; invlpg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; iret&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iretd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;iretdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iretf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ja
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jae&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; jb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jbe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; jc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jcxz&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; je&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jecxz&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jge
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; jle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jmp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; jmpf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jna&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; jnae&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jnb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jnbe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jnc&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jne&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jng&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jnge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jnl&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jnle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jno
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jnp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;jns&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jnz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; jo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jpe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jpo&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; js&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lahf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; lar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lddqu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; ldmxcsr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lds&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leave&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; les&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lfence&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;lfs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lgdt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; lgs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lidt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; lldt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lmsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; lock&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lods&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; lodsb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lodsd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; lodsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;loopd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loope&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
looped&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loopew&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loopne&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loopned&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loopnew&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; loopnz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loopnzd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loopnzw&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loopw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loopz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; loopzd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loopzw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;lsl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ltr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maskmovdqu&nbsp;&nbsp;&nbsp;&nbsp;
maskmovq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxps&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxsd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxss&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; mfence&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; minps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minsd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;minss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; monitor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movapd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movaps&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movddup&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; movdq2q&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movdqa&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;movdqu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movhlps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movhpd&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movhps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movlhps&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; movlpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movlps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
movmskpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movmskps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movntdq&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; movnti&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movntpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movntps
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movntq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; movq2dq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; movsb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movsd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;movshdup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movsldup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movss&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; movsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movsx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; </TT>
<BR><TT>movupd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movups&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movzx
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mul&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mulpd
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mulps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mulsd&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mulss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mwait&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; near&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; neg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; not&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; orpd
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; orps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; out
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
outsb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outsd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outsw
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; packssdw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; packsswb&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; packuswb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; paddb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; paddd&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; paddq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; paddsb&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; paddsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; paddusb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; paddusw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; paddw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pand
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pandn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pause&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pavgb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pavgusb&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; pavgw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pcmpeqb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; pcmpeqd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pcmpeqw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pcmpgtb&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; pcmpgtd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pcmpgtw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pextrw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pf2id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pf2iw&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfacc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfadd&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfcmpeq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfcmpge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;pfcmpgt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfmax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfmin
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfmul&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfnacc&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfpnacc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfrcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; pfrcpit1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfrcpit2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfrsqit1&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; pfrsqrt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfsub&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; pfsubr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pi2fd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pi2fw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pinsrw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pmaddwd
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pmaxsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pmaxub&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; pminsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pminub&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;pmovmskb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pmulhrw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pmulhuw&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; pmulhw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pmullw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;pmuludq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
popa&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; popad&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
popf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; popfd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
por&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prefetch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prefetchnta
&nbsp;&nbsp; prefetcht0&nbsp;&nbsp;&nbsp;&nbsp; prefetcht1&nbsp;&nbsp;&nbsp;&nbsp; prefetcht2&nbsp;&nbsp;&nbsp;&nbsp; prefetchw
&nbsp;&nbsp;&nbsp;&nbsp; psadbw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pshufd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; pshufhw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pshuflw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pshufw&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pslld&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pslldq&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; psllq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psllw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; psrad&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psraw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
psrld&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psrldq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psrlq&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psrlw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psubb&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psubd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psubq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; psubsb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psubsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;psubusb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psubusw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psubw&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pswapd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; punpckhbw&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;punpckhdq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; punpckhqdq&nbsp;&nbsp;&nbsp;&nbsp; punpckhwd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; punpcklbw
&nbsp;&nbsp;&nbsp;&nbsp; punpckldq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; punpcklqdq&nbsp;&nbsp;&nbsp;&nbsp; punpcklwd&nbsp;&nbsp;
&nbsp;&nbsp; push&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pusha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; pushad&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pushd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
pushf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pushfd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pushw&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pxor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rcl&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rcpps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rcpss&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>rcr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rdmsr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; rdpmc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rdtsc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rep&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; repe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; repne&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; repnz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rept&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; repz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;ret&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; retf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retfd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; retn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; ror&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rsm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; rsqrtps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rsqrtss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sahf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; sar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sbb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; scas&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scasb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; scasd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scasw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;seta&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setae&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;setb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setbe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;setc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sete&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; setg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;setl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;setna&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setnae&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setnb
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setnbe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setnc&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setne&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setng&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; setnge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setnl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; setnle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setno&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;setnp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setns&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
setnz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; seto&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
setp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setpe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
setpo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sets&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
setz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sfence&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sgdt
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
shld&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; short&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
shr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shrd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; shufpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shufps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sidt
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sldt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; smsw
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;sqrtpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqrtps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqrtsd
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqrtss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stc&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sti&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stmxcsr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stos&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stosb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stosd&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; stosw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; sub&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subpd&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; subps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subsd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; subss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sysenter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sysexit
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ucomisd&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; ucomiss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unpckhpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unpckhps
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unpcklpd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unpcklps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verr
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wait
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wbinvd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wrmsr&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xadd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xchg&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xlat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xlatb&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xorpd&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xorps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><BR><TT>ah&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; al&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bh&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
bx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; cl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cr0&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cr2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cr3&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cr4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cs
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; dh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; di&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dr0&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dr1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dr2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dr3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;dr6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dr7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ds&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ebp&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ebx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ecx
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; edi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;edx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; es&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; esi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; esp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gs&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mm0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mm1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mm2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;mm3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mm4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; mm5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mm6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mm7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; si&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
st&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; st0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; st1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; st2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; st3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; st4&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; st5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; st6&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; st7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tr3
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tr4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;tr5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tr6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; tr7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmm0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; xmm1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmm2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; xmm3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmm4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; xmm5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmm6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; xmm7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<H2 ID="Unsupported_Directives"> Unsupported Directives </H2>
<BR>Other assemblers support directives that this assembler does not.&nbsp; The following is a list of directives that are
ignored by the Open Watcom Assembler (use of these directives results in a warning message).&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .cref&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; .lfcond&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .list</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .listall&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .listif&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;.listmacro&nbsp;&nbsp;&nbsp;&nbsp; .listmacroall</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .nocref&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .nolist&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;page&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .sall</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .seq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .sfcond&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; subtitle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subttl</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .tfcond&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; .xcref&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .xlist</TT>
<BR><BR>The following is a list of directives that are flagged by the Open Watcom Assembler (use of these directives results
in an error message).&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; addr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .break&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; casemap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catstr</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .continue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; .else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endmacro</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .endif&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .endw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; .exit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; high</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; highword&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .if&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; invoke&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; low</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; lowword&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lroffset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;mask&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; opattr</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; option&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; popcontext&nbsp;&nbsp;&nbsp;&nbsp;
proto&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; purge</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; pushcontext&nbsp;&nbsp;&nbsp; .radix&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; record
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .repeat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .startup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; typedef&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; union</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .until&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .while&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; width</TT>
<H2 ID="Open_Watcom_Assembler_Specific"> Open Watcom Assembler Specific </H2>
<BR>There are a few specific features in Open Watcom Assembler
<H3 ID="Naming_convention"> Naming convention </H3>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; Procedure&nbsp;&nbsp; Variable</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Convention&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; Name</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ---------------&nbsp; ----------&nbsp; ---------</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; '_*'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '_*'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WATCOM_C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; see section Open Watcom &quot;C&quot;
name mangler</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SYSCALL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '*'&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '*'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; STDCALL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '_*@nn'&nbsp;&nbsp;&nbsp;
&nbsp; '_*'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; STDCALL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '_*'&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; '_*'&nbsp;&nbsp;&nbsp; see note 1</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; STDCALL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '*'&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '*'&nbsp;&nbsp;&nbsp; see note 2</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; BASIC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
'^'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '^'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FORTRAN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '^'&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '^'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; PASCAL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '^'
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '^'</TT>
<BR><BR><B>Notes:</B>
<OL>
<LI>In STDCALL procedures name 'nn' is overall parametrs size in bytes.&nbsp; '@nn' is suppressed when -zz command line option
is used (WATCOM 10.0 compatibility).
<LI>STDCALL symbols mangling is suppressed by -zzo command line option (WASM backward compatible).
</OL>
<H3 ID="Open_Watcom__C__name_mangler"> Open Watcom &quot;C&quot; name mangler </H3>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Command line&nbsp;&nbsp;&nbsp;&nbsp; Procedure&nbsp;&nbsp; Variable</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; option&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ---------------&nbsp; ----------&nbsp; ---------</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; 0,1,2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '*_'
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '_*'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; 3,4,5,6 with r&nbsp;&nbsp;&nbsp;&nbsp; '*_'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '_*'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; 3,4,5,6 with s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '*'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
'*'</TT>
<H3 ID="Calling_convention"> Calling convention </H3>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Parameters&nbsp;&nbsp;&nbsp; Parameters&nbsp;&nbsp; Cleanup caller</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Convention&nbsp;&nbsp; Vararg&nbsp;&nbsp;&nbsp; passed by&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
order&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stack</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; -----------&nbsp; ------&nbsp; ------------&nbsp; ------------- --------------</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yes&nbsp;&nbsp;
&nbsp;&nbsp; stack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right to left&nbsp;&nbsp;&nbsp; no</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WATCOM_C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; registers&nbsp;
&nbsp;right to left&nbsp;&nbsp;&nbsp; see note 1</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yes&nbsp;
&nbsp;&nbsp;&nbsp; stack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right to left&nbsp;&nbsp;&nbsp; no</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SYSCALL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stack&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; right to left&nbsp;&nbsp;&nbsp; no</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; STDCALL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stack&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; right to left&nbsp;&nbsp;&nbsp; yes see note 2</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; BASIC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
stack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left to right&nbsp;&nbsp;&nbsp; yes</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FORTRAN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stack
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left to right&nbsp;&nbsp;&nbsp; yes</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; PASCAL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stack
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left to right&nbsp;&nbsp;&nbsp; yes</TT>
<BR><BR><B>Notes:</B>
<OL>
<LI>If any parameter is passed on the stack then WASM automaticaly cleanup caller stack.
<LI>For STDCALL procedures WASM automaticaly cleanup caller stack, except case when vararg parameter is used.
</OL>
<H2 ID="Open_Watcom_Assembler_Diagnostic_Messages"> Open Watcom Assembler Diagnostic Messages </H2>
<DL>
<DT>1 Size doesn't match with previous definition
<DD>
<DT>2 Invalid instruction with current CPU setting
<DD>
<DT>3 LOCK prefix is not allowed on this instruction
<DD>
<DT>4 REP prefix is not allowed on this instruction
<DD>
<DT>5 Invalid memory pointer
<DD>
<DT>6 Cannot use 386 addressing mode with current CPU setting
<DD>
<DT>7 Too many base registers
<DD>
<DT>8 Invalid index register
<DD>
<DT>9 Scale factor must be 1, 2, 4 or 8
<DD>
<DT>10 invalid addressing mode with current CPU setting
<DD>
<DT>11 ESP cannot be used as index
<DD>
<DT>12 Too many base/index registers
<DD>
<DT>13 Memory offset cannot reference to more than one label
<DD>
<DT>14 Offset must be relocatable
<DD>
<DT>15 Memory offset expected
<DD>
<DT>16 Invalid indirect memory operand
<DD>
<DT>17 Cannot mix 16 and 32-bit registers
<DD>
<DT>18 CPU type already set
<DD>
<DT>19 Unknown directive
<DD>
<DT>20 Expecting comma
<DD>
<DT>21 Expecting number
<DD>
<DT>22 Invalid label definition
<DD>
<DT>23 Invalid use of SHORT, NEAR, FAR operator
<DD>
<DT>24 No memory
<DD>
<DT>25 Cannot use 386 segment register with current CPU setting
<DD>
<DT>26 POP CS is not allowed
<DD>
<DT>27 Cannot use 386 register with current CPU setting
<DD>
<DT>28 Only MOV can use special register
<DD>
<DT>29 Cannot use TR3, TR4, TR5 in current CPU setting
<DD>
<DT>30 Cannot use SHORT with CALL
<DD>
<DT>31 Only SHORT displacement is allowed
<DD>
<DT>32 Syntax error
<DD>
<DT>33 Prefix must be followed by an instruction
<DD>
<DT>34 No size given before 'PTR' operator
<DD>
<DT>35 Invalid IMUL format
<DD>
<DT>36 Invalid SHLD/SHRD format
<DD>
<DT>37 Too many commas
<DD>
<DT>38 Syntax error:&nbsp; Unexpected colon
<DD>
<DT>39 Operands must be the same size
<DD>
<DT>40 Invalid instruction operands
<DD>
<DT>41 Immediate constant too large
<DD>
<DT>42 Can not use short or near modifiers with this instruction
<DD>
<DT>43 Jump out of range
<DD>
<DT>44 Displacement cannot be larger than 32k
<DD>
<DT>45 Initializer value too large
<DD>
<DT>46 Symbol already defined
<DD>
<DT>47 Immediate data too large
<DD>
<DT>48 Immediate data out of range
<DD>
<DT>49 Can not transfer control to stack symbol
<DD>
<DT>50 Offset cannot be smaller than WORD size
<DD>
<DT>51 Can not take offset of stack symbol
<DD>
<DT>52 Can not take segment of stack symbol
<DD>
<DT>53 Segment too large
<DD>
<DT>54 Offset cannot be larger than 32k
<DD>
<DT>55 Operand 2 too big
<DD>
<DT>56 Operand 1 too small
<DD>
<DT>57 Too many arithmetic operators
<DD>
<DT>58 Too many open square brackets
<DD>
<DT>59 Too many close square brackets
<DD>
<DT>60 Too many open brackets
<DD>
<DT>61 Too many close brackets
<DD>
<DT>62 Invalid number digit
<DD>
<DT>63 Assembler Code is too long
<DD>
<DT>64 Brackets are not balanced
<DD>
<DT>65 Operator is expected
<DD>
<DT>66 Operand is expected
<DD>
<DT>67 Too many tokens in a line
<DD>
<DT>68 Bracket is expected
<DD>
<DT>69 Illegal use of register
<DD>
<DT>70 Illegal use of label
<DD>
<DT>71 Invalid operand in addition
<DD>
<DT>72 Invalid operand in subtraction
<DD>
<DT>73 One operand must be constant
<DD>
<DT>74 Constant operand is expected
<DD>
<DT>75 A constant operand is expected in addition
<DD>
<DT>76 A constant operand is expected in subtraction
<DD>
<DT>77 A constant operand is expected in multiplication
<DD>
<DT>78 A constant operand is expected in division
<DD>
<DT>79 A constant operand is expected after a positive sign
<DD>
<DT>80 A constant operand is expected after a negative sign
<DD>
<DT>81 Label is not defined
<DD>
<DT>82 More than one override
<DD>
<DT>83 Label is expected
<DD>
<DT>84 Only segment or group label is allowed
<DD>
<DT>85 Only register or label is expected in override
<DD>
<DT>86 Unexpected end of file
<DD>
<DT>87 Label is too long
<DD>
<DT>88 This feature has not been implemented yet
<DD>
<DT>89 Internal Error #1
<DD>
<DT>90 Can not take offset of group
<DD>
<DT>91 Can not take offset of segment
<DD>
<DT>92 Invalid character found
<DD>
<DT>93 Invalid operand size for instruction
<DD>
<DT>94 This instruction is not supported
<DD>
<DT>95 size not specified -- BYTE PTR is assumed
<DD>
<DT>96 size not specified -- WORD PTR is assumed
<DD>
<DT>97 size not specified -- DWORD PTR is assumed
<DD>
<DT>500 Segment parameter is defined already
<DD>
<DT>501 Model parameter is defined already
<DD>
<DT>502 Syntax error in segment definition
<DD>
<DT>503 'AT' is not supported in segment definition
<DD>
<DT>504 Segment definition is changed
<DD>
<DT>505 Lname is too long
<DD>
<DT>506 Block nesting error
<DD>
<DT>507 Ends a segment which is not opened
<DD>
<DT>508 Segment option is undefined
<DD>
<DT>509 Model option is undefined
<DD>
<DT>510 No segment is currently opened
<DD>
<DT>511 Lname is used already
<DD>
<DT>512 Segment is not defined
<DD>
<DT>513 Public is not defined
<DD>
<DT>514 Colon is expected
<DD>
<DT>515 A token is expected after colon
<DD>
<DT>516 Invalid qualified type
<DD>
<DT>517 Qualified type is expected
<DD>
<DT>518 External definition different from previous one
<DD>
<DT>519 Memory model is not found in .MODEL
<DD>
<DT>520 Cannot open include file
<DD>
<DT>521 Name is used already
<DD>
<DT>522 Library name is missing
<DD>
<DT>523 Segment name is missing
<DD>
<DT>524 Group name is missing
<DD>
<DT>525 Data emitted with no segment
<DD>
<DT>526 Seglocation is expected
<DD>
<DT>527 Invalid register
<DD>
<DT>528 Cannot address with assumed register
<DD>
<DT>529 Invalid start address
<DD>
<DT>530 Label is already defined
<DD>
<DT>531 Token is too long
<DD>
<DT>532 The line is too long after expansion
<DD>
<DT>533 A label is expected after colon
<DD>
<DT>534 Must be associated with code
<DD>
<DT>535 Procedure must have a name
<DD>
<DT>536 Procedure is alreadly defined
<DD>
<DT>537 Language type must be specified
<DD>
<DT>538 End of procedure is not found
<DD>
<DT>539 Local variable must immediately follow PROC or MACRO statement
<DD>
<DT>540 Extra character found
<DD>
<DT>541 Cannot nest procedures
<DD>
<DT>542 No procedure is currently defined
<DD>
<DT>543 Procedure name does not match
<DD>
<DT>544 Vararg requires C calling convention
<DD>
<DT>545 Model declared already
<DD>
<DT>546 Model is not declared
<DD>
<DT>547 Backquote expected
<DD>
<DT>548 COMMENT delimiter expected
<DD>
<DT>549 End directive required at end of file
<DD>
<DT>550 Nesting level too deep
<DD>
<DT>551 Symbol not defined
<DD>
<DT>552 Insert Stupid warning #1 here
<DD>
<DT>553 Insert Stupid warning #2 here
<DD>
<DT>554 Spaces not allowed in command line options
<DD>
<DT>555 Error:
<DD>
<DT>556 Source File
<DD>
<DT>557 No filename specified.
<DD>
<DT>558 Out of Memory
<DD>
<DT>559 Cannot Open File -
<DD>
<DT>560 Cannot Close File -
<DD>
<DT>561 Cannot Get Start of Source File -
<DD>
<DT>562 Cannot Set to Start of Source File -
<DD>
<DT>563 Command Line Contains More Than 1 File To Assemble
<DD>
<DT>564 include path %s.
<DD>
<DT>565 Unknown option %s.&nbsp; Use /?&nbsp; for list of options.
<DD>
<DT>566 read more command line from %s.
<DD>
<DT>567 Internal error in %s(%u)
<DD>
<DT>568 OBJECT WRITE ERROR !!
<DD>
<DT>569 NO LOR PHARLAP !!
<DD>
<DT>570 Parameter Required
<DD>
<DT>571 Expecting closing square bracket
<DD>
<DT>572 Expecting file name
<DD>
<DT>573 Floating point instruction not allowed with /fpc
<DD>
<DT>574 Too many errors
<DD>
<DT>575 Build target not recognised
<DD>
<DT>576 Public constants should be numeric
<DD>
<DT>577 Expecting symbol
<DD>
<DT>578 Do not mix simplified and full segment definitions
<DD>
<DT>579 Parms passed in multiple registers must be accessed separately, use %s
<DD>
<DT>580 Ten byte variables not supported in register calling convention
<DD>
<DT>581 Parameter type not recognised
<DD>
<DT>582 forced error:
<DD>
<DT>583 forced error:&nbsp; Value not equal to 0 :&nbsp; %d
<DD>
<DT>584 forced error:&nbsp; Value equal to 0:&nbsp; %d
<DD>
<DT>585 forced error:&nbsp; symbol defined:&nbsp; %s
<DD>
<DT>586 forced error:&nbsp; symbol not defined:&nbsp; %s
<DD>
<DT>587 forced error:&nbsp; string blank :&nbsp; &lt;%s&gt;
<DD>
<DT>588 forced error:&nbsp; string not blank :&nbsp; &lt;%s&gt;
<DD>
<DT>589 forced error:&nbsp; strings not equal :&nbsp; &lt;%s&gt; :&nbsp; &lt;%s&gt;
<DD>
<DT>590 forced error:&nbsp; strings equal :&nbsp; &lt;%s&gt; :&nbsp; &lt;%s&gt;
<DD>
<DT>591 included by file %s(%d)
<DD>
<DT>592 macro called from file %s(%d)
<DD>
<DT>593 Symbol %s not defined
<DD>
<DT>594 Extending jump
<DD>
<DT>595 Ignoring inapplicable directive
<DD>
<DT>596 Unknown symbol class '%s'
<DD>
<DT>597 Symbol class for '%s' already established
<DD>
<DT>598 number must be a power of 2
<DD>
<DT>599 alignment request greater than segment alignment
<DD>
<DT>600 '%s' is already defined
<DD>
<DT>601 %u unclosed conditional directive(s) detected
<DD>
</DL>
<H1 ID="The_Open_Watcom_Library_Manager"> The Open Watcom Library Manager </H1>
<BR>The Open Watcom Library Manager can be used to create and update object library files.&nbsp; It takes as input an object
file or a library file and creates or updates a library file.&nbsp; For OS/2, Win16 and Win32 applications, it can also create
import libraries from Dynamic Link Libraries.&nbsp; 
<BR><BR>An object library is essentially a collection of object files.&nbsp; These object files generally contain utility
routines that can be used as input to the Open Watcom Linker to create an application.&nbsp; The following are some of the
advantages of using library files.
<OL>
<LI>Only those modules that are referenced will be included in the executable file.&nbsp; This eliminates the need to know
which object files should be included and which ones should be left out when linking an application.
<LI>Libraries are a good way of organizing object files.&nbsp; When linking an application, you need only list one library
file instead of several object files.
</OL>
<BR>The Open Watcom Library Manager currently runs under the following operating systems.
<UL>
<LI>DOS
<LI>OS/2
<LI>QNX
<LI>Windows
</UL>
<H2 ID="The_Open_Watcom_Library_Manager_Command_Line"> The Open Watcom Library Manager Command Line </H2>
<BR>The following describes the Open Watcom Library Manager command line.&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WLIB [options_1] lib_file [options_2] [cmd_list]</TT>
<BR><BR>The square brackets &quot;[]&quot; denote items which are optional.
<DL>
<DT>lib_file
<DD>is the file specification for the library file to be processed.&nbsp; If no file extension is specified, a file extension
of &quot;lib&quot; is assumed.
<DT>options_1
<DD>is a list of valid options.&nbsp; Options may be specified in any order.&nbsp; If you are using a DOS, OS/2 or Windows-hosted
version of the Open Watcom Library Manager, options are preceded by a &quot;/&quot; or &quot;-&quot; character.&nbsp; If you
are using a UNIX-hosted version of the Open Watcom Library Manager, options are preceded by a &quot;-&quot; character.
<DT>options_2
<DD>is a list of valid options.&nbsp; These options are only permitted if you are running a DOS, OS/2 or Windows-hosted version
of the Open Watcom Library Manager and must be preceded by a &quot;/&quot; character.&nbsp; The &quot;-&quot; character cannot
be used as an option delimiter for options following the library file name since it will be interpreted as a delete command.
<DT>cmd_list
<DD>is a list of commands to the Open Watcom Library Manager specifying what operations are to be performed.&nbsp; Each command
in<B> cmd_list</B> is separated by a space.
</DL>
<BR>The following is a summary of valid options.&nbsp; Items enclosed in square brackets &quot;[]&quot; are optional.&nbsp;
Items separated by an or-bar &quot;|&quot; and enclosed in parentheses &quot;()&quot; indicate that one of the items must
be specified.&nbsp; Items enclosed in angle brackets &quot;&lt;&gt;&quot; are to be replaced with a user-supplied name or
value (the &quot;&lt;&gt;&quot; are not included in what you specify).
<DL>
<DT>?
<DD>display the usage message
<DT>b
<DD>suppress creation of backup file
<DT>c
<DD>perform case sensitive comparison
<DT>d=&lt;output_directory&gt;
<DD>directory in which extracted object modules will be placed
<DT>fa
<DD>output AR format library (host default ar format)
<DT>fab
<DD>output AR format library (BSD ar format)
<DT>fac
<DD>output AR format library (COFF ar format)
<DT>fag
<DD>output AR format library (GNU ar format)
<DT>fm
<DD>output MLIB format library
<DT>fo
<DD>output OMF format library
<DT>h
<DD>display the usage message
<DT>ia
<DD>generate AXP import records
<DT>ii
<DD>generate X86 import records
<DT>ip
<DD>generate PPC import records
<DT>ie
<DD>generate ELF import records
<DT>ic
<DD>generate COFF import records
<DT>io
<DD>generate OMF import records
<DT>i(r|n)(n|o)
<DD>imports for the resident/non-resident names table are to be imported by name/ordinal.
<DT>l[=&lt;list_file&gt;]
<DD>create a listing file
<DT>m
<DD>display C++ mangled names
<DT>n
<DD>always create a new library
<DT>o=&lt;output_file&gt;
<DD>set output file name for library
<DT>p=&lt;record_size&gt;
<DD>set library page size (supported for &quot;OMF&quot; library format only)
<DT>pa
<DD>set optimal library page size automaticaly (supported for &quot;OMF&quot; library format only)
<DT>q
<DD>suppress identification banner
<DT>s
<DD>strip line number records from object files (supported for &quot;OMF&quot; library format only)
<DT>t
<DD>remove path information from module name specified in THEADR records (supported for &quot;OMF&quot; library format only)
<DT>v
<DD>do not suppress identification banner
<DT>x
<DD>extract all object modules from library
<DT>zld
<DD>strip file dependency info from object files (supported for &quot;OMF&quot; library format only)
</DL>
<BR>The following sections describe the operations that can be performed on a library file.&nbsp; Note that before making
a change to a library file, the Open Watcom Library Manager makes a backup copy of the original library file unless the &quot;o&quot;
option is used to specify an output library file whose name is different than the original library file, or the &quot;b&quot;
option is used to suppress the creation of the backup file.&nbsp; The backup copy has the same file name as the original library
file but has a file extension of &quot;bak&quot;.&nbsp; Hence,<B> lib_file</B> should not have a file extension of &quot;bak&quot;.
&nbsp;
<H2 ID="Open_Watcom_Library_Manager_Module_Commands"> Open Watcom Library Manager Module Commands </H2>
<BR>The following is a summary of basic Open Watcom Library Manager module manipulation commands:
<DL>
<DT>+
<DD>add module to a library
<DT>-
<DD>remove module from a library
<DT>* or :
<DD>extract module from a library (<B> :</B>&nbsp; is used with a UNIX-hosted version of the Open Watcom Library Manager, otherwise<B>
*</B> is used)
<DT>++
<DD>add import library entry
</DL>
<H2 ID="Adding_Modules_to_a_Library_File"> Adding Modules to a Library File </H2>
<BR>An object file can be added to a library file by specifying a<B> +obj_file</B> command where<B> obj_file</B> is the file
specification for an object file.&nbsp; If you are using a DOS, OS/2 or Windows-hosted version of the Open Watcom Library
Manager, a file extension of &quot;obj&quot; is assumed if none is specified.&nbsp; If you are using a UNIX-hosted version
of the Open Watcom Library Manager, a file extension of &quot;o&quot; is assumed if none is specified.&nbsp; If the library
file does not exist, a warning message will be issued and the library file will be created.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib +myobj</TT>
<BR><BR>In the above example, the object file &quot;myobj&quot; is added to the library file &quot;mylib.lib&quot;.
<BR><BR>When a module is added to a library, the Open Watcom Library Manager will issue a warning if a symbol redefinition
occurs.&nbsp; This will occur if a symbol in the module being added is already defined in another module that already exists
in the library file.&nbsp; Note that the module will be added to the library in any case.
<BR><BR>It is also possible to combine two library files together.&nbsp; The following example adds all modules in the library
&quot;newlib.lib&quot; to the library &quot;mylib.lib&quot;.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib +newlib.lib</TT>
<BR><BR>Note that you must specify the &quot;lib&quot; file extension.&nbsp; Otherwise, the Open Watcom Library Manager will
assume you are adding an object file.
<H2 ID="Deleting_Modules_from_a_Library_File"> Deleting Modules from a Library File </H2>
<BR>A module can be deleted from a library file by specifying a<B> -mod_name</B> command where<B> mod_name</B> is the file
name of the object file when it was added to the library with the directory and file extension removed.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib -myobj</TT>
<BR><BR>In the above example, the Open Watcom Library Manager is instructed to delete the module &quot;myobj&quot; from the
library file &quot;mylib.lib&quot;.
<BR><BR>It is also possible to specify a library file instead of a module name.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib -oldlib.lib</TT>
<BR><BR>In the above example, all modules in the library file &quot;oldlib.lib&quot; are removed from the library file &quot;mylib.lib&quot;.
&nbsp;Note that you must specify the &quot;lib&quot; file extension.&nbsp; Otherwise, the Open Watcom Library Manager will
assume you are removing an object module.
<H2 ID="Replacing_Modules_in_a_Library_File"> Replacing Modules in a Library File </H2>
<BR>A module can be replaced by specifying a<B> -+mod_name</B> or<B> +-mod_name</B> command.&nbsp; The module<B> mod_name</B>
is deleted from the library.&nbsp; The object file &quot;mod_name&quot; is then added to the library.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib -+myobj</TT>
<BR><BR>In the above example, the module &quot;myobj&quot; is replaced by the object file &quot;myobj&quot;.
<BR><BR>It is also possible to merge two library files.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib -+updlib.lib</TT>
<BR><BR>In the above example, all modules in the library file &quot;updlib.lib&quot; replace the corresponding modules in
the library file &quot;mylib.lib&quot;.&nbsp; Any module in the library &quot;updlib.lib&quot; not in library &quot;mylib.lib&quot;
is added to the library &quot;mylib.lib&quot;.&nbsp; Note that you must specify the &quot;lib&quot; file extension.&nbsp;
Otherwise, the Open Watcom Library Manager will assume you are replacing an object module.
<H2 ID="Extracting_a_Module_from_a_Library_File"> Extracting a Module from a Library File </H2>
<BR>A module can be extracted from a library file by specifying a<B> *mod_name</B> [=file_name] command for a DOS, OS/2 or
Windows-hosted version of the Open Watcom Library Manager or a<B> :mod_name</B> [=file_name] command for a UNIX-hosted version
of the Open Watcom Library Manager.&nbsp; The module<B> mod_name</B> is not deleted but is copied to a disk file.&nbsp; If<B>
mod_name</B> is preceded by a path specification, the output file will be placed in the directory identified by the path specification.
&nbsp;If<B> mod_name</B> is followed by a file extension, the output file will contain the specified file extension.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib *myobj&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DOS, OS/2 or Windows-hosted</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib :myobj&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UNIX-hosted</TT>
<BR><BR>In the above example, the module &quot;myobj&quot; is copied to a disk file.&nbsp; The disk file will be an object
file with file name &quot;myobj&quot;.&nbsp; If you are running a DOS, OS/2 or Windows-hosted version of the Open Watcom Library
Manager, a file extension of &quot;obj&quot; will be used.&nbsp; If you are running a UNIX-hosted version of the Open Watcom
Library Manager, a file extension of &quot;o&quot; will be used.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib *myobj.out&nbsp;&nbsp;&nbsp; DOS, OS/2 or Windows-hosted</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib :myobj.out&nbsp;&nbsp;&nbsp; UNIX-hosted</TT>
<BR><BR>In the above example, the module &quot;myobj&quot; will be extracted from the library file &quot;mylib.lib&quot; and
placed in the file &quot;myobj.out&quot;
<BR><BR>The following form of the extract command can be used if the module name is not the same as the output file name.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib *myobj=newmyobj.out&nbsp;&nbsp;&nbsp; DOS, OS/2 or Windows-hosted</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib :myobj=newmyobj.out&nbsp;&nbsp;&nbsp; UNIX-hosted</TT>
<BR><BR>You can extract a module from a file and have that module deleted from the library file by specifying a<B> *-mod_name</B>
command for a DOS, OS/2 or Windows-hosted version of the Open Watcom Library Manager or a<B> :-mod_name</B> command for a
UNIX-hosted version of the Open Watcom Library Manager.&nbsp; The following example performs the same operations as in the
previous example but, in addition, the module is deleted from the library file.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib *-myobj.out&nbsp;&nbsp; DOS, OS/2 or Windows-hosted</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib :-myobj.out&nbsp;&nbsp; UNIX-hosted</TT>
<BR><BR>Note that the same result is achieved if the delete operator precedes the extract operator.
<H2 ID="Creating_Import_Libraries"> Creating Import Libraries </H2>
<BR>The Open Watcom Library Manager can also be used to create import libraries from Dynamic Link Libraries.&nbsp; Import
libraries are used when linking OS/2, Win16 or Win32 applications.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib implib +dynamic.dll</TT>
<BR><BR>In the above example, the following actions are performed.&nbsp; For each external symbol in the specified Dynamic
Link Library, a special object module is created that identifies the external symbol and the actual name of the Dynamic Link
Library it is defined in.&nbsp; This object module is then added to the specified library.&nbsp; The resulting library is
called an import library.
<BR><BR>Note that you must specify the &quot;dll&quot; file extension.&nbsp; Otherwise, the Open Watcom Library Manager will
assume you are adding an object file.
<H2 ID="Creating_Import_Library_Entries"> Creating Import Library Entries </H2>
<BR>An import library entry can be created and added to a library by specifying a command of the following form.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ++sym.dll_name[.[altsym].export_name][.ordinal]</TT>
<DL>
<DT>where
<DD><B>description</B>
<DT>sym
<DD>is the name of a symbol in a Dynamic Link Library.
<DT>dll_name
<DD>is the name of the Dynamic Link Library that defines<TT> sym.</TT>
<DT>altsym
<DD>is the name of a symbol in a Dynamic Link Library.&nbsp; When omitted, the default symbol name is<TT> sym.</TT>
<DT>export_name
<DD>is the name that an application that is linking to the Dynamic Link Library uses to reference<TT> sym.</TT>&nbsp; When omitted,
the default export name is<TT> sym.</TT>
<DT>ordinal
<DD>is the ordinal value that can be used to identify<TT> sym</TT> instead of using the name<TT> export_name.</TT>
</DL>
<BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib math ++__sin.trig.sin.1</TT>
<BR><BR>In the above example, an import library entry will be created for symbol<TT> sin</TT> and added to the library &quot;math.lib&quot;.
&nbsp;The symbol<TT> sin</TT> is defined in the Dynamic Link Library called &quot;trig.dll&quot; as<TT> __sin.</TT>&nbsp;
When an application is linked with the library &quot;math.lib&quot;, the resulting executable file will contain an import
by ordinal value 1.&nbsp; If the ordinal value was omitted, the resulting executable file would contain an import by name<TT>
sin.</TT>
<H2 ID="Commands_from_a_File_or_Environment_Variable"> Commands from a File or Environment Variable </H2>
<BR>The Open Watcom Library Manager can be instructed to process all commands in a disk file or environment variable by specifying
the<B> @name</B> command where<B> name</B> is a file specification for the command file or the name of an environment variable.
&nbsp;A file extension of &quot;lbc&quot; is assumed for files if none is specified.&nbsp; The commands must be one of those
previously described.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib @mycmd</TT>
<BR><BR>In the above example, all commands in the environment variable &quot;mycmd&quot; or file &quot;mycmd.lbc&quot; are
processed by the Open Watcom Library Manager.
<H2 ID="Open_Watcom_Library_Manager_Options"> Open Watcom Library Manager Options </H2>
<BR>The following sections describe the list of options allowed when invoking the Open Watcom Library Manager.
<H3 ID="Suppress_Creation_of_Backup_File_M__b__Option"> Suppress Creation of Backup File - &quot;b&quot; Option </H3>
<BR>The &quot;b&quot; option tells the Open Watcom Library Manager to not create a backup library file.&nbsp; In the following
example, the object file identified by &quot;new&quot; will be added to the library file &quot;mylib.lib&quot;.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -b mylib +new</TT>
<BR><BR>If the library file &quot;mylib.lib&quot; already exits, no backup library file (&quot;mylib.bak&quot;) will be created.
<H3 ID="Case_Sensitive_Symbol_Names_M__c__Option"> Case Sensitive Symbol Names - &quot;c&quot; Option </H3>
<BR>The &quot;c&quot; option tells the Open Watcom Library Manager to use a case sensitive compare when comparing a symbol
to be added to the library to a symbol already in the library file.&nbsp; This will cause the names &quot;myrtn&quot; and
&quot;MYRTN&quot; to be treated as different symbols.&nbsp; By default, comparisons are case insensitive.&nbsp; That is the
symbol &quot;myrtn&quot; is the same as the symbol &quot;MYRTN&quot;.
<H3 ID="Specify_Output_Directory_M__d__Option"> Specify Output Directory - &quot;d&quot; Option </H3>
<BR>The &quot;d&quot; option tells the Open Watcom Library Manager the directory in which all extracted modules are to be
placed.&nbsp; The default is to place all extracted modules in the current directory.
<BR><BR>In the following example, the module &quot;mymod&quot; is extracted from the library &quot;mylib.lib&quot;.&nbsp;
If you are running a DOS, OS/2 or Windows-hosted version of the Open Watcom Library Manager, the module will be placed in
the file &quot;\obj\mymod.obj&quot;.&nbsp; If you are running a UNIX-hosted version of the Open Watcom Library Manager, the
module will be placed in the file &quot;/o/mymod.o&quot;.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -d=\obj mymod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DOS, OS/2 or Windows-hosted</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -d=/o mymod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UNIX-hosted</TT>
<H3 ID="Specify_Output_Format_M__f__Option"> Specify Output Format - &quot;f&quot; Option </H3>
<BR>The &quot;f&quot; option tells the Open Watcom Library Manager the format of the output library.&nbsp; The default output
format is determined by the type of object files that are added to the library when it is created.&nbsp; The possible output
format options are:
<DL>
<DT>fa
<DD>output AR format library, host OS default ar format
<DT>fab
<DD>output AR format library, BSD ar format
<DT>fac
<DD>output AR format library, COFF ar format
<DT>fag
<DD>output AR format library, GNU ar format
<DT>fm
<DD>output MLIB format library
<DT>fo
<DD>output OMF format library
</DL>
<H3 ID="Generating_Imports_M__i__Option"> Generating Imports - &quot;i&quot; Option </H3>
<BR>The &quot;i&quot; option can be used to describe type of import library to create.
<DL>
<DT>ia
<DD>generate AXP import records
<DT>ii
<DD>generate X86 import records
<DT>ip
<DD>generate PPC import records
<DT>ie
<DD>generate ELF import records
<DT>ic
<DD>generate COFF import records
<DT>io
<DD>generate OMF import records
</DL>
<BR>When creating import libraries from Dynamic Link Libraries, import entries for the names in the resident and non-resident
names tables are created.&nbsp; The &quot;i&quot; option can be used to describe the method used to import these names.
<DL>
<DT>iro
<DD>Specifying &quot;iro&quot; causes imports for names in the resident names table to be imported by ordinal.
<DT>irn
<DD>Specifying &quot;irn&quot; causes imports for names in the resident names table to be imported by name.&nbsp; This is the
default.
<DT>ino
<DD>Specifying &quot;ino&quot; causes imports for names in the non-resident names table to be imported by ordinal.&nbsp; This
is the default.
<DT>inn
<DD>Specifying &quot;inn&quot; causes imports for names in the non-resident names table to be imported by name.
</DL>
<BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -iro -inn implib +dynamic.dll</TT>
<BR><BR>Note that you must specify the &quot;dll&quot; file extension for the Dynamic Link Library.&nbsp; Otherwise an object
file will be assumed.
<H3 ID="Creating_a_Listing_File_M__l__Option"> Creating a Listing File - &quot;l&quot; Option </H3>
<BR>The &quot;l&quot; (lower case &quot;L&quot;) option instructs the Open Watcom Library Manager to produce a list of the
names of all symbols that can be found in the library file to a listing file.&nbsp; The file name of the listing file is the
same as the file name of the library file.&nbsp; The file extension of the listing file is &quot;lst&quot;.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -l mylib</TT>
<BR><BR>In the above example, the Open Watcom Library Manager is instructed to list the contents of the library file &quot;mylib.lib&quot;
and produce the output to a listing file called &quot;mylib.lst&quot;.
<BR><BR>An alternate form of this option is<TT> -l=list_file.</TT>&nbsp; With this form, you can specify the name of the listing
file.&nbsp; When specifying a listing file name, a file extension of &quot;lst&quot; is assumed if none is specified.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -l=mylib.out mylib</TT>
<BR><BR>In the above example, the Open Watcom Library Manager is instructed to list the contents of the library file &quot;mylib.lib&quot;
and produce the output to a listing file called &quot;mylib.out&quot;.
<BR><BR>You can get a listing of the contents of a library file to the terminal by specifying only the library name on the
command line as demonstrated by the following example.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib mylib</TT>
<H3 ID="Display_CPP_Mangled_Names_M__m__Option"> Display C++ Mangled Names - &quot;m&quot; Option </H3>
<BR>The &quot;m&quot; option instructs the Open Watcom Library Manager to display C++ mangled names rather than displaying
their demangled form.&nbsp; The default is to interpret mangled C++ names and display them in a somewhat more intelligible
form.
<H3 ID="Always_Create_a_New_Library_M__n__Option"> Always Create a New Library - &quot;n&quot; Option </H3>
<BR>The &quot;n&quot; option tells the Open Watcom Library Manager to always create a new library file.&nbsp; If the library
file already exists, a backup copy is made (unless the &quot;b&quot; option was specified).&nbsp; The original contents of
the library are discarded and a new library is created.&nbsp; If the &quot;n&quot; option was not specified, the existing
library would be updated.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -n mylib +myobj</TT>
<BR><BR>In the above example, a library file called &quot;mylib.lib&quot; is created.&nbsp; It will contain a single object
module, namely &quot;myobj&quot;, regardless of the contents of &quot;mylib.lib&quot; prior to issuing the above command.
&nbsp;If &quot;mylib.lib&quot; already exists, it will be renamed to &quot;mylib.bak&quot;.
<H3 ID="Specifying_an_Output_File_Name_M__o__Option"> Specifying an Output File Name - &quot;o&quot; Option </H3>
<BR>The &quot;o&quot; option can be used to specify the output library file name if you want the original library to remain
unchanged and a new library created.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -o=newlib lib1 +lib2.lib</TT>
<BR><BR>In the above example, the modules from &quot;lib1.lib&quot; and &quot;lib2.lib&quot; are added to the library &quot;newlib.lib&quot;.
&nbsp;Note that since the original library remains unchanged, no backup copy is created.&nbsp; Also, if the &quot;l&quot;
option is used to specify a listing file, the listing file will assume the file name of the output library.
<H3 ID="Specifying_a_Library_Record_Size_M__p__and__pa__Options"> Specifying a Library Record Size - &quot;p&quot; and &quot;pa&quot; Options </H3>
<BR>The &quot;p&quot; option specifies the record size in bytes for each record in the library file.&nbsp; The record size
must be a power of 2 and in the range 16 to 32768.&nbsp; If the record size is less than 16, it will be rounded up to 16.
&nbsp;If the record size is greater than 16 and not a power of 2, it will be rounded up to the nearest power of 2.&nbsp; The
default record size is 256 bytes.
<BR><BR>Each entry in the dictionary of a library file contains an offset from the start of the file which points to a module.
&nbsp;The offset is 16 bits and is a multiple of the record size.&nbsp; Since the default record size is 256, the maximum
size of a library file for a record size of 256 is 256*64K.&nbsp; If the size of the library file increases beyond this size,
you must increase the record size.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -p=512 lib1 +lib2.lib</TT>
<BR><BR>In the above example, the Open Watcom Library Manager is instructed to create/update the library file &quot;lib1.lib&quot;
by adding the modules from the library file &quot;lib2.lib&quot;.&nbsp; The record size of the resulting library file is 512
bytes.
<BR><BR>The &quot;pa&quot; option specifies the record size is determined automaticaly to be minimal in size.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -pa lib1 +lib2.lib</TT>
<BR><BR>In the above example, the Open Watcom Library Manager is instructed to create/update the library file &quot;lib1.lib&quot;
by adding the modules from the library file &quot;lib2.lib&quot;.&nbsp; The record size of the resulting library file is optimal
(minimal) regardles of what each library page size is.
<H3 ID="Operate_Quietly_M__q__Option"> Operate Quietly - &quot;q&quot; Option </H3>
<BR>The &quot;q&quot; option suppressing the banner and copyright notice that is normally displayed when the Open Watcom Library
Manager is invoked.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -q -l mylib</TT>
<H3 ID="Strip_Line_Number_Records_M__s__Option"> Strip Line Number Records - &quot;s&quot; Option </H3>
<BR>The &quot;s&quot; option tells the Open Watcom Library Manager to remove line number records from object files that are
being added to a library.&nbsp; Line number records are generated in the object file if the &quot;d1&quot; option is specified
when compiling the source code.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -s mylib +myobj</TT>
<H3 ID="Trim_Module_Name_M__t__Option"> Trim Module Name - &quot;t&quot; Option </H3>
<BR>The &quot;t&quot; option tells the Open Watcom Library Manager to remove path information from the module name specified
in THEADR records in object files that are being added to a library.&nbsp; The module name is created from the file name by
the compiler and placed in the THEADR record of the object file.&nbsp; The module name will contain path information if the
file name given to the compiler contains path information.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -t mylib +myobj</TT>
<H3 ID="Operate_Verbosely_M__v__Option"> Operate Verbosely - &quot;v&quot; Option </H3>
<BR>The &quot;v&quot; option enables the display of the banner and copyright notice when the Open Watcom Library Manager is
invoked.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -v -l mylib</TT>
<H3 ID="Explode_Library_File_M__x__Option"> Explode Library File - &quot;x&quot; Option </H3>
<BR>The &quot;x&quot; option tells the Open Watcom Library Manager to extract all modules from the library.&nbsp; Note that
the modules are not deleted from the library.&nbsp; Object modules will be placed in the current directory unless the &quot;d&quot;
option is used to specify an alternate directory.
<BR><BR>In the following example all modules will be extracted from the library &quot;mylib.lib&quot; and placed in the current
directory.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -x mylib</TT>
<BR><BR>In the following example, all modules will be extracted from the library &quot;mylib.lib&quot;.&nbsp; If you are running
a DOS, OS/2 or Windows-hosted version of the Open Watcom Library Manager, the module will be placed in the &quot;\obj&quot;
directory.&nbsp; If you are running a UNIX-hosted version of the Open Watcom Library Manager, the module will be placed in
the file &quot;/o&quot; directory.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -x -d=\obj mylib&nbsp;&nbsp;&nbsp; DOS, OS/2 or Windows-hosted</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib -x -d=/o mylib&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UNIX-hosted</TT>
<H2 ID="Librarian_Error_Messages"> Librarian Error Messages </H2>
<BR>The following messages may be issued by the Open Watcom Library Manager.
<DL>
<DT>Error!&nbsp; Could not open object file '%s'.
<DD>Object file '%s' could not be found.&nbsp; This message is usually issued when an attempt is made to add a non-existent object
file to the library.
<DT>Error!&nbsp; Could not open library file '%s'.
<DD>The specified library file could not be found.&nbsp; This is usually issued for input library files.&nbsp; For example, if
you are combining two library files, the library file you are adding is an input library file and the library file you are
adding to or creating is an output library file.
<DT>Error!&nbsp; Invalid object module in file '%s' not added.
<DD>The specified file contains an invalid object module.
<DT>Error!&nbsp; Dictionary too large.&nbsp; Recommend split library into two libraries.
<DD>The size of the dictionary in a library file cannot exceed 64K.&nbsp; You must split the library file into two separate library
files.
<DT>Error!&nbsp; Redefinition of module '%s' in file '%s'.
<DD>This message is usually issued when an attempt is made to add a module to a library that already contains a module by that
name.
<DT>Warning!&nbsp; Redefinition of symbol '%s' in file '%s' ignored.
<DD>This message is issued if a symbol defined by a module already in the library is also defined by a module being added to the
library.
<DT>Error!&nbsp; Library too large.&nbsp; Recommend split library into two libraries or try a larger page_bound than %xH.
<DD>The record size of the library file does not allow the library file to increase beyond its current size.&nbsp; The record
size of the library file must be increased using the &quot;p&quot; option.
<DT>Error!&nbsp; Expected '%s' in '%s' but found '%s'.
<DD>An error occurred while scanning command input.
<DT>Warning!&nbsp; Could not find module '%s' for deletion.
<DD>This message is issued if an attempt is made to delete a module that does not exist in the library.
<DT>Error!&nbsp; Could not find module '%s' for extraction.
<DD>This message is issued if an attempt is made to extract a module that does not exist in the library.
<DT>Error!&nbsp; Could not rename old library for backup.
<DD>The Open Watcom Library Manager creates a backup copy before making any changes (unless the &quot;b&quot; option is specified).
&nbsp;This message is issued if an error occurred while trying to rename the original library file to the backup file name.
<DT>Warning!&nbsp; Could not open library '%s' :&nbsp; will be created.
<DD>The specified library does not exist.&nbsp; It is usually issued when you are adding to a non-existent library.&nbsp; The
Open Watcom Library Manager will create the library.
<DT>Warning!&nbsp; Output library name specification ignored.
<DD>This message is issued if the library file specified by the &quot;o&quot; option could not be opened.
<DT>Warning!&nbsp; Could not open library '%s' and no operations specified:&nbsp; will not be created.
<DD>This message is issued if the library file specified on the command line does not exist and no operations were specified.
&nbsp;For example, asking for a listing file of a non-existent library will cause this message to be issued.
<DT>Warning!&nbsp; Could not open listing file '%s'.
<DD>The listing file could not be opened.&nbsp; For example, this message will be issued when a &quot;disk full&quot; condition
is present.
<DT>Error!&nbsp; Could not open output library.
<DD>The output library could not be opened.
<DT>Error!&nbsp; Unable to write to output library.
<DD>An error occurred while writing to the output library.
<DT>Error!&nbsp; Unable to write to extraction file '%s'.
<DD>This message is issued when extracting an object module from a library file and an error occurs while writing to the output
file.
<DT>Error!&nbsp; Out of Memory.
<DD>There was not enough memory to process the library file.
<DT>Error!&nbsp; Could not open file '%s'.
<DD>This message is issued if the output file for a module that is being extracted from a library could not be opened.
<DT>Error!&nbsp; Library '%s' is invalid.&nbsp; Contents ignored.
<DD>The library file does not contain the correct header information.
<DT>Error!&nbsp; Library '%s' has an invalid page size.&nbsp; Contents ignored.
<DD>The library file has an invalid record size.&nbsp; The record size is contained in the library header and must be a power
of 2.
<DT>Error!&nbsp; Invalid object record found in file '%s'.
<DD>The specified file contains an invalid object record.
<DT>Error!&nbsp; No library specified on command line.
<DD>This message is issued if a library file name is not specified on the command line.
<DT>Error!&nbsp; Expecting library name.
<DD>This message is issued if the location of the library file name on the command line is incorrect.
<DT>Warning!&nbsp; Invalid file name '%s'.
<DD>This message is issued if an invalid file name is specified.&nbsp; For example, a file name longer that 127 characters is
not allowed.
<DT>Error!&nbsp; Could not open command file '%s'.
<DD>The specified command file could not be opened.
<DT>Error!&nbsp; Could not read from file '%s'.&nbsp; Contents ignored as command input.
<DD>An error occurred while reading a command file.
</DL>
<H1 ID="The_Object_File_Disassembler"> The Object File Disassembler </H1>
<BR>This chapter describes the Open Watcom Disassembler.&nbsp; It takes as input an object file (a file with extension &quot;.obj&quot;)
and produces, as output, the Intel assembly language equivalent.&nbsp; The Open Watcom compilers do not produce an assembly
language listing directly from a source program.&nbsp; Instead, the Open Watcom Disassembler can be used to generate an assembly
language listing from the object file generated by the compiler.
<BR><BR>The Open Watcom Disassembler command line syntax is the following.&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WDIS [options] [d:][path]filename[.ext] [options]</TT>
<BR><BR>The square brackets [ ] denote items which are optional.
<DL>
<DT>WDIS
<DD>is the name of the Open Watcom Disassembler.
<DT>d:
<DD>is an optional drive specification such as &quot;A:&quot;, &quot;B:&quot;, etc.&nbsp; If not specified, the default drive
is assumed.
<DT>path
<DD>is an optional path specification such as &quot;\PROGRAMS\OBJ\&quot;.&nbsp; If not specified, the current directory is assumed.
<DT>filename
<DD>is the file name of the object file to disassemble.
<DT>ext
<DD>is the file extension of the object file to disassemble.&nbsp; If omitted, a file extension of &quot;.obj&quot; is assumed.
&nbsp;If the period &quot;.&quot; is specified but not the extension, the file is assumed to have no file extension.
<DT>options
<DD>is a list of valid options, each preceded by a slash (&quot;/&quot;) or a dash (&quot;-&quot;).&nbsp; Options may be specified
in any order.
</DL>
<BR>The options supported by the Open Watcom Disassembler are:
<DL>
<DT>a
<DD>write assembly instructions only to the listing file
<DT>e
<DD>include list of external names
<DT>ff
<DD>print FPU emulator fixups as comment line
<DT>fi
<DD>use alternate indexing format [80(x)86 only]
<DT>fp
<DD>do not use instruction name pseudonyms
<DT>fr
<DD>do not use register name pseudonyms [Alpha only]
<DT>fu
<DD>instructions/registers in upper case
<DT>i=&lt;char&gt;
<DD>redefine the initial character of internal labels (default:&nbsp; L)
<DT>l[=&lt;list_file&gt;]
<DD>create a listing file
<DT>m
<DD>leave C++ names mangled
<DT>p
<DD>include list of public names
<DT>s[=&lt;source_file&gt;]
<DD>using object file source line information, imbed original source lines into the output file
</DL>
<BR>The following sections describe the list of options.
<H2 ID="Changing_the_Internal_Label_Character_M__iEXcharY_"> Changing the Internal Label Character - &quot;i=&lt;char&gt;&quot; </H2>
<BR>The &quot;i&quot; option permits you to specify the first character to be used for internal labels.&nbsp; Internal labels
take the form &quot;Ln&quot; where &quot;n&quot; is one or more digits.&nbsp; The default character &quot;L&quot; can be changed
using the &quot;i&quot; option.&nbsp; The replacement character must be a letter (a-z, A-Z).&nbsp; A lowercase letter is converted
to uppercase.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wdis calendar -i=x</TT>
<H2 ID="The_Assembly_Format_Option_M__a_"> The Assembly Format Option - &quot;a&quot; </H2>
<BR>The &quot;a&quot; option controls the format of the output produced to the listing file.&nbsp; When specified, the Open
Watcom Disassembler will produce a listing file that can be used as input to an assembler.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wdis calendar -a -l=calendar.asm</TT>
<BR><BR>In the above example, the Open Watcom Disassembler is instructed to disassemble the contents of the file<TT> calendar.obj</TT>
and produce the output to the file<TT> calendar.asm</TT> so that it can be assembled by an assembler.
<H2 ID="The_External_Symbols_Option_M__e_"> The External Symbols Option - &quot;e&quot; </H2>
<BR>The &quot;e&quot; option controls the amount of information produced in the listing file.&nbsp; When specified, a list
of all externally defined symbols is produced in the listing file.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wdis calendar -e</TT>
<BR><BR>In the above example, the Open Watcom Disassembler is instructed to disassemble the contents of the file<TT> calendar.obj</TT>
and produce the output, with a list of all external symbols, on the screen.&nbsp; A sample list of external symbols is shown
below.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; List of external symbols</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Symbol</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ----------------</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CALENDAR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 000000cf 0000008b 00000047</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CLEARSCREEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0000000a</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; GETDAT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00000018</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; POSCURSOR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 000000e8</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ------------------------------------------------------------</TT>
<BR><BR>Each externally defined symbol is followed by a list of location counter values indicating where the symbol is referenced.
<BR><BR>The &quot;e&quot; option is ignored when the &quot;a&quot; option is specified.
<H2 ID="The_FPU_emulator_fixups_Option_M__ff_"> The FPU emulator fixups Option - &quot;ff&quot; </H2>
<BR>The &quot;ff&quot; option causes the FPU emulator fixups will be printed as comment line before Intel FPU instruction.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; FPU fixup FIDRQQ</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fld&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tbyte ptr [bx]</TT>
<H2 ID="The_Alternate_Addressing_Form_Option_M__fi_"> The Alternate Addressing Form Option - &quot;fi&quot; </H2>
<BR>The &quot;fi&quot; option causes an alternate syntactical form of the based or indexed addressing mode of the 80x86 to
be used in an instruction.&nbsp; For example, the following form is used by default for Intel instructions.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; mov ax,-2[bp]</TT>
<BR><BR>If the &quot;fi&quot; option is specified, the following form is used.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; mov ax,[bp-2]</TT>
<H2 ID="The_No_Instruction_Name_Pseudonyms_Option_M__fp_"> The No Instruction Name Pseudonyms Option - &quot;fp&quot; </H2>
<BR>By default, AXP instruction name pseudonyms are emitted in place of actual instruction names.&nbsp; The Open Watcom AXP
Assembler accepts instruction name pseudonyms.&nbsp; The &quot;fp&quot; option instructs the Open Watcom Disassembler to emit
the actual instruction names instead.
<H2 ID="The_No_Register_Name_Pseudonyms_Option_M__fr_"> The No Register Name Pseudonyms Option - &quot;fr&quot; </H2>
<BR>By default, AXP register names are emitted in pseudonym form.&nbsp; The Open Watcom AXP Assembler accepts register pseudonyms.
&nbsp;The &quot;fr&quot; option instructs the Open Watcom Disassembler to display register names in their non-pseudonym form.
<H2 ID="The_Uppercase_InstructionsDRegisters_Option_M__fu_"> The Uppercase Instructions/Registers Option - &quot;fu&quot; </H2>
<BR>The &quot;fu&quot; option instructs the Open Watcom Disassembler to display instruction and register names in uppercase
characters.&nbsp; The default is to display them in lowercase characters.
<H2 ID="The_Listing_Option_M__lUEXlist_fileYV_"> The Listing Option - &quot;l[=&lt;list_file&gt;]&quot; </H2>
<BR>By default, the Open Watcom Disassembler produces its output to the terminal.&nbsp; The &quot;l&quot; (lowercase L) option
instructs the Open Watcom Disassembler to produce the output to a listing file.&nbsp; The default file name of the listing
file is the same as the file name of the object file.&nbsp; The default file extension of the listing file is<TT> .lst.</TT>
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wdis calendar -l</TT>
<BR><BR>In the above example, the Open Watcom Disassembler is instructed to disassemble the contents of the file<TT> calendar.obj</TT>
and produce the output to a listing file called<TT> calendar.lst.</TT>
<BR><BR>An alternate form of this option is &quot;l=&lt;list_file&gt;&quot;.&nbsp; With this form, you can specify the name
of the listing file.&nbsp; When specifying a listing file, a file extension of<TT> .lst</TT> is assumed if none is specified.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wdis calendar -l=calendar.lis</TT>
<BR><BR>In the above example, the Open Watcom Disassembler is instructed to disassemble the contents of the file<TT> calendar.obj</TT>
and produce the output to a listing file called<TT> calendar.lis.</TT>
<H2 ID="The_Public_Symbols_Option_M__p_"> The Public Symbols Option - &quot;p&quot; </H2>
<BR>The &quot;p&quot; option controls the amount of information produced in the listing file.&nbsp; When specified, a list
of all public symbols is produced in the listing file.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wdis calendar -p</TT>
<BR><BR>In the above example, the Open Watcom Disassembler is instructed to disassemble the contents of the file<TT> calendar.obj</TT>
and produce the output, with a list of all exported symbols, to the screen.&nbsp; A sample list of public symbols is shown
below.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; List of public symbols</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SYMBOL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GROUP&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEGMENT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADDRESS</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ---------------------------------------------------------</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; BOX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BOX_TEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;00000000</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CALENDAR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CALENDAR_TEXT&nbsp;&nbsp;&nbsp; 00000000</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CLEARSCREEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLEARSCREEN_TEXT 00000000</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FMAIN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FMAIN_TEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00000000</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; LINE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LINE_TEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
00000000</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; POSCURSOR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; POSCURSOR_TEXT&nbsp;&nbsp; 00000000</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ------------------------------------------------------------</TT>
<BR><BR>The &quot;p&quot; option is ignored when the &quot;a&quot; option is specified.
<H2 ID="Retain_CPP_Mangled_Names__M__m_"> Retain C++ Mangled Names - &quot;m&quot; </H2>
<BR>The &quot;m&quot; option instructs the Open Watcom Disassembler to retain C++ mangled names rather than displaying their
demangled form.&nbsp; The default is to interpret mangled C++ names and display them in a somewhat more intelligible form.
<H2 ID="The_Source_Option_M__sUEXsource_fileYV_"> The Source Option - &quot;s[=&lt;source_file&gt;]&quot; </H2>
<BR>The &quot;s&quot; option causes the source lines corresponding to the assembly language instructions to be produced in
the listing file.&nbsp; The object file must contain line numbering information.&nbsp; That is, the &quot;d1&quot; or &quot;d2&quot;
option must have been specified when the source file was compiled.&nbsp; If no line numbering information is present in the
object file, the &quot;s&quot; option is ignored.
<BR><BR>The following defines the order in which the source file name is determined when the &quot;s&quot; option is specified.
<OL>
<LI>If present, the source file name specified on the command line.
<LI>The name from the module header record.
<LI>The object file name.
</OL>
<BR>In the following example, we have compiled the source file<TT> mysrc.for</TT> with &quot;d1&quot; debugging information.
&nbsp;We then disassemble it as follows:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wdis mysrc -s -l</TT>
<BR><BR>In the above example, the Open Watcom Disassembler is instructed to disassemble the contents of the file<TT> mysrc.obj</TT>
and produce the output to the listing file<TT> mysrc.lst.</TT>&nbsp; The source lines are extracted from the file<TT> mysrc.for.</TT>
<BR><BR>An alternate form of this option is &quot;s=&lt;source_file&gt;&quot;.&nbsp; With this form, you can specify the name
of the source file.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wdis mysrc -s=myprog.for -l</TT>
<BR><BR>The above example produces the same result as in the previous example except the source lines are extracted from the
file<TT> myprog.for.</TT>
<H2 ID="An_Example"> An Example </H2>
<BR>Consider the following program contained in the file<TT> hello.for.</TT>
<HR>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; program main</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print *, 'Hello world'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end</TT>
<HR>
<BR>Compile it with the &quot;d1&quot; option.&nbsp; An object file called<TT> hello.obj</TT> will be produced.&nbsp; The
&quot;d1&quot; option causes line numbering information to be generated in the object file.&nbsp; We can use the Open Watcom
Disassembler to disassemble the contents of the object file by issuing the following command.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wdis hello -l -e -p -s -fu</TT>
<BR><BR>The output will be written to a listing file called<TT> hello.lst</TT> (the &quot;l&quot; option was specified&quot;).
&nbsp;It will contain a list of external symbols (the &quot;e&quot; option was specified), a list of public symbols (the &quot;p&quot;
option was specified) and the source lines corresponding to the assembly language instructions (the &quot;s&quot; option was
specified).&nbsp; The source input file is called<TT> hello.for.</TT>&nbsp; The register names will be displayed in upper
case (the &quot;fu&quot; option was specified).&nbsp; The output, shown below, is the result of using the Open Watcom F77
compiler.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Module: hello.for</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Group: 'DGROUP' CONST,_DATA,_BSS</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Group: 'FLAT'</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Segment: 'FMAIN_TEXT' BYTE USE32&nbsp; 00000014 bytes</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; program main</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print *, 'Hello world'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0000&nbsp; e8 00 00 00 00&nbsp;&nbsp;&nbsp; FMAIN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; call&nbsp;&nbsp;&nbsp; RT@IOWrite</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0005&nbsp; b8 00 00 00 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp; EAX,offset L2</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 000a&nbsp; e8 00 00 00 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call&nbsp;&nbsp;&nbsp; RT@OutCHAR</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 000f&nbsp; e9 00 00 00 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jmp&nbsp;&nbsp;&nbsp;&nbsp; RT@EndIO</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; No disassembly errors</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; List of external symbols</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Symbol</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ----------------</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; RT@EndIO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00000010</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; RT@IOWrite&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00000001</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; RT@OutCHAR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0000000b</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ------------------------------------------------------------</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Segment: 'CONST' WORD USE32&nbsp; 0000000b bytes</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0000&nbsp; 48 65 6c 6c 6f 20 77 6f L1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; - Hello wo</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0008&nbsp; 72 6c 64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - rld</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; No disassembly errors</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ------------------------------------------------------------</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Segment: '_DATA' WORD USE32&nbsp; 00000008 bytes</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0000&nbsp; 00 00 00 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; L2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DGROUP:L1</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0004&nbsp; 0b 00 00 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - ....</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; No disassembly errors</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ------------------------------------------------------------</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; List of public symbols</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SYMBOL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GROUP&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEGMENT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADDRESS</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ---------------------------------------------------------</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FMAIN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FMAIN_TEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00000000</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ------------------------------------------------------------</TT>
<BR><BR>Let us create a form of the listing file that can be used as input to an assembler.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wdis hello -l=hello.asm -r -a</TT>
<BR><BR>The output will be produced in the file<TT> hello.asm.</TT>&nbsp; The output, shown below, is the result of using
the Open Watcom F77 compiler.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .387</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .386p</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;PUBLIC&nbsp; FMAIN</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;EXTRN&nbsp;&nbsp; `RT@IOWrite`:BYTE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;EXTRN&nbsp;&nbsp; `RT@OutCHAR`:BYTE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;EXTRN&nbsp;&nbsp; `RT@EndIO`:BYTE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;EXTRN&nbsp;&nbsp; __init_error:BYTE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;EXTRN&nbsp;&nbsp; __init_english:BYTE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;EXTRN&nbsp;&nbsp; __init_387_emulator:BYTE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;EXTRN&nbsp;&nbsp; _cstart_:BYTE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; DGROUP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GROUP&nbsp;&nbsp; CONST,_DATA,_BSS</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CONST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEGMENT PARA PUBLIC USE32
'DATA'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; L$1:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x72, 0x6c, 0x64</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CONST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ENDS</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _DATA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEGMENT PARA PUBLIC
USE32 'DATA'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; L$2:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;DD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L$1</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x0b, 0x00, 0x00, 0x00</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _DATA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ENDS</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _BSS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEGMENT PARA PUBLIC
USE32 'BSS'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _BSS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ENDS</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _TEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SEGMENT BYTE PUBLIC
USE32 'CODE'</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;ASSUME CS:_TEXT, DS:DGROUP, SS:DGROUP</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FMAIN:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CALL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; near ptr `RT@IOWrite`</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MOV&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EAX,offset L$2</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CALL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; near ptr `RT@OutCHAR`</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; JMP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; near ptr `RT@EndIO`</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _TEXT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ENDS</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;END</TT>
<H1 ID="Optimization_of_Far_Calls"> Optimization of Far Calls </H1>
<BR>Optimization of far calls can result in smaller executable files and improved performance.&nbsp; It is most useful when
the automatic grouping of logical segments into physical segments takes place.&nbsp; Note that, by default, automatic grouping
is performed by the Open Watcom Linker.
<BR><BR>The Open Watcom C, C++ and FORTRAN 77 compilers automatically enable the far call optimization.&nbsp; The Open Watcom
Linker will optimize far calls to procedures that reside in the same physical segment as the caller.&nbsp; For example, a
large code model program will probably contain many far calls to procedures in the same physical segment.&nbsp; Since the
segment address of the caller is the same as the segment address of the called procedure, only a near call is necessary.&nbsp;
A near call does not require a relocation entry in the relocation table of the executable file whereas a far call does.&nbsp;
Thus, the far call optimization will result in smaller executable files that will load faster.&nbsp; Furthermore, a near call
will generally execute faster than a far call, particularly on 286 and 386-based machines where, for applications running
in protected mode, segment switching is fairly expensive.
<BR><BR>The following describes the far call optimization.&nbsp; The<B> call far label</B> instruction is converted to one
of the following sequences of code.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp; cs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; seg&nbsp;&nbsp;&nbsp; ss</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; call&nbsp;&nbsp; near label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp; cs</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; nop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call&nbsp;&nbsp; near label</TT>
<BR><BR><B>Notes:</B>
<OL>
<LI>The<B> nop</B> or<B> seg ss</B> instruction is present since a<B> call far label</B> instruction is five bytes.&nbsp;
The<B> push cs</B> instruction is one byte and the<B> call near label</B> instruction is three bytes.&nbsp; The<B> seg ss</B>
instruction is used because it is faster than the<B> nop</B> instruction.
<LI>The called procedure will still use a<B> retf</B> instruction but since the code segment and the near address are pushed
on the stack, the far return will execute correctly.
<LI>The position of the padding instruction is chosen so that the return address is word aligned.&nbsp; A word aligned return
address improves performance.
<LI>When two consecutive<B> call far label</B> instructions are optimized and the first<B> call far label</B> instruction
is word aligned, the following sequence replaces both<B> call far label</B> instructions.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp;&nbsp; cs</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; call&nbsp;&nbsp;&nbsp; near label1</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; seg&nbsp;&nbsp;&nbsp;&nbsp; ss</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp;&nbsp; cs</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; seg&nbsp;&nbsp;&nbsp;&nbsp; cs</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; call&nbsp;&nbsp;&nbsp; near label2</TT>
<LI>If your program contains only near calls, this optimization will have no effect.
</OL>
<BR>A far jump optimization is also performed by the Open Watcom Linker.&nbsp; This has the same benefits as the far call
optimization.&nbsp; A<B> jmp far label</B> instruction to a location in the same segment will be replaced by the following
sequence of code.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; jmp&nbsp;&nbsp;&nbsp; near label</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp; ax,ax</TT>
<BR><BR>Note that for 32-bit segments, this instruction becomes<TT> mov eax,eax.</TT>
<H2 ID="Far_Call_Optimizations_for_NonMOpen_Watcom_Object_Modules"> Far Call Optimizations for Non-Open Watcom Object Modules </H2>
<BR>The far call optimization is automatically enabled when object modules created by the Open Watcom C, C++, or FORTRAN 77
compilers are linked.&nbsp; These compilers mark those segments in which this optimization can be performed.&nbsp; The following
utility can be used to enable this optimization for object modules that have been created by other compilers or assemblers.
<H3 ID="The_Open_Watcom_Far_Call_Optimization_Enabling_Utility"> The Open Watcom Far Call Optimization Enabling Utility </H3>
<BR>Only DOS, OS/2 and Windows-hosted versions of the Open Watcom Far Call Optimization Enabling Utility are available.&nbsp;
A QNX-hosted version is not necessary since QNX-hosted development tools that generate object files, generate the necessary
information that enables the far call optimization.
<BR><BR>The format of the Open Watcom Far Call Optimization Enabling Utility is as follows.&nbsp; Items enclosed in square
brackets are optional; items enclosed in braces may be repeated zero or more times.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FCENABLE { [option] [file] }</TT>
<DL>
<DT>where
<DD><B>description</B>
<DT>option
<DD>is an option and must be preceded by a dash ('-') or slash ('/').
<DT>file
<DD>is a file specification for an object file or library file.&nbsp; If no file extension is specified, a file extension of &quot;obj&quot;
is assumed.&nbsp; Wild card specifiers may be used.
</DL>
<BR>The following describes the command line options.&nbsp; 
<DL>
<DT>b
<DD>Do not create a backup file.&nbsp; By default, a backup file will be created.&nbsp; The backup file name will have the same
file name as the input file and a file extension of &quot;bob&quot; for object files and &quot;bak&quot; for library files.
&nbsp;
<DT>c
<DD>Specify a list of class names, each separated by a comma.&nbsp; This enables the far call optimization for all segments belonging
to the specified classes.&nbsp; 
<DT>s
<DD>Specify a list of segment names, each separated by a comma.&nbsp; This enables the far call optimization for all specified
segments.&nbsp; 
<DT>x
<DD>Specify a list of ranges, each separated by a comma, for which no far call optimizations are to be made.&nbsp; A range has
the following format.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; seg_name start-end</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; seg_name start:length</TT>
<BR><BR><B>seg_name</B> is the name of a segment.<B>&nbsp; start</B> is an offset into the specified segment defining the
start of the range.<B>&nbsp; end</B> is an offset into the specified segment defining the end of the range.<B>&nbsp; length</B>
is the number of bytes from<B> start</B> to be included in the range.&nbsp; All values are assumed to be hexadecimal.
</DL>
<BR><B>Notes:</B>
<OL>
<LI>If more than one class list or segment list is specified, only the last one is used.&nbsp; A class or segment list applies
to all object and library files regardless of their position relative to the class or segment list.
<LI>A range list applies only to the first object file following the range specification.&nbsp; If the object file contains
more than one module, the range list will only apply to the first module in the object file.
</OL>
<BR>The following examples illustrate the use of the Open Watcom Far Call Optimization Enabling Utility.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; fcenable -c code *.obj</TT>
<BR><BR>In the above example, the far call optimization will be enabled for all segments belonging to the &quot;code&quot;
class.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; fcenable -s _text *.obj</TT>
<BR><BR>In the above example, the far call optimization will be enabled for all segments with name &quot;_text&quot;.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; fcenable -x special 0:400 asmfile.obj</TT>
<BR><BR>In the above example, the far call optimization will be disabled for the first 1k bytes of the segment named &quot;special&quot;
in the object file &quot;asmfile&quot;.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; fcenable -x special 0-ffffffff asmfile.obj</TT>
<BR><BR>In the above example, the far call optimization will be disabled for the entire segment named &quot;special&quot;
in the object file &quot;asmfile&quot;.
<H1 ID="The_Open_Watcom_Exe2bin_Utility"> The Open Watcom Exe2bin Utility </H1>
<BR>The exe2bin utility strips off the header of a DOS executable file and applies any necessary fixups.&nbsp; In addition,
it is able to display the header and relocations of an executable file in human readable format.
<BR><BR>When DOS executes a program (supplied as an &quot;.exe&quot; file) it first reads the header of the executable file
and ensures there is enough memory to load the program.&nbsp; If there is, DOS loads the file - excluding the header - to
memory.&nbsp; Before jumping to the entry point, DOS has to adjust a number of certain locations that depend on the load address
of the program.&nbsp; These adjustments consist of the addition of the load address to each entry in the above mentioned list
of relocations.&nbsp; These relocations are part of the header of an executable file.&nbsp; The load address may vary from
invocation to invocation, this creates the need for the existence of relocations.
<BR><BR>As exe2bin strips the executable header, the relocations are lost (among other things).&nbsp; This would render the
resulting output useless, if exe2bin were not to apply the relocations as part of the conversion process.&nbsp; Just like
DOS, exe2bin therefore needs to know the load address.&nbsp; This is supplied via an argument to exe2bin.
<BR><BR>Some programs do not rely on the address they are being loaded at, and consequently do not contain any relocations.
&nbsp;In this case exe2bin merely copies the contents of the input file (apart from the header) to the output file.
<BR><BR>The phrase &quot;binary part&quot; (also &quot;binary data&quot;) is used as a technical term in the documentation
of exe2bin.&nbsp; It denotes the data following the header.&nbsp; The length of the binary data is determined by the header
entries &quot;Size mod 512&quot;, &quot;Number of pages&quot; and &quot;Size of header&quot;.&nbsp; It is not directly related
to the actual size of the input file.
<HR>
<BR><B><I>&nbsp; Note:</I></B>&nbsp; Although Open Watcom Exe2bin is capable of producing DOS &quot;.COM&quot; executables,
this functionality is only provided for compatibility with other tools.&nbsp; The preferred way of generating &quot;.COM&quot;
executables is to use the Open Watcom Linker with directive<TT> &quot;format dos com&quot;.</TT>&nbsp; Refer to the Open Watcom
Linker Guide for details.
<HR>
<H2 ID="The_Open_Watcom_Exe2bin_Utility_Command_Line"> The Open Watcom Exe2bin Utility Command Line </H2>
<BR>The format of the Open Watcom Exe2bin command line is as follows.&nbsp; Items enclosed in square brackets (&quot;[ ]&quot;)
are optional.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; EXE2BIN [options] exe_file [bin_file]</TT>
<DL>
<DT>where
<DD><B>description</B>
<DT>options
<DD>is a list of options, each preceded by a dash (&quot;-&quot;).&nbsp; On non-UNIX platforms, a slash (&quot;/&quot;) may be
also used instead of a dash.&nbsp; Options may be specified in any order.&nbsp; Supported options are:
<DL>
<DT>h
<DD>display the executable file header
<DT>r
<DD>display the relocations of the executable file
<DT>l=&lt;seg&gt;
<DD>specify the load address of the binary file
<DT>x
<DD>enable extended capabilities of Open Watcom Exe2bin
</DL>
<DT>exe_file
<DD>is a file specification for a 16-bit DOS executable file used as input.&nbsp; If no file extension is specified, a file extension
of &quot;.exe&quot; is assumed.&nbsp; Wild card specifiers may not be used.
<DT>bin_file
<DD>is an optional file specification for a binary output file.&nbsp; If no file name is given, the extension of the input file
is replaced by &quot;bin&quot; and taken as the name for the binary output file.
</DL>
<BR><B>Description:</B>
<OL>
<LI>If are any relocations in the input file, the -l option becomes mandatory (and is useless otherwise).
<LI>If exe2bin is called without the -x option, certain restrictions to the input file apply (apart from being a valid DOS
executable file):
<UL>
<LI>the size of the binary data must be &lt;= 64 KByte
<LI>no stack must be defined, i.e.&nbsp; ss:sp = 0x0000:0x0000
<LI>the code segment must be always zero, i.e.&nbsp; cs = 0x0000
<LI>the initial instruction pointer must be either ip = 0x0000 or ip = 0x0100
</UL>
<BR>None of the above restrictions apply if the -x option is supplied.
<LI>If cs:ip = 0x0000:0x0100 and the -x option is not specified, no relocations are allowed in the input file.&nbsp; Furthermore,
exe2bin skips another 0x100 bytes following the header (in addition to the latter).
<BR><BR>This behaviour allows the creation of DOS &quot;.COM&quot; executables and is implemented for backward compatibility.
&nbsp;It is however strongly suggested to use the Open Watcom Linker instead (together with directive<TT> &quot;format dos
com&quot;</TT> ).
</OL>
<BR>The examples below illustrate the use of Open Watcom Exe2bin.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; exe2bin prog.exe</TT>
<BR><BR>Strips off the executable header from<TT> prog.exe</TT> and writes the binary part to<TT> prog.bin.</TT>&nbsp; If
there are any relocations in<TT> prog.exe</TT> or if the input file violates any of the restrictions listed above, the execution
of exe2bin fails.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; exe2bin -x prog.exe</TT>
<BR><BR>Same as above but the<TT> &quot;-x&quot;</TT> option relaxes certain restrictions.
<HR>
<BR><B><I>&nbsp; Note:</I></B>&nbsp; Even if exe2bin is sucessfully invoked with identical input files as in the preceding
examples (i.e.&nbsp; with vs.&nbsp; without -x) the output files may differ.&nbsp; This happens when cs:ip = 0x0000:0x0100
causes exe2bin to skip additional 0x100 bytes from the input file, if the user did not specify -x.
<HR>
<BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; exe2bin -h prog.exe test.bin</TT>
<BR><BR>Displays the header of<TT> prog.exe</TT> , strips it off and copies the binary part to<TT> test.bin.</TT>
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; exe2bin -h -r -x -l=0xE000 bios.exe bios.rom</TT>
<BR><BR>Displays the header and the relocations (if any) of<TT> bios.exe</TT> strips the header and applies any fixups to
(i.e.&nbsp; relocates)<TT> bios.exe</TT> as if it were to be loaded at 0xE000:0x0000.&nbsp; The result will be written to<TT>
bios.rom</TT>
<BR><BR>The above command line may serve as an example of creating a 128 KByte BIOS image for the PC-AT architecture.
<H2 ID="Exe2bin_Messages"> Exe2bin Messages </H2>
<BR>This is a list of the diagnostic messages exe2bin may display, accompanied by more verbose descriptions and some possible
causes.
<DL>
<DT>Error opening %s for reading.
<DD>The input executable file could not be opened for reading.
<BR><BR>Check that the input file exists and exe2bin has read permissions.
<DT>Error opening %s for writing.
<DD>The output binary file could not be opened for writing.
<BR><BR>Make sure the media is not write protected, has enough free space to hold the output file, and exe2bin has write permissions.
<DT>Error allocating file I/O buffer.
<DD>There is not enough free memory to allocate a file buffer.
<DT>Error reading while copying data.
<DD>An error occured while reading the binary part of the input file.
<BR><BR>This is most likely due to a corrupted executable header.&nbsp; Run exe2bin with the -h option and check the size
reported.&nbsp; The size of the input file must be at least (&quot;Number of pages&quot; - 1) * 512 + &quot;Size mod 512&quot;.
&nbsp;Omit decrementing the number of pages if &quot;Size mod 512&quot; happens to equal zero.
<DT>Error writing while copying data.
<DD>The output binary file can not be written to.
<BR><BR>Make sure the media has enough free space to hold the output file and is not removed while writing to it.
<DT>Error.&nbsp; %s has no valid executable header.
<DD>The signature (the first two bytes of the input file) does not match &quot;MZ&quot;.
<BR><BR>exe2bin can only use valid DOS executable files as input.
<DT>Error allocating/reading reloc-table.
<DD>There is either not enough free memory to allocate a buffer for the relocations (each relocation takes about 4 bytes) or there
was an error while reading from the input file.
<DT>Error.&nbsp; Option &quot;-l=&lt;seg&gt;&quot; mandatory (there are relocations).
<DD>The executable file contains relocations.&nbsp; Therefore, exe2bin needs to know the segment the binary output file is supposed
to reside at.
<BR><BR>Either provide a segment as an argument to the -l option or rewrite your executable file to not contain any relocations.
<DT>Error:&nbsp; Binary part exceeds 64 KBytes.
<DD>The binary part of the input file is larger than 64 KBytes.
<BR><BR>The restriction applies because the -x option was not specified.&nbsp; Check if the extended behaviour is suitable
or rewrite the program to shorten the binary part.
<DT>Error:&nbsp; Stack segment defined.
<DD>The header defines an initial stack, i.e.&nbsp; ss:sp != 0x0000:0x0000.
<BR><BR>The restriction applies because the -x option was not specified.&nbsp; Check if the extended behaviour is suitable
or rewrite the program to not have a segment of class &quot;stack&quot;.
<DT>Error:&nbsp; CS:IP neither 0x0000:0x0000 nor 0x0000:0x0100.
<DD>The header defines an initial cs:ip not matching any of the two values.
<BR><BR>The restriction applies because the -x option was not specified.&nbsp; Check if the extended behaviour is suitable
or rewrite the program to have a different entry point (cf.&nbsp; Open Watcom Linker<TT> &quot;option start&quot;</TT> ).
<DT>Error:&nbsp; com-file must not have relocations.
<DD>Although the binary part is &lt;= 64 KByte in length, there is no stack defined and the cs:ip is 0x0000:0x0100, i.e.&nbsp;
exe2bin assumes you try to generate a &quot;.COM&quot; executable, there are relocations in the input file.
<BR><BR>&quot;.COM&quot; files are not allowed to contain relocations.&nbsp; Either produce an &quot;.EXE&quot; file instead
or rewrite the program to avoid the need for relocations.&nbsp; In order to do the latter, look for statements that refer
to segments or groups such as<TT> mov ax, _TEXT</TT> or<TT> mov ax, DGROUP.</TT>
</DL>
<H1 ID="The_Open_Watcom_Patch_Utility"> The Open Watcom Patch Utility </H1>
<BR>The Open Watcom Patch Utility is a utility program which may be used to apply patches or bug fixes to Open Watcom's compilers
and its associated tools.&nbsp; As problems are reported and fixed, patches are created and made available on Open Watcom's
BBS, Open Watcom's FTP site, or CompuServe for users to download and apply to their copy of the tools.
<H2 ID="Applying_a_Patch"> Applying a Patch </H2>
<BR>The format of the BPATCH command line is:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; BPATCH [options] patch_file</TT>
<BR><BR>The square brackets [ ] denote items which are optional.
<DL>
<DT>where
<DD><B>description</B>
<DT>options
<DD>is a list of valid Open Watcom Patch Utility options, each preceded by a dash (&quot;-&quot;).&nbsp; Options may be specified
in any order.&nbsp; The possible options are:
<DL>
<DT>-p
<DD>Do not prompt for confirmation
<DT>-b
<DD>Do not create a .BAK file
<DT>-q
<DD>Print current patch level of file
</DL>
<DT>patch_file
<DD>is the file specification for a patch file provided by Open Watcom.
</DL>
<BR>Suppose a patch file called &quot;wlink.a&quot; is supplied by Open Watcom to fix a bug in the file &quot;WLINK.EXE&quot;.
&nbsp;The patch may be applied by typing the command:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; bpatch wlink.a</TT>
<BR><BR>The Open Watcom Patch Utility locates the file<TT> C:\WATCOM\BINW\WLINK.EXE</TT> using the<B> PATH</B> environment
variable.&nbsp; The actual name of the executable file is extracted from the file<TT> wlink.a.</TT>&nbsp; It then verifies
that the file to be patched is the correct one by comparing the size of the file to be patched to the expected size.&nbsp;
If the file sizes match, the program responds with:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Ok to modify 'C:\WATCOM\BINW\WLINK.EXE'? [y|n]</TT>
<BR><BR>If you respond with &quot;yes&quot;, BPATCH will modify the indicated file.&nbsp; If you respond with &quot;no&quot;,
BPATCH aborts.&nbsp; Once the patch has been applied the resulting file is verified.&nbsp; First the file size is checked
to make sure it matches the expected file size.&nbsp; If the file size matches, a check-sum is computed and compared to the
expected check-sum.
<BR><BR><B>Notes:</B>
<OL>
<LI>If an error message is issued during the patch process, the file that you specified to be patched will remain unchanged.
<LI>If a sequence of patch files exist, such as &quot;wlink.a&quot;, &quot;wlink.b&quot; and &quot;wlink.c&quot;, the patches
must be applied in order.&nbsp; That is, &quot;wlink.a&quot; must be applied first followed by &quot;wlink.b&quot; and finally
&quot;wlink.c&quot;.
</OL>
<H2 ID="Diagnostic_Messages"> Diagnostic Messages </H2>
<BR>If the patch cannot be successfully applied, one of the following error messages will be displayed.
<DL>
<DT>Usage:&nbsp; BPATCH {-p} {-q} {-b} &lt;file&gt;
<DD><B><I> -p = Do not prompt for confirmation</I></B>
<BR><BR><B><I>-b = Do not create a .BAK file</I></B>
<BR><B><I>-q = Print current patch level of file</I></B>
<BR>The command line was entered with no arguments.
<DT>File '%s' has not been patched
<DD>This message is issued when the &quot;-q&quot; option is used and the file has not been patched.
<DT>File '%s' has been patched to level '%s'
<DD>This message is issued when the &quot;-q&quot; option is used and the file has been patched to the indicated level.
<DT>File '%s' has already been patched to level '%s' - skipping
<DD>This message is issued when the file has already been patched to the same level or higher.
<DT>Command line may only contain one file name
<DD>More than one file name is specified on the command line.&nbsp; Make sure that &quot;/&quot; is not used as an option delimiter.
<DT>Command line must specify a file name
<DD>No file name has been specified on the command line.
<DT>'%s' is not a Open Watcom patch file
<DD>The patch file is not of the required format.&nbsp; The required header information is not present.
<DT>'%s' is not a valid Open Watcom patch file
<DD>The patch file is not of the required format.&nbsp; The required header information is present but the remaining contents
of the file have been corrupted.
<DT>'%s' is the wrong size (%lu1).&nbsp; Should be (%lu2)
<DD>The size of the file to be patched (%lu1) is not the same as the expected size (%lu2).
<DT>Cannot find '%s'
<DD>Cannot find the executable to be patched.
<DT>Cannot open '%s'
<DD>An error occurred while trying to open the patch file, the file to be patched or the resulting file.
<DT>Cannot read '%s'
<DD>An input error occurred while reading the old version of the file being patched.
<DT>Cannot rename '%s' to '%s'
<DD>The file to be patched could not be renamed to the backup file name or the resulting file could not be renamed to the name
of the file that was patched.
<DT>Cannot write to '%s'
<DD>An output error occurred while writing to the new version of the file to be patched.
<DT>I/O error processing file '%s'
<DD>An error occurred while seeking in the specified file.
<DT>No memory for %s
<DD>An attempt to allocate memory dynamically failed.
<DT>Patch program aborted!
<DD>This message is issued if you answered no to the &quot;OK to modify&quot; prompt.
<DT>Resulting file has wrong checksum (%lu) - Should be (%lu2)
<DD>The check-sum of the resulting file (%lu) does not match the expected check-sum (%lu2).&nbsp; This message is issued if you
have patched the wrong version.
<DT>Resulting file has wrong size (%lu1) - Should be (%lu2)
<DD>The size of the resulting file (%lu1) does not match the expected size (%lu2).&nbsp; This message is issued if you have patched
the wrong version.
</DL>
<H1 ID="The_Open_Watcom_Strip_Utility"> The Open Watcom Strip Utility </H1>
<BR>The Open Watcom Strip Utility may be used to manipulate information that is appended to the end of an executable file.
&nbsp;The information can be either one of two things:
<OL>
<LI>Symbolic debugging information
<LI>Resource information
</OL>
<BR>This information can be added or removed from the executable file.&nbsp; Symbolic debugging information is placed at the
end of an executable file by the Open Watcom Linker or the Open Watcom Strip Utility.&nbsp; Resource information is placed
at the end of an executable by a resource compiler or the Open Watcom Strip Utility.
<BR><BR>Once a program has been debugged, the Open Watcom Strip Utility allows you to remove the debugging information from
the executable file so that you do not have to remove the debugging directives from the linker directive file and link your
program again.&nbsp; Removal of the debugging information reduces the size of the executable image.
<BR><BR>All executable files generated by the Open Watcom Linker can be specified as input to the Open Watcom Strip Utility.
&nbsp;Note that for executable files created for Novell's NetWare operating system, debugging information created using the
&quot;NOVELL&quot; option in the &quot;DEBUG&quot; directive cannot be removed from the executable file.&nbsp; You must remove
the &quot;DEBUG&quot; directive from the directive file and re-link your application.
<BR><BR>The Open Watcom Strip Utility currently runs under the following operating systems.
<UL>
<LI>DOS
<LI>OS/2
<LI>QNX
<LI>Windows NT/2000/XP
<LI>Windows 95/98/Me
</UL>
<H2 ID="The_Open_Watcom_Strip_Utility_Command_Line"> The Open Watcom Strip Utility Command Line </H2>
<BR>The Open Watcom Strip Utility command line syntax is:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WSTRIP [options] input_file [output_file] [info_file]</TT>
<DL>
<DT>where:
<DD>
<DT>[]
<DD>The square brackets denote items which are optional.
<DT>options
<DD>
<DL>
<DT>-n
<DD>(noerrors) Do not issue any diagnostic message.
<DT>-q
<DD>(quiet) Do not print any informational messages.
<DT>-r
<DD>(resources) Process resource information rather than debugging information.
<DT>-a
<DD>(add) Add information rather than remove information.
</DL>
<DT>input_file
<DD>is a file specification for the name of an executable file.&nbsp; If no file extension is specified, the Open Watcom Strip
Utility will assume one of the following extensions:&nbsp; &quot;exe&quot;, &quot;dll&quot;, &quot;exp&quot;, &quot;rex&quot;,
&quot;nlm&quot;, &quot;dsk&quot;, &quot;lan&quot;, &quot;nam&quot;, &quot;msl&quot;, &quot;cdm&quot;, &quot;ham&quot;, &quot;qnx&quot;
or no file extension.&nbsp; Note that the order specified in the list of file extensions is the order in which the Open Watcom
Strip Utility will select file extensions.
<DT>output_file
<DD>is an optional file specification for the output file.&nbsp; If no file extension is specified, the file extension specified
in the input file name will be used for the output file name.&nbsp; If &quot;.&quot; is specified, the input file name will
be used.
<DT>info_file
<DD>is an optional file specification for the file in which the debugging or resource information is to be stored (when removing
information) or read (when adding information).&nbsp; If no file extension is specified, a file extension of &quot;sym&quot;
is assumed for debugging information and &quot;res&quot; for resource information.&nbsp; To specify the name of the information
file but not the name of an output file, a &quot;.&quot; may be specified in place of<B> output_file.</B>
</DL>
<BR><B>Description:</B>
<OL>
<LI>If the &quot;r&quot; (resource) option is not specified then the default action is to add/remove symbolic debugging information.
<LI>If the &quot;a&quot; (add) option is not specified then the default action is to remove information.
<LI>If<B> output_file</B> is not specified, the debugging or resource information is added to or removed from<B> input_file.</B>
<LI>If<B> output_file</B> is specified,<B> input_file</B> is copied to<B> output_file</B> and the debugging or resource information
is added to or removed from<B> output_file.&nbsp; input_file</B> remains unchanged.
<LI>If<B> info_file</B> is specified then the debugging or resource information that is added to or removed from the executable
file is read from or written to this file.&nbsp; The debugging or resource information may be appended to the executable by
specifying the &quot;a&quot; (add) option.&nbsp; Also, the debugging information may be appended to the executable by concatenating
the debugging information file to the end of the executable file (the files must be treated as binary files).
<LI>During processing, the Open Watcom Strip Utility will create a temporary file, ensuring that a file by the chosen name
does not already exist.
</OL>
<H2 ID="Strip_Utility_Messages"> Strip Utility Messages </H2>
<BR>The following messages may be issued by the Open Watcom Strip Utility.
<DL>
<DT>Usage:&nbsp; WSTRIP [options] input_file [output_file] [info_file]
<DD><B><I> options:&nbsp; (-option is also accepted)</I></B>
<BR><BR><B><I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /n&nbsp;&nbsp;&nbsp;&nbsp; don't print warning messages</I></B>
<BR><B><I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /q&nbsp;&nbsp;&nbsp;&nbsp; don't print informational messages</I></B>
<BR><B><I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /r&nbsp;&nbsp;&nbsp;&nbsp; process resource information rather than debugging information</I></B>
<BR><B><I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /a&nbsp;&nbsp;&nbsp;&nbsp; add information rather than delete information</I></B>
<BR><B><I>input_file:&nbsp; executable file</I></B>
<BR><B><I>output_file:&nbsp; optional output executable or '.'</I></B>
<BR><B><I>info_file:&nbsp; optional output debugging or resource information file</I></B>
<BR><B><I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or input debugging or resource informational
file</I></B>
<BR>The command line was entered with no arguments.
<DT>Too low on memory
<DD>There is not enough free memory to allocate file buffers.
<DT>Unable to find '%s'
<DD>The specified file could not be located.
<DT>Cannot create temporary file
<DD>All the temporary file names are in use.
<DT>Unable to open '%s' to read
<DD>The input executable file cannot be opened for reading.
<DT>'%s' is not a valid executable file
<DD>The input file has invalid executable file header information.
<DT>'%s' does not contain debugging information
<DD>There is nothing to strip from the specified executable file.
<DT>Seek error on '%s'
<DD>An error occurred during a seek operation on the specified file.
<DT>Unable to create output file '%s'
<DD>The output file could not be created.&nbsp; Check that the output disk is not write-protected or that the specified output
file is not marked &quot;read-only&quot;.
<DT>Unable to create symbol file '%s'
<DD>The symbol file could not be created.
<DT>Error reading '%s'
<DD>An error occurred while reading the input executable file.
<DT>Error writing to '%s'
<DD>An error occurred while writing the output executable file or the symbol file.&nbsp; Check the amount of free space on the
output disk.&nbsp; If the input and output files reside on the same disk, there might not be enough room for a second copy
of the executable file during processing.
<DT>Cannot erase file '%s'
<DD>The input executable file is probably marked &quot;read-only&quot; and therefore could not be erased (the input file is erased
whenever the output file has the same name).
<DT>Cannot rename file '%s'
<DD>The output executable file could not be renamed.&nbsp; Ordinarily, this should never occur.
</DL>
<H1 ID="The_Open_Watcom_Make_Utility"> The Open Watcom Make Utility </H1>
<BR>The Open Watcom Make utility is useful in the development of programs and text processing but is general enough to be
used in many different applications.&nbsp; Make uses the fact that each file has a time-stamp associated with it that indicates
the last time the file was updated.&nbsp; Make uses this time-stamp to decide which files are out of date with respect to
each other.&nbsp; For instance, if we have an input data file and an output report file we would like the output report file
to accurately reflect the contents of the input data file.&nbsp; In terms of time-stamps, we would like the output report
to have a more recent time-stamp than the input data file (we will say that the output report file should be &quot;younger&quot;
than the input data file).&nbsp; If the input file had been modified then we would know from the younger time-stamp (in comparison
to the report file) that the report file was out of date and should be updated.&nbsp; Make may be used in this and many other
situations to ensure that files are kept up to date.
<BR><BR>Some readers will be quite familiar with the concepts of the Make file maintenance tool.&nbsp; Open Watcom Make is
patterned after the Make utility found on UNIX systems.&nbsp; The next major section is simply intended to summarize, for
reference purposes only, the syntax and options of Make's command line and special macros.&nbsp; Subsequent sections go into
the philosophy and capabilities of Open Watcom Make.&nbsp; If you are not familiar with the capabilities of the Make utility,
we recommend that you skip to the next major section entitled &quot;Dependency Declarations&quot; and read on.
<H2 ID="Open_Watcom_Make_Reference"> Open Watcom Make Reference </H2>
<BR>The following sub-sections serve as a reference guide to the Open Watcom Make utility.
<H3 ID="Open_Watcom_Make_Command_Line_Format"> Open Watcom Make Command Line Format </H3>
<BR>The formal Open Watcom Make command line syntax is shown below.&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WMAKE [options] [macro_defs] [targets]</TT>
<BR><BR>As indicated by the square brackets [ ], all items are optional.
<DL>
<DT>options
<DD>is a list of valid Open Watcom Make options, each preceded by a slash (&quot;/&quot;) or a dash (&quot;-&quot;).&nbsp; Options
may be specified in any order.
<DT>macro_defs
<DD>is a list of valid Open Watcom Make macro definitions.&nbsp; Macro definitions are of the form:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; A=B</TT>
<BR><BR>and are readily identified by the presence of the &quot;=&quot; (the &quot;#&quot; character may be used instead of
the &quot;=&quot; character if necessary).&nbsp; Surround the definition with quotes (&quot;) if it contains blanks (e.g.,
&quot;debug_opt=debug all&quot;).&nbsp; The macro definitions specified on the command line supersede any macro definitions
defined in makefiles.&nbsp; Macro names are case-insensitive unless the &quot;ms&quot; option is used to select Microsoft
NMAKE mode.&nbsp; 
<DT>targets
<DD>is one or more targets described in the makefile.
</DL>
<H3 ID="Open_Watcom_Make_Options_Summary"> Open Watcom Make Options Summary </H3>
<BR>In this section, we present a terse summary of the Open Watcom Make options.&nbsp; This summary is displayed on the screen
by simply entering &quot;WMAKE ?&quot; on the command line.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wmake ?</TT>
<DL>
<DT>-a
<DD>make all targets by ignoring time-stamps
<DT>-b
<DD>block/ignore all implicit rules
<DT>-c
<DD>do not verify the existence of files made
<DT>-d
<DD>debug mode - echo all work as it progresses
<DT>-e
<DD>always erase target after error/interrupt (disables prompting)
<DT>-f
<DD>the next parameter is a name of dependency description file
<DT>-h
<DD>do not print out Make identification lines (no header)
<DT>-i
<DD>ignore return status of all commands executed
<DT>-k
<DD>on error/interrupt:&nbsp; continue on next target
<DT>-l
<DD>the next parameter is the name of a output log file
<DT>-m
<DD>do not search for MAKEINIT file
<DT>-ms
<DD>Microsoft NMAKE mode
<DT>-n
<DD>no execute mode - print commands without executing
<DT>-o
<DD>use circular implicit rule path
<DT>-p
<DD>print the dependency tree as understood from the file
<DT>-q
<DD>query mode - check targets without updating them
<DT>-r
<DD>do not use default definitions
<DT>-s
<DD>silent mode - do not print commands before execution
<DT>-sn
<DD>noisy mode - always print commands before execution
<DT>-t
<DD>touch files instead of executing commands
<DT>-u
<DD>UNIX compatibility mode
<DT>-v
<DD>verbose listing of inline files
<DT>-y
<DD>show why a target will be updated
<DT>-z
<DD>do not erase target after error/interrupt (disables prompting)
</DL>
<H3 ID="Command_Line_Options"> Command Line Options </H3>
<BR>Command line options, available with Open Watcom Make, allow you to control the processing of the makefile.
<H4 ID="a"> a </H4>
<BR>make all targets by ignoring time-stamps
<BR>The &quot;a&quot; option is a safe way to update every target.&nbsp; For program maintenance, it is the preferred method
over deleting object files or touching source files.
<H4 ID="b"> b </H4>
<BR>block/ignore all implicit rules
<BR>The &quot;b&quot; option will indicate to Make that you do not want any implicit rule checking done.&nbsp; The &quot;b&quot;
option is useful in makefiles containing double colon &quot;::&quot; explicit rules because an implicit rule search is conducted
after a double colon &quot;::&quot; target is updated.&nbsp; Including the directive<TT> .BLOCK</TT> in a makefile also will
disable implicit rule checking.
<H4 ID="c"> c </H4>
<BR>do not verify the existence of files made
<BR>Make will check to ensure that a target exists after the associated command list is executed.&nbsp; The target existence
checking may be disabled with the &quot;c&quot; option.&nbsp; The &quot;c&quot; option is useful in processing makefiles that
were developed with other Make utilities.&nbsp; The<TT> .NOCHECK</TT> directive is used to disable target existence checks
in a makefile.
<H4 ID="d"> d </H4>
<BR>debug mode - echo all work as it progresses
<BR>The &quot;d&quot; option will print out information about the time-stamp of files and indicate how the makefile processing
is proceeding.
<H4 ID="e"> e </H4>
<BR>always erase target after error/interrupt (disables prompting)
<BR>The &quot;e&quot; option will indicate to Make that, if an error or interrupt occurs during makefile processing, the current
target being made may be deleted without prompting.&nbsp; The<TT> .ERASE</TT> directive may be used as an equivalent option
in a makefile.
<H4 ID="f"> f </H4>
<BR>the next parameter is a name of dependency description file
<BR>The &quot;f&quot; option specifies that the next parameter on the command line is the name of a makefile which must be
processed.&nbsp; If the &quot;f&quot; option is specified then the search for the default makefile named &quot;MAKEFILE&quot;
is not done.&nbsp; Any number of makefiles may be processed with the &quot;f&quot; option.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake /f myfile</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake /f myfile1 /f myfile2</TT>
<H4 ID="h"> h </H4>
<BR>do not print out Make identification lines (no header)
<BR>The &quot;h&quot; option is useful for less verbose output.&nbsp; Combined with the &quot;q&quot; option, this allows
a batch file to silently query if an application is up to date.&nbsp; Combined with the &quot;n&quot; option, a batch file
could be produced containing the commands necessary to update the application.
<H4 ID="i"> i </H4>
<BR>ignore return status of all commands executed
<BR>The &quot;i&quot; option is equivalent to the<TT> .IGNORE</TT> directive.
<H4 ID="k"> k </H4>
<BR>on error/interrupt:&nbsp; continue on next target
<BR>Make will stop updating targets when a non-zero status is returned by a command.&nbsp; The &quot;k&quot; option will continue
processing targets that do not depend on the target that caused the error.&nbsp; The<TT> .CONTINUE</TT> directive in a makefile
will enable this error handling capability.
<H4 ID="l"> l </H4>
<BR>the next parameter is the name of a output log file
<BR>Make will output an error message when a non-zero status is returned by a command.&nbsp; The &quot;l&quot; option specifies
a file that will record all error messages output by Make during the processing of the makefile.
<H4 ID="m"> m </H4>
<BR>do not search for the MAKEINIT file
<BR>The default action for Make is to search for an initialization file called &quot;MAKEINIT&quot; or &quot;TOOLS.INI&quot;
if the &quot;ms&quot; option is set.&nbsp; The &quot;m&quot; option will indicate to Make that processing of the MAKEINIT
file is not desired.
<H4 ID="ms"> ms </H4>
<BR>Microsoft NMAKE mode
<BR>The default action for Make is to process makefiles using Open Watcom syntax rules.&nbsp; The &quot;ms&quot; option will
indicate to Make that it should process makefiles using Microsoft syntax rules.&nbsp; For example, the line continuation in
NMAKE is a backslash (&quot;\&quot;) at the end of the line.
<H4 ID="n"> n </H4>
<BR>no execute mode - print commands without executing
<BR>The &quot;n&quot; option will print out what commands should be executed to update the application without actually executing
them.&nbsp; Combined with the &quot;h&quot; option, a batch file could be produced which would contain the commands necessary
to update the application.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake /h /n &gt;update.bat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; update</TT>
<BR><BR>This is useful for applications which require all available resources (memory and devices) for executing the updating
commands.
<H4 ID="o"> o </H4>
<BR>use circular implicit rule path
<BR>When this option is specified, Make will use a circular path specification search which may save on disk activity for
large makefiles.&nbsp; The &quot;o&quot; option is equivalent to the<TT> .OPTIMIZE</TT> directive.
<H4 ID="p"> p </H4>
<BR>print out makefile information
<BR>The &quot;p&quot; option will cause Make to print out information about all the explicit rules, implicit rules, and macro
definitions.
<H4 ID="q"> q </H4>
<BR>query mode - check targets without updating them
<BR>The &quot;q&quot; option will cause Make to return a status of 1 if the application requires updating; it will return
a status of 0 otherwise.&nbsp; Here is a example batch file using the &quot;q&quot; option:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake /q</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; if errorstatus 0 goto noupdate</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake /q /h /n &gt;\tmp\update.bat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; call \tmp\update.bat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; :noupdate</TT>
<H4 ID="r"> r </H4>
<BR>do not use default definitions
<BR>The default definitions are:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __MAKEOPTS__ = &lt;options passed to WMAKE&gt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __MAKEFILES__ = &lt;list of makefiles&gt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __VERSION__ = &lt;version number&gt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __LOADDLL__= defined if DLL loading supported</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __MSDOS__ =&nbsp; defined if MS/DOS version</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __NT__ = defined if Windows NT version</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __NT386__ = defined if x86 Windows NT version</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __OS2__ = defined if OS/2 version</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __QNX__ = defined if QNX version</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __LINUX__ = defined if Linux version</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __LINUX386__ = defined if x86 Linux version</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __UNIX__ = defined if QNX or Linux version</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; MAKE = &lt;name of file containing WMAKE&gt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #endif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # clear .EXTENSIONS list</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .EXTENSIONS:</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # In general,</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # set .EXTENSIONS list as follows</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .EXTENSIONS: .exe .nlm .dsk .lan .exp &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .lib .obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .i &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .asm .c .cpp .cxx
.cc .for .pas .cob &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .h .hpp .hxx .hh
.fi .mif .inc</TT>
<BR><BR>For Microsoft NMAKE compatibility (when you use the &quot;ms&quot; option), the following default definitions are
established.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # For Microsoft NMAKE compatibility switch,</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # set .EXTENSIONS list as follows</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .EXTENSIONS: .exe .obj .asm .c .cpp .cxx &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .bas .cbl .for .f
.f90 .pas .res .rc</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; %MAKEFLAGS=$(%MAKEFLAGS) $(__MAKEOPTS__)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; MAKE=&lt;name of file containing WMAKE&gt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; AS=ml</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; BC=bc</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CC=cl</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; COBOL=cobol</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CPP=cl</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CXX=cl</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FOR=fl</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; PASCAL=pl</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; RC=rc</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .asm.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(AS) $(AFLAGS) $*.asm</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .asm.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(AS) $(AFLAGS) /c $*.asm</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .c.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(CC) $(CFLAGS) $*.c</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .c.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(CC) $(CFLAGS) /c $*.c</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .cpp.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(CPP) $(CPPFLAGS) $*.cpp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .cpp.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(CPP) $(CPPFLAGS) /c $*.cpp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .cxx.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(CXX) $(CXXFLAGS) $*.cxx</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .cxx.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(CXX) $(CXXFLAGS) $*.cxx</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .bas.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(BC) $(BFLAGS) $*.bas</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .cbl.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(COBOL) $(COBFLAGS) $*.cbl, $*.exe;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .cbl.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(COBOL) $(COBFLAGS) $*.cbl;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .f.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(FOR) $(FFLAGS) $*.f</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .f.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(FOR) /c $(FFLAGS) $*.f</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .f90.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(FOR) $(FFLAGS) $*.f90</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .f90.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(FOR) /c $(FFLAGS) $*.f90</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(FOR) $(FFLAGS) $*.for</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(FOR) /c $(FFLAGS) $*.for</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .pas.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(PASCAL) $(PFLAGS) $*.pas</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .pas.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(PASCAL) /c $(PFLAGS) $*.pas</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .rc.res:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(RC) $(RFLAGS) /r $*</TT>
<BR><BR>For OS/2, the<TT> __MSDOS__</TT> macro will be replaced by<TT> __OS2__</TT> and for Windows NT, the<TT> __MSDOS__</TT>
macro will be replaced by<TT> __NT__.</TT>
<BR><BR>For UNIX make compatibility (when you use the &quot;u&quot; option), the following default definition is established.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .EXTENSIONS: .exe .obj .c .y .l .f</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; %MAKEFLAGS=$(%MAKEFLAGS) $(__MAKEOPTS__)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; MAKE=&lt;name of file containing WMAKE&gt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; YACC=yacc</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; YFLAGS=</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; LEX=lex</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; LFLAGS=</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; LDFLAGS=</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CC=cl</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FC=fl</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .asm.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(AS) $(AFLAGS) $*.asm</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .c.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(CC) $(CFLAGS) $(LDFLAGS) -o $@ $&lt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .f.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(FC) $(FFLAGS) $(LDFLAGS) -o $@ $&lt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .c.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(CC) $(CFLAGS) -c $&lt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .f.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(FC) $(FFLAGS) -c $&lt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .y.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(YACC) $(YFLAGS) $&lt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(CC) $(CFLAGS) -c y.tab.c</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; del y.tab.c</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; move y.tab.obj $@</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .l.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(LEX) $(LFLAGS) $&lt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(CC) $(CFLAGS) -c lex.yy.c</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; del lex.yy.c</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; move lex.yy.obj $@</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .y.c:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(YACC) $(YFLAGS) $&lt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; move y.tab.c $@</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .l.c:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(LEX) $(LFLAGS) $&lt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; move lex.yy.c $@</TT>
<BR><BR>The &quot;r&quot; option will disable these definitions before processing any makefiles.
<H4 ID="s"> s </H4>
<BR>silent mode - do not print commands before execution
<BR>The &quot;s&quot; option is equivalent to the<TT> .SILENT</TT> directive.
<H4 ID="sn"> sn </H4>
<BR>noisy mode - always print commands before execution
<BR>The &quot;sn&quot; option overrules all silencing controls.&nbsp; It can be used to assist in debugging a makefile.
<H4 ID="t"> t </H4>
<BR>touch files instead of executing commands
<BR>Sometimes there are changes which are purely cosmetic (adding a comment to a source file) that will cause targets to be
updated needlessly thus wasting computer resources.&nbsp; The &quot;t&quot; option will make files appear younger without
altering their contents.&nbsp; The &quot;t&quot; option is useful but should be used with caution.
<H4 ID="u"> u </H4>
<BR>UNIX compatibility mode
<BR>The &quot;u&quot; option will indicate to Make that the line continuation character should be a backslash &quot;\&quot;
rather than an ampersand &quot;&amp;&quot;.
<H4 ID="v"> v </H4>
<BR>The &quot;v&quot; option enables a verbose listing of inline temporary files.
<H4 ID="y"> y </H4>
<BR>The &quot;y&quot; option enables the display of a progress line denoting which dependent file has caused a target to be
updated.&nbsp; This is a useful option for helping to debug makefiles.
<H4 ID="z"> z </H4>
<BR>do not erase target after error/interrupt (disables prompting)
<BR>The &quot;z&quot; option will indicate to Make that if an error or interrupt occurs during makefile processing then the
current target being made should not be deleted.&nbsp; The<TT> .HOLD</TT> directive in a makefile has the same effect as the
&quot;z&quot; option.
<H3 ID="Special_Macros"> Special Macros </H3>
<BR>Open Watcom Make has many different special macros.&nbsp; Here are some of the simpler ones.
<DL>
<DT><B><I>Macro</I></B>
<DD><B><I>Expansion</I></B>
<DT>$$
<DD>represents the character &quot;$&quot;
<DT>$#
<DD>represents the character &quot;#&quot;
<DT>$@
<DD>full file name of the target
<DT>$*
<DD>target with the extension removed
<DT>$&lt;
<DD>list of all dependents
<DT>$?
<DD>list of dependents that are younger than the target
</DL>
<BR>The following macros are for more sophisticated makefiles.
<DL>
<DT><B><I>Macro</I></B>
<DD><B><I>Expansion</I></B>
<DT>__MSDOS__
<DD>This macro is defined in the MS/DOS environment.
<DT>__NT__
<DD>This macro is defined in the Windows NT environment.
<DT>__OS2__
<DD>This macro is defined in the OS/2 environment.
<DT>__LINUX__
<DD>This macro is defined in the Linux environment.
<DT>__QNX__
<DD>This macro is defined in the QNX environment.
<DT>__UNIX__
<DD>This macro is defined in the Linux or QNX environment.
<DT>__MAKEOPTS__
<DD>contains all of the command line options that WMAKE was invoked with except for any use of the &quot;f&quot; or &quot;n&quot;
options.
<DT>__MAKEFILES__
<DD>contains the names of all of the makefiles processed at the time of expansion (includes the file currently being processed)
<DT>MAKE
<DD>contains the full name of the file that contains WMAKE
<DT>__VERSION__
<DD>contains the wmake version.
</DL>
<BR>The next three tables contain macros that are valid during execution of command lists for explicit rules, implicit rules,
and the<TT> .ERROR</TT> directive.&nbsp; The expansion is presented for the following example:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; a:\dir\target.ext : b:\dir1\dep1.ex1 c:\dir2\dep2.ex2</TT>
<DL>
<DT><B><I>Macro</I></B>
<DD><B><I>Expansion</I></B>
<DT>$^@
<DD>a:\dir\target.ext
<DT>$^*
<DD>a:\dir\target
<DT>$^&amp;
<DD>target
<DT>$^.
<DD>target.ext
<DT>$^:
<DD>a:\dir\
</DL>
<DL>
<DT><B><I>Macro</I></B>
<DD><B><I>Expansion</I></B>
<DT>$[@
<DD>b:\dir1\dep1.ex1
<DT>$[*
<DD>b:\dir1\dep1
<DT>$[&amp;
<DD>dep1
<DT>$[.
<DD>dep1.ex1
<DT>$[:
<DD>b:\dir1\
</DL>
<DL>
<DT><B><I>Macro</I></B>
<DD><B><I>Expansion</I></B>
<DT>$]@
<DD>c:\dir2\dep2.ex2
<DT>$]*
<DD>c:\dir2\dep2
<DT>$]&amp;
<DD>dep2
<DT>$].
<DD>dep2.ex2
<DT>$]:
<DD>c:\dir2\
</DL>
<H2 ID="Dependency_Declarations"> Dependency Declarations </H2>
<BR>In order for Open Watcom Make to be effective, a list of file dependencies must be declared.&nbsp; The declarations may
be entered into a text file of any name but Make will read a file called &quot;MAKEFILE&quot; by default if it is invoked
as follows:&nbsp; 
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wmake</TT>
<BR><BR>If you want to use a file that is not called &quot;MAKEFILE&quot; then the command line option &quot;f&quot; will
cause Make to read the specified file instead of the default &quot;MAKEFILE&quot;.&nbsp; 
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wmake /f myfile</TT>
<BR><BR>We will now go through an example to illustrate how Make may be used for a simple application.&nbsp; Suppose we have
an input file, a report file, and a report generator program then we may declare a dependency as follows:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (a comment in a makefile starts with a &quot;#&quot;)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # simple dependency declaration</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance.lst : ledger.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doreport</TT>
<BR><BR>Note that the dependency declaration starts at the beginning of a line while commands always have at least one blank
or tab before them.&nbsp; This form of a dependency declaration is called an<B> explicit rule.</B>&nbsp; The file &quot;BALANCE.LST&quot;
is called the<B> target</B> of the rule.&nbsp; The<B> dependent</B> of the rule is the file &quot;LEDGER.DAT&quot; while &quot;DOREPORT&quot;
forms one line of the<B> rule command list.</B>&nbsp; The dependent is separated from the target by a colon.
<BR><BR><B><I>Hint:</I></B>&nbsp; A good habit to develop is to always put spaces around the colon so that it will not be
confused with drive specifications (e.g., a:).
<BR><BR>The explicit rule declaration indicates to Make that the program &quot;DOREPORT&quot; should be executed if &quot;LEDGER.DAT&quot;
is younger than &quot;BALANCE.LST&quot; or if &quot;BALANCE.LST&quot; does not yet exist.&nbsp; In general, if the dependent
file has a more recent modification date and time than the target file then Open Watcom Make will execute the specified command.
&nbsp;
<HR>
<BR><B><I>&nbsp; Note:</I></B>&nbsp; The terminology employed here is used by S.I.Feldman of Bell Laboratories in<B> Make
- A Program for Maintaining Computer Programs.</B>&nbsp; http://www.softlab.ntua.gr/facilities/documentation/unix/docs/make.txt
has a copy of this seminal article.&nbsp; Confusion often arises from the use of the word &quot;dependent&quot;.&nbsp; In
this context, it means &quot;a subordinate part&quot;.&nbsp; In the example, &quot;LEDGER.DAT&quot; is a subordinate part
of the report &quot;BALANCE.LST&quot;.
<HR>
<H2 ID="Multiple_Dependents"> Multiple Dependents </H2>
<BR>Suppose that our report &quot;BALANCE.LST&quot; becomes out-of-date if any of the files &quot;LEDGER.DAT&quot;, &quot;SALES.DAT&quot;
or &quot;PURCHASE.DAT&quot; are modified.&nbsp; We may modify the dependency rule as follows:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # multiple dependents rule</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance.lst : ledger.dat sales.dat purchase.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doreport</TT>
<BR><BR>This is an example of a rule with multiple dependents.&nbsp; In this situation, the program &quot;DOREPORT&quot; should
be executed if any of &quot;LEDGER.DAT&quot;, &quot;SALES.DAT&quot; or &quot;PURCHASE.DAT&quot; are younger than &quot;BALANCE.LST&quot;
or if &quot;BALANCE.LST&quot; does not yet exist.&nbsp; In cases where there are multiple dependents, if any of the dependent
files has a more recent modification date and time than the target file then Open Watcom Make will execute the specified command.
<H2 ID="Multiple_Targets"> Multiple Targets </H2>
<BR>Suppose that the &quot;DOREPORT&quot; program produces two reports.&nbsp; If both of these reports require updating as
a result of modification to the dependent files, we could change the rule as follows:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # multiple targets and multiple dependents rule</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance.lst summary.lst : ledger.dat sales.dat purchase.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doreport</TT>
<BR><BR>Suppose that you entered the command:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake</TT>
<BR><BR>which causes Make to start processing the rules described in &quot;MAKEFILE&quot;.&nbsp; In the case where multiple
targets are listed in the makefile, Make will, by default, process only the first target it encounters.&nbsp; In the example,
Make will check the date and time of &quot;BALANCE.LST&quot; against its dependents since this is the first target listed.
<BR><BR>To indicate that some other target should be processed, the target is specified as an argument to the Make command.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake summary.lst</TT>
<BR><BR>There are a number of interesting points to consider:
<OL>
<LI>By default, Make will only check that the target file exists after the command (&quot;DOREPORT&quot; in this example)
is executed.&nbsp; It does not check that the target's time-stamp shows it to be younger.&nbsp; If the target file does not
exist after the command has been executed, an error is reported.
<LI>There is no guarantee that the command you have specified does update the target file.&nbsp; In other words, simply because
you have stated a dependency does not mean that one exists.
<LI>Furthermore, it is not implied that other targets in our list will not be updated.&nbsp; In the case of our example, you
can assume that we have designed the &quot;doreport&quot; command to update both targets.
</OL>
<H2 ID="Multiple_Rules"> Multiple Rules </H2>
<BR>A makefile may consist of any number of rules.&nbsp; Note that the following:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; target1 target2 : dependent1 dependent2 dependent3</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; command list</TT>
<BR><BR>is equivalent to:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; target1 : dependent1 dependent2 dependent3</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; command list</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; target2 : dependent1 dependent2 dependent3</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; command list</TT>
<BR><BR>Also, the rules may depend on the targets of other rules.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # rule 1: this rule uses rule 2</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance.lst summary.lst : ledger.dat sales.dat purchase.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doreport</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # rule 2: used by rules 1 and 3</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; sales.dat : canada.dat england.dat usa.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dosales</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # rule 3: this rule uses rule 2</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; year.lst : ledger.dat sales.dat purchase.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doyearly</TT>
<BR><BR>The dependents are checked to see if they are the targets of any other rules in the makefile in which case they are
updated.&nbsp; This process of updating dependents that are targets in other rules continues until a rule is reached that
has only simple dependents that are not targets of rules.&nbsp; At this point, if the target does not exist or if any of the
dependents is younger than the target then the command list associated with the rule is executed.
<BR><BR><B><I>Hint:</I></B>&nbsp; The term &quot;updating&quot;, in this context, refers to the process of checking the time-stamps
of dependents and running the specified command list whenever they are out-of-date.&nbsp; Whenever a dependent is the target
of some other rule, the dependent must be brought up-to-date first.&nbsp; Stated another way, if &quot;A&quot; depends on
&quot;B&quot; and &quot;B&quot; depends on &quot;C&quot; and &quot;C&quot; is younger than &quot;B&quot; then we must update
&quot;B&quot; before we update &quot;A&quot;.
<BR><BR>Make will check to ensure that the target exists after its associated command list is executed.&nbsp; The target existence
checking may be disabled in two ways:
<OL>
<LI>use the command line option &quot;c&quot;
<LI>use the<TT> .NOCHECK</TT> directive.
</OL>
<BR>The rule checking returns to the previous rule that had the target as a dependent.&nbsp; Upon returning to the rule, the
command list is executed if the target does not exist or if any of the updated dependents are now younger than the target.
&nbsp;If you were to type:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake</TT>
<BR><BR>here are the steps that would occur with the previous makefile:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; update(balance.lst) (rule 1)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; update(ledger.dat)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; (not a target)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; update(sales.dat)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; (found rule 2)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; update(canada.dat)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; (not a target)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; update(england.dat)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(not a target)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; update(usa.dat)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; (not a target)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IF sales.dat does not exist&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OR</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; any of (canada.dat,england.dat,usa.dat)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; is younger than sales.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THEN execute &quot;dosales&quot;</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; update(purchase.dat)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(not a target)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IF balance.lst does not exist&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OR</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; any of (ledger.dat,sales.dat,purchase.dat)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; is younger than (balance.lst)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THEN execute &quot;doreport&quot;</TT>
<BR><BR>The third rule in the makefile will not be included in this update sequence of steps.&nbsp; Recall that the default
target that is &quot;updated&quot; is the first target in the first rule encountered in the makefile.&nbsp; This is the default
action taken by Make when no target is specified on the command line.&nbsp; If you were to type:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake year.lst</TT>
<BR><BR>then the file &quot;YEAR.LST&quot; would be updated.&nbsp; As Make reads the rules in &quot;MAKEFILE&quot;, it discovers
that updating &quot;YEAR.LST&quot; involves updating &quot;SALES.DAT&quot;.&nbsp; The update sequence is similar to the previous
example.
<H2 ID="Command_Lists"> Command Lists </H2>
<BR>A command list is a sequence of one or more commands.&nbsp; Each command is preceded by one or more spaces or tabs.&nbsp;
Command lists may also be used to construct inline files &quot;on the fly&quot;.&nbsp; Macros substitute in command lists
and in inline files.&nbsp; An inline file is introduced by &quot;&lt;&lt;&quot; in a command in a command list.&nbsp; Data
to insert into that file is placed (left-justified) in the command list.&nbsp; The data is terminated by &quot;&lt;&lt;&quot;
in the first column.&nbsp; It is not possible to place a line which starts &quot;&lt;&lt;&quot; in an inline file.&nbsp; More
than one inline file may be created in a command.&nbsp; Data for each is placed in order of reference in the command.
<BR>In building the Open Watcom system, it is sometimes necessary to do some text substitution with a program called vi.&nbsp;
This needs a file of instructions.&nbsp; The following simplifies an example used to build Open Watcom so that inline files
may be shown.&nbsp; Without inline files, this is done as:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; $(dllname).imp : $(dllname).lbc ../../trimlbc.vi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cp $(dllname).lbc $(dllname).imp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(vi) -s ../../trimlbc.vi $(dllname).imp</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; where trimlbc.vi consists of</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; set magic</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; set magicstring = ()</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; atomic</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; %s/\.dll'/'/</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; %s/^(\+\+')(.*)('\.'.*')\.[0-9]+$/\1\2\3..'\2'/</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; x</TT>
<BR><BR>A doubled &quot;$&quot; to produce a single dollar is notable when an inline file is used:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; $(dllname).imp : $(dllname).lbc</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cp $(dllname).lbc $(dllname).imp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(vi) -s &lt;&lt; $(dllname).imp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; set magic</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; set magicstring = ()</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; atomic</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; %s/\.dll'/'/</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; %s/^(\+\+')(.*)('\.'.*')\.[0-9]+$$/\1\2\3..'\2'/</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; x</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt;</TT>
<BR><BR>A filename may follow a &quot;&lt;&lt;&quot; on a command line to cause a file with that name to be created.&nbsp;
(Otherwise, 'WMAKE' chooses a name.) &quot;keep&quot; or &quot;nokeep&quot; may follow a terminating &quot;&lt;&lt;&quot;
to show what to do with the file after usage.&nbsp; The default is &quot;nokeep&quot; which zaps it.
<H2 ID="Final_Commands_L_AFTERR"> Final Commands (.AFTER) </H2>
<BR>The<TT> .AFTER</TT> directive specifies commands for Make to run after it has done all other commands.&nbsp; See the section
entitled <A HREF="#Command_List_Directives">Command List Directives</A> for a full description of its use.
<H2 ID="Ignoring_Dependent_Timestamps_L_ALWAYSR"> Ignoring Dependent Timestamps (.ALWAYS) </H2>
<BR>The<TT> .ALWAYS</TT> directive indicates to Make that the target should always be updated regardless of the timestamps
of its dependents.
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .always directive</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; foo : bar .always</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wtouch $@</TT>
<BR><BR>foo is updated each time Make is run.
<H2 ID="Automatic_Dependency_Detection_L_AUTODEPENDR"> Automatic Dependency Detection (.AUTODEPEND) </H2>
<BR>Explicit listing of dependencies in a makefile can often be tedious in the development and maintenance phases of a project.
&nbsp;The Open Watcom F77 compiler will insert dependency information into the object file as it processes source files so
that a complete snapshot of the files necessary to build the object file are recorded.&nbsp; Since all files do not have dependency
information contained within them in a standard form, it is necessary to indicate to Make when dependencies are present.
<BR><BR>To illustrate the use of the<TT> .AUTODEPEND</TT> directive, we will show its use in an implicit rule and in an explicit
rule.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .AUTODEPEND example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for.obj: .AUTODEPEND</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wfc386 $[* $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; test.exe : a.obj b.obj c.obj test.res</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink FILE a.obj, b.obj, c.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wrc /q /bt=windows test.res test.exe</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; test.res : test.rc test.ico .AUTODEPEND</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wrc /ad /q /bt=windows /r $[@ $^@</TT>
<BR><BR>In the above example, Make will use the contents of the object file to determine whether the object file has to be
built during processing.&nbsp; The Open Watcom Resource Compiler can also insert dependency information into a resource file
that can be used by Make.
<H2 ID="Initial_Commands_L_BEFORER"> Initial Commands (.BEFORE) </H2>
<BR>The<TT> .BEFORE</TT> directive specifies commands for Make to run before it does any other command.&nbsp; See the section
entitled <A HREF="#Command_List_Directives">Command List Directives</A> for a full description of its use.
<H2 ID="Disable_Implicit_Rules_L_BLOCKR"> Disable Implicit Rules (.BLOCK) </H2>
<BR>The<TT> .BLOCK</TT> directive and the &quot;b&quot; command line option are alternative controls to cause implicit rules
to be ignored.&nbsp; See the section entitled <A HREF="#Command_Line_Options">Command Line Options</A> for a full description
of its use.
<H2 ID="Ignoring_Errors_L_CONTINUER"> Ignoring Errors (.CONTINUE) </H2>
<BR>The<TT> .CONTINUE</TT> directive and the &quot;b&quot; command line option are alternative controls to cause failing commands
to be ignored.&nbsp; See the section entitled <A HREF="#Command_Line_Options">Command Line Options</A> for a full description
of its use.
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .continue example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .continue</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; all: bad good</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @%null</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; bad:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; false</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; good:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; touch $@</TT>
<BR><BR>Although the command list for bad fails, that for good is done.&nbsp; Without the directive, good is not built.
<H2 ID="Default_Command_List_L_DEFAULTR"> Default Command List (.DEFAULT) </H2>
<BR>The<TT> .DEFAULT</TT> directive provides a default command list for those targets which lack one.&nbsp; See the section
entitled <A HREF="#Command_List_Directives">Command List Directives</A> for a full description of its use.
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .default example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .default</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @echo Using default rule to update target &quot;$@&quot;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @echo because of dependent(s) &quot;$&lt;&quot;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wtouch $@</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; all: foo</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; foo:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wtouch foo</TT>
<BR><BR>&quot;all&quot; has no command list.&nbsp; The one supplied to the default directive is executed instead.
<H2 ID="Erasing_Targets_After_Error_L_ERASER"> Erasing Targets After Error (.ERASE) </H2>
<BR>Most operating system utilities and programs have special return codes that indicate error conditions.&nbsp; Open Watcom
Make will check the return code for every command executed.&nbsp; If the return code is non-zero, Make will stop processing
the current rule and optionally delete the current target being updated.&nbsp; By default, Make will prompt for deletion of
the current target.&nbsp; The<TT> .ERASE</TT> directive indicates to Make that the target should be deleted if an error occurs
during the execution of the associated command list.&nbsp; No prompt is issued in this case.&nbsp; Here is an example of the<TT>
.ERASE</TT> directive:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .ERASE example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .ERASE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance.lst : ledger.dat sales.dat purchase.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doreport</TT>
<BR><BR>If the program &quot;DOREPORT&quot; executes and its return code is non-zero then Make will attempt to delete &quot;BALANCE.LST&quot;.
<H2 ID="Error_Action_L_ERRORR"> Error Action (.ERROR) </H2>
<BR>The<TT> .ERROR</TT> directive supplies a command list for error conditions.&nbsp; See the section entitled <A HREF="#Command_List_Directives">Command List Directives</A>
for a full description of its use.
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .error example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .error:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @echo it is good that &quot;$@&quot; is known</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; all : .symbolic</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; false</TT>
<H2 ID="Ignoring_Target_Timestamp_L_EXISTSONLYR"> Ignoring Target Timestamp (.EXISTSONLY) </H2>
<BR>The<TT> .EXISTSONLY</TT> directive indicates to Make that the target should not be updated if it already exists, regardless
of its timestamp.
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .existsonly directive</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; foo: .existsonly</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wtouch $@</TT>
<BR><BR>If absent, this file creates foo; if present, this file does nothing.
<H2 ID="Specifying_Explicitly_Updated_Targets_L_EXPLICITR"> Specifying Explicitly Updated Targets (.EXPLICIT) </H2>
<BR>The<TT> .EXPLICIT</TT> directive may me used to specify a target that needs to be explicitly updated.&nbsp; Normally,
the first target in a makefule will be implicitly updated if no target is specified on Make command line.&nbsp; The<TT> .EXPLICIT</TT>
directive prevents this, and is useful for instance when creating files designed to be included for other make files.
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .EXPLICIT example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; target : .symbolic .explicit</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @echo updating first target</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; next : .symbolic</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @echo updating next target</TT>
<BR><BR>In the above example, Make will not automatically update &quot;target&quot;, despite the fact that it is the first
one listed.
<H2 ID="Defining_Recognized_File_Extensions_L_EXTENSIONSR"> Defining Recognized File Extensions (.EXTENSIONS) </H2>
<BR>The<TT> .EXTENSIONS</TT> directive and its synonym, the<TT> .SUFFIXES</TT> directive declare which extensions are allowed
to be used in implicit rules and how these extensions are ordered.<TT>&nbsp; .EXTENSIONS</TT> is the traditional Watcom name;<TT>
.SUFFIXES</TT> is the corresponding POSIX name.&nbsp; The default<TT> .EXTENSIONS</TT> declaration is:
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .EXTENSIONS:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .EXTENSIONS: .exe .nlm .dsk .lan .exp .lib .obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .i .asm .c
.cpp .cxx .cc .for .pas .cob &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .h .hpp .hxx
.hh .fi .mif .inc</TT>
<BR><BR>A<TT> .EXTENSIONS</TT> directive with an empty list will clear the<TT> .EXTENSIONS</TT> list and any previously defined
implicit rules.&nbsp; Any subsequent<TT> .EXTENSIONS</TT> directives will add extensions to the end of the list.
<BR><BR><B><I>Hint:</I></B>&nbsp; The default<TT> .EXTENSIONS</TT> declaration could have been coded as:
<BR><BR>.EXTENSIONS:
<BR><BR>.EXTENSIONS:&nbsp; .exe
<BR>.EXTENSIONS:&nbsp; .nlm .dsk .lan .exp
<BR>.EXTENSIONS:&nbsp; .lib
<BR>.EXTENSIONS:&nbsp; .obj
<BR>.EXTENSIONS:&nbsp; .i .asm .c .cpp .cxx .cc
<BR>.EXTENSIONS:&nbsp; .for .pas .cob
<BR>.EXTENSIONS:&nbsp; .h .hpp .hxx .hh .fi .mif .inc
<BR>.EXTENSIONS:&nbsp; .inc
<BR>with identical results.
<BR><BR>Make will not allow any implicit rule declarations that use extensions that are not in the current<TT> .EXTENSIONS</TT>
list.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .extensions and .suffixes directives</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .suffixes : # Clear list</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .extensions : .foo .bar</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .bar.foo:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; copy $&lt; $@</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; fubar.foo:</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; fubar.bar: .existsonly</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wtouch $@</TT>
<BR><BR>The first time this example runs, Make creates fubar.foo.&nbsp; This example always ensures that fubar.foo is a copy
of fubar.bar.&nbsp; Note the implicit connection beween the two files.
<H2 ID="Approximate_Timestamp_Matching_L_FUZZYR"> Approximate Timestamp Matching (.FUZZY) </H2>
<BR>The<TT> .FUZZY</TT> directive allows <TT> .AUTODEPEND</TT> times to be out by a minute without considering a target out
of date.&nbsp; It is only useful in conjunction with the <TT> .JUST_ENOUGH</TT> directive when Make is calculating the timestamp
to set the target to.
<H2 ID="Preserving_Targets_After_Error_L_HOLDR"> Preserving Targets After Error (.HOLD) </H2>
<BR>Most operating system utilities and programs have special return codes that indicate error conditions.&nbsp; Open Watcom
Make will check the return code for every command executed.&nbsp; If the return code is non-zero, Make will stop processing
the current rule and optionally delete the current target being updated.&nbsp; By default, Make will prompt for deletion of
the current target.&nbsp; The<TT> .HOLD</TT> directive indicates to Make that the target should not be deleted if an error
occurs during the execution of the associated command list.&nbsp; No prompt is issued in this case.&nbsp; The<TT> .HOLD</TT>
directive is similar to<TT> .PRECIOUS</TT> but applies to all targets listed in the makefile.&nbsp; Here is an example of
the<TT> .HOLD</TT> directive:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .HOLD example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .HOLD</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance.lst : ledger.dat sales.dat purchase.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doreport</TT>
<BR><BR>If the program &quot;DOREPORT&quot; executes and its return code is non-zero then Make will not delete &quot;BALANCE.LST&quot;.
<H2 ID="Ignoring_Return_Codes_L_IGNORER"> Ignoring Return Codes (.IGNORE) </H2>
<BR>Some programs do not have meaningful return codes so for these programs we want to ignore the return code completely.
&nbsp;There are different ways to ignore return codes namely,
<OL>
<LI>use the command line option &quot;i&quot;
<LI>put a &quot;-&quot; in front of specific commands, or
<LI>use the<TT> .IGNORE</TT> directive.
</OL>
<BR>In the following example, the rule:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # ignore return code example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance.lst : ledger.dat sales.dat purchase.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -doreport</TT>
<BR><BR>will ignore the return status from the program &quot;DOREPORT&quot;.&nbsp; Using the dash in front of the command
is the preferred method for ignoring return codes because it allows Make to check all the other return codes.
<BR><BR>The<TT> .IGNORE</TT> directive is used as follows:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .IGNORE example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .IGNORE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance.lst : ledger.dat sales.dat purchase.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doreport</TT>
<BR><BR>Using the<TT> .IGNORE</TT> directive will cause Make to ignore the return code for every command.&nbsp; The &quot;i&quot;
command line option and the<TT> .IGNORE</TT> directive prohibit Make from performing any error checking on the commands executed
and, as such, should be used with caution.
<BR><BR>Another way to handle non-zero return codes is to continue processing targets which do not depend on the target that
had a non-zero return code during execution of its associated command list.&nbsp; There are two ways of indicating to Make
that processing should continue after a non-zero return code:
<OL>
<LI>use the command line option &quot;k&quot;
<LI>use the<TT> .CONTINUE</TT> directive.
</OL>
<H2 ID="Minimising_Target_Timestamp_L_JUST_ENOUGHR"> Minimising Target Timestamp (.JUST_ENOUGH) </H2>
<BR>The<TT> .JUST_ENOUGH</TT> directive is equivalent to the &quot;j&quot; command line option.&nbsp; The timestamps of created
targets are set to be the same as those of their youngest dependendents.
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .JUST_ENOUGH example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .just_enough</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .c.exe:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wcl386 -zq $&lt;</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; hello.exe:</TT>
<BR><BR>hello.exe is given the same timestamp as hello.c, and not the usual timestamp corresponding to when hello.exe was
built.
<H2 ID="Updating_Targets_Multiple_Times_L_MULTIPLER"> Updating Targets Multiple Times (.MULTIPLE) </H2>
<BR>The<TT> .MULTIPLE</TT> directive is used to update a target multiple times.&nbsp; Normally, Make will only update each
target once while processing a makefile.&nbsp; The<TT> .MULTIPLE</TT> directive is useful if a target needs to be updated
more than once, for instance in case the target is destroyed during processing of other targets.&nbsp; Consider the following
example:
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # example not using .multiple</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; all: targ1 targ2</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; target:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wtouch target</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; targ1: target</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rm target</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wtouch targ1</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; targ2: target</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rm target</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wtouch targ2</TT>
<BR><BR>This makefile will fail because &quot;target&quot; is destroyed when updating &quot;targ1&quot;, and later is implicitly
expected to exist when updating &quot;targ2&quot;.&nbsp; Using the<TT> .MULTIPLE</TT> directive will work around this problem:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .MULTIPLE example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; all : targ1 targ2</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; target : .multiple</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wtouch target</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; targ1 : target</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rm target</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wtouch targ1</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; targ2 : target</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rm target</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wtouch targ2</TT>
<BR><BR>Now Make will attempt to update &quot;target&quot; again when updating &quot;targ2&quot;, discover that &quot;target&quot;
doesn't exist, and recreate it.
<H2 ID="Ignoring_Target_Timestamp_L_NOCHECKR"> Ignoring Target Timestamp (.NOCHECK) </H2>
<BR>The<TT> .NOCHECK</TT> directive is used to disable target existence checks in a makefile.&nbsp; See the section entitled
<A HREF="#Command_Line_Options">Command Line Options</A> for a full description of its use.
<H2 ID="Cache_Search_Path_L_OPTIMIZER"> Cache Search Path (.OPTIMIZE) </H2>
<BR>The<TT> .OPTIMIZE</TT> directive and the equivalent &quot;o&quot; command line option cause Make to use a circular path
search.&nbsp; If a file is found in a particular directory, that directory will be the first searched for the next file.&nbsp;
See the section entitled <A HREF="#Command_Line_Options">Command Line Options</A> for a full description of its use.
<H2 ID="Preserving_Targets_L_PRECIOUSR"> Preserving Targets (.PRECIOUS) </H2>
<BR>Most operating system utilities and programs have special return codes that indicate error conditions.&nbsp; Open Watcom
Make will check the return code for every command executed.&nbsp; If the return code is non-zero, Make will stop processing
the current rule and optionally delete the current target being updated.&nbsp; If a file is precious enough that this treatment
of return codes is not wanted then the<TT> .PRECIOUS</TT> directive may be used.&nbsp; The<TT> .PRECIOUS</TT> directive indicates
to Make that the target should not be deleted if an error occurs during the execution of the associated command list.&nbsp;
Here is an example of the<TT> .PRECIOUS</TT> directive:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .PRECIOUS example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance summary : sales.dat purchase.dat .PRECIOUS</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doreport</TT>
<BR><BR>If the program &quot;DOREPORT&quot; executes and its return code is non-zero then Make will not attempt to delete
&quot;BALANCE&quot; or &quot;SUMMARY&quot;.&nbsp; If only one of the files is precious then the makefile could be coded as
follows:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .PRECIOUS example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance : .PRECIOUS</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance summary : sales.dat purchase.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doreport</TT>
<BR><BR>The file &quot;BALANCE.LST&quot; will not be deleted if an error occurs while the program &quot;DOREPORT&quot; is
executing.
<H2 ID="Name_Command_Sequence_L_PROCEDURER"> Name Command Sequence (.PROCEDURE) </H2>
<BR>The<TT> .PROCEDURE</TT> directive may be used to construct &quot;procedures&quot; in a makefile.
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .procedure example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; all: .symbolic</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @%make proc</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; proc: .procedure</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @echo Executing procedure &quot;proc&quot;</TT>
<H2 ID="ReMChecking_Target_Timestamp_L_RECHECKR"> Re-Checking Target Timestamp (.RECHECK) </H2>
<BR>Make will re-check the target's timestamp, rather than assuming it was updated by its command list.&nbsp; This is useful
if the target is built by another make- style tool, as in the following example:
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .RECHECK example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; foo.gz : foo</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gzip foo</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; foo : .ALWAYS .RECHECK</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nant -buildfile:foo.build</TT>
<BR><BR>foo's command list will always be run, but foo will only be compressed if the timestamp is actually changed.
<H2 ID="Suppressing_Terminal_Output_L_SILENTR"> Suppressing Terminal Output (.SILENT) </H2>
<BR>As commands are executed, Open Watcom Make will print out the current command before it is executed.&nbsp; It is possible
to execute the makefile without having the commands printed.&nbsp; There are three ways to inhibit the printing of the commands
before they are executed, namely:
<OL>
<LI>use the command line option &quot;s&quot;
<LI>put an &quot;@&quot; in front of specific commands, or
<LI>use the<TT> .SILENT</TT> directive.
</OL>
<BR>In the following example, the rule:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # silent command example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance summary : ledger.dat sales.dat purchase.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @doreport</TT>
<BR><BR>will prevent the string &quot;doreport&quot; from being printed on the screen before the command is executed.
<BR><BR>The<TT> .SILENT</TT> directive is used as follows:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .SILENT example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .SILENT</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; balance summary : ledger.dat sales.dat purchase.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doreport</TT>
<BR><BR>Using the<TT> .SILENT</TT> directive or the &quot;s&quot; command line option will inhibit the printing of all commands
before they are executed.&nbsp; The &quot;sn&quot; command line option can be used to veto any silencing control.
<BR><BR>At this point, most of the capability of Make may be realized.&nbsp; Methods for making makefiles more succinct will
be discussed.
<H2 ID="Defining_Recognized_File_Extensions_L_SUFFIXESR"> Defining Recognized File Extensions (.SUFFIXES) </H2>
<BR>The<TT> .SUFFIXES</TT> directive declares which extensions are allowed to be used in implicit rules and how these extensions
are ordered.&nbsp; It is a synonym for the<TT> .EXTENSIONS</TT> directive.&nbsp; See the section entitled <A HREF="#Defining_Recognized_File_Extensions_L_EXTENSIONSR">Defining Recognized File Extensions (.EXTENSIONS)</A>
for a full description of both directives.
<H2 ID="Targets_Without_Any_Dependents_L_SYMBOLICR"> Targets Without Any Dependents (.SYMBOLIC) </H2>
<BR>There must always be at least one target in a rule but it is not necessary to have any dependents.&nbsp; If a target does
not have any dependents, the command list associated with the rule will always be executed if the target is updated.
<BR><BR>You might ask, &quot;What may a rule with no dependents be used for?&quot;.&nbsp; A rule with no dependents may be
used to describe actions that are useful for the group of files being maintained.&nbsp; Possible uses include backing up files,
cleaning up files, or printing files.
<BR><BR>To illustrate the use of the<TT> .SYMBOLIC</TT> directive, we will add two new rules to the previous example.&nbsp;
First, we will omit the<TT> .SYMBOLIC</TT> directive and observe what will happen when it is not present.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # rule 4: backup the data files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; backup :</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo &quot;insert backup disk&quot;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pause</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; copy *.dat a:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo &quot;backup complete&quot;</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # rule 5: cleanup temporary files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; cleanup :</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; del *.tmp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; del \tmp\*.*</TT>
<BR><BR>and then execute the command:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake backup</TT>
<BR><BR>Make will execute the command list associated with the &quot;backup&quot; target and issue an error message indicating
that the file &quot;BACKUP&quot; does not exist after the command list was executed.&nbsp; The same thing would happen if
we typed:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake cleanup</TT>
<BR><BR>In this makefile we are using &quot;backup&quot; and &quot;cleanup&quot; to represent actions we want performed.&nbsp;
The names are not real files but rather they are symbolic names.&nbsp; This special type of target may be declared with the<TT>
.SYMBOLIC</TT> directive.&nbsp; This time, we show rules 4 and 5 with the appropriate addition of<TT> .SYMBOLIC</TT> directives.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # rule 4: backup the data files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; backup : .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo &quot;insert backup disk&quot;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pause</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; copy *.dat a:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo &quot;backup complete&quot;</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # rule 5: cleanup temporary files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; cleanup : .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; del *.tmp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; del \tmp\*.*</TT>
<BR><BR>The use of the<TT> .SYMBOLIC</TT> directive indicates to Make that the target should always be updated internally
after the command list associated with the rule has been executed.&nbsp; A short form for the common idiom of singular<TT>
.SYMBOLIC</TT> targets like:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; target : .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; commands</TT>
<BR><BR>is:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; target</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; commands</TT>
<BR><BR>This kind of target definition is useful for many types of management tasks that can be described in a makefile.
<H2 ID="Macros"> Macros </H2>
<BR>Open Watcom Make has a simple macro facility that may be used to improve makefiles by making them easier to read and maintain.
&nbsp;A macro identifier may be composed from a string of alphabetic characters and numeric characters.&nbsp; The underscore
character is also allowed in a macro identifier.&nbsp; If the macro identifier starts with a &quot;%&quot; character, the
macro identifier represents an environment variable.&nbsp; For instance, the macro identifier &quot;%path&quot; represents
the environment variable &quot;path&quot;.
<DL>
<DT><B><I>Macro identifiers</I></B>
<DD><B><I>Valid?</I></B>
<DT>2morrow
<DD>yes
<DT>stitch_in_9
<DD>yes
<DT>invalid~id
<DD>no
<DT>2b_or_not_2b
<DD>yes
<DT>%path
<DD>yes
<DT>reports
<DD>yes
<DT>!@#*%
<DD>no
</DL>
<BR>We will use a programming example to show how macros are used.&nbsp; The programming example involves four FORTRAN 77
source files and two include files.&nbsp; Here is the initial makefile (before macros):
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (before macros)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : main.obj input.obj calc.obj output.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink @plot</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; main.obj : main.for defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wfc386 main /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; calc.obj : calc.for defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wfc386 calc /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; input.obj : input.for defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wfc386 input /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; output.obj : output.for defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wfc386 output /mf /d1 /warn</TT>
<BR><BR>Macros become useful when changes must be made to makefiles.&nbsp; If the programmer wanted to change the compiler
options for the different compiles, the programmer would have to make a global change to the makefile.&nbsp; With this simple
example, it is quite easy to make the change but try to imagine a more complex example with different programs having similar
options.&nbsp; The global change made by the editor could cause problems by changing the options for other programs.&nbsp;
A good habit to develop is to define macros for any programs that have command line options.&nbsp; In our example, we would
change the makefile to be:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (after macros)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options =</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compiler = wfc386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options = /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : main.obj input.obj calc.obj output.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink $(link_options) @plot</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; main.obj : main.for defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) main $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; calc.obj : calc.for defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) calc $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; input.obj : input.for defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) input $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; output.obj : output.for defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) output $(compile_options)</TT>
<BR><BR>A macro definition consists of a macro identifier starting on the beginning of the line followed by an &quot;=&quot;
which in turn is followed by the text to be replaced.&nbsp; A macro may be redefined, with the latest declaration being used
for subsequent expansions (no warning is given upon redefinition of a macro).&nbsp; The replacement text may contain macro
references.
<BR><BR>A macro reference may occur in two forms.&nbsp; The previous example illustrates one way to reference macros whereby
the macro identifier is delimited by &quot;$(&quot; and &quot;)&quot;.&nbsp; The parentheses are optional so the macros &quot;compiler&quot;
and &quot;compile_options&quot; could be referenced by:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; main.obj : main.for defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $compiler main $compile_options</TT>
<BR><BR>Certain ambiguities may arise with this form of macro reference.&nbsp; For instance, examine this makefile fragment:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; temporary_dir = \tmp\</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; temporary_file = $temporary_dirtmp000.tmp</TT>
<BR><BR>The intention of the declarations is to have a macro that will expand into a file specification for a temporary file.
&nbsp;Make will collect the largest identifier possible before macro expansion occurs.&nbsp; The macro reference is followed
by text that looks like part of the macro identifier (&quot;tmp000&quot;) so the macro identifier that will be referenced
will be &quot;temporary_dirtmp000&quot;.&nbsp; The incorrect macro identifier will not be defined so an error message will
be issued.
<BR><BR>If the makefile fragment was:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; temporary_dir = \tmp\</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; temporary_file = $(temporary_dir)tmp000.tmp</TT>
<BR><BR>there would be no ambiguity.&nbsp; The preferred way to reference macros is to enclose the macro identifier by &quot;$(&quot;
and &quot;)&quot;.
<BR><BR>Macro references are expanded immediately on dependency lines (and thus may not contain references to macros that
have not been defined) but other macro references have their expansion deferred until they are used in a command.&nbsp; In
the previous example, the macros &quot;link_options&quot;, &quot;compiler&quot;, and &quot;compile_options&quot; will not
be expanded until the commands that reference them are executed.
<BR><BR>Another use for macros is to replace large amounts of text with a much smaller macro reference.&nbsp; In our example,
we only have two include files but suppose we had very many include files.&nbsp; Each explicit rule would be very large and
difficult to read and maintain.&nbsp; We will use the previous example makefile to illustrate this use of macros.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (with more macros)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options =</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compiler = wfc386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options = /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; include_files = defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; object_files = main.obj input.obj calc.obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
output.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(object_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink $(link_options) @plot</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; main.obj : main.for $(include_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) main $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; calc.obj : calc.for $(include_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) calc $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; input.obj : input.for $(include_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) input $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; output.obj : output.for $(include_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) output $(compile_options)</TT>
<BR><BR>Notice the ampersand (&quot;&amp;&quot;) at the end of the macro definition for &quot;object_files&quot;.&nbsp; The
ampersand indicates that the macro definition continues on the next line.&nbsp; In general, if you want to continue a line
in a makefile, use an ampersand (&quot;&amp;&quot;) at the end of the line.
<BR><BR>There are special macros provided by Make to access environment variable names.&nbsp; To access the<B> PATH</B> environment
variable in a makefile, we use the macro identifier &quot;%path&quot;.&nbsp; For example, if we have the following line in
a command list:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(%path)</TT>
<BR><BR>it will print out the current value of the<B> PATH</B> environment variable when it is executed.
<BR><BR>There are two other special environment macros that are predefined by Make.&nbsp; The macro identifier &quot;%cdrive&quot;
will expand into one letter representing the current drive.&nbsp; Note that it is operating system dependent whether the cd
command changes the current drive.&nbsp; The macro identifier &quot;%cwd&quot; will expand into the current working directory.
&nbsp;These macro identifiers are not very useful unless we can specify that they be expanded immediately.&nbsp; The complementary
macros &quot;$+&quot; and &quot;$-&quot; respectively turn on and turn off immediate expansion of macros.&nbsp; The scope
of the &quot;$+&quot; macro is the current line after which the default macro expansion behaviour is resumed.&nbsp; A possible
use of these macros is illustrated by the following example makefile.&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # $(%cdrive), $(%cwd), $+, and $- example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; dir1 = $(%cdrive):$(%cwd)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; dir2 = $+ $(dir1) $-</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; example : .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd ..</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(dir1)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(dir2)</TT>
<BR><BR>Which would produce the following output if the current working directory is C:\WATCOM\SOURCE\EXAMPLE:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; (command output only)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C:\WATCOM\SOURCE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C:\WATCOM\SOURCE\EXAMPLE</TT>
<BR><BR>The macro definition for &quot;dir2&quot; forces immediate expansion of the &quot;%cdrive&quot; and &quot;%cwd&quot;
macros thus defining &quot;dir2&quot; to be the current directory that Make was invoked in.&nbsp; The macro &quot;dir1&quot;
is not expanded until execution time when the current directory has changed from the initial directory.
<BR><BR>Combining the $+ and $- special macros with the special macro identifiers &quot;%cdrive&quot; and &quot;%cwd&quot;
is a useful makefile technique.&nbsp; The $+ and $- special macros are general enough to be used in many different ways.
<BR><BR>Constructing other macros is another use for the $+ and $- special macros.&nbsp; Make allows macros to be redefined
and combining this with the $+ and $- special macros, similar looking macros may be constructed.&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # macro construction with $+ and $-</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; template = file1.$(ext) file2.$(ext) file3.$(ext) file4.$(ext)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ext = dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; data_files = $+ $(template) $-</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ext = lst</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; listing_files = $+ $(template) $-</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; example : .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(data_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(listing_files)</TT>
<BR><BR>This makefile would produce the following output:
<BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; file1.dat file2.dat file3.dat file4.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; file1.lst file2.lst file3.lst file4.lst</TT>
<BR><BR>Adding more text to a macro can also be done with the $+ and $- special macros.&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # macro addition with $+ and $-</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; objs = file1.obj file2.obj file3.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; objs = $+$(objs)$- file4.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; objs = $+$(objs)$- file5.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; example : .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(objs)</TT>
<BR><BR>This makefile would produce the following output:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; file1.obj file2.obj file3.obj file4.obj file5.obj</TT>
<BR><BR>Make provides a shorthand notation for this type of macro operation.&nbsp; Text can be added to a macro by using the
&quot;+=&quot; macro assignment.&nbsp; The previous makefile can be written as:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # macro addition with +=</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; objs&nbsp; = file1.obj file2.obj file3.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; objs += file4.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; objs += file5.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; example : .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(objs)</TT>
<BR><BR>and still produce the same results.&nbsp; The shorthand notation &quot;+=&quot; supported by Make provides a quick
way to add more text to macros.
<BR><BR>Make provides the &quot;!inject&quot; preprocessor directive to append a &quot;word&quot; (one or more graphic characters)
to one or more macros.&nbsp; The previous makefile is adapted to show the usage:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # macro construction with !inject</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !inject file1.obj objs objs12 objs13 objs14 objs15</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !inject file2.obj objs objs12 objs13 objs14 objs15</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !inject file3.obj objs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; objs13 objs14 objs15</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !inject file4.obj objs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; objs14 objs15</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !inject file5.obj objs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; objs15</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; example : .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(objs)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(objs12)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(objs13)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(objs14)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(objs15)</TT>
<BR><BR>This makefile would produce the following output:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; file1.obj file2.obj file3.obj file4.obj file5.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; file1.obj file2.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; file1.obj file2.obj file3.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; file1.obj file2.obj file3.obj file4.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; file1.obj file2.obj file3.obj file4.obj file5.obj</TT>
<BR><BR>The &quot;!inject&quot; preprocessor directive supported by Make provides a way to append a word to several macros.
<BR><BR>There are instances when it is useful to have macro identifiers that have macro references contained in them.&nbsp;
If you wanted to print out an informative message before linking the executable that was different between the debugging and
production version, we would express it as follows:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (macro selection)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; version = debugging&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # debugging version</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_production = linking production version ...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_debugging = linking debug version ...</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_production =</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_debugging = debug all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options = $(link_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compiler = wfc386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_production = /mf /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_debugging = /mf /d1 /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options = $(compile_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; include_files = defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; object_files = main.obj input.obj calc.obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
output.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(object_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(msg_$(version))</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink $(link_options) @plot</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; main.obj : main.for $(include_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) main $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; calc.obj : calc.for $(include_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) calc $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; input.obj : input.for $(include_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) input $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; output.obj : output.for $(include_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) output $(compile_options)</TT>
<BR><BR>Take notice of the macro references that are of the form:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; $(&lt;partial_macro_identifier&gt;$(version))</TT>
<BR><BR>The expansion of a macro reference begins by expanding any macros seen until a matching right parenthesis is found.
&nbsp;The macro identifier that is present after the matching parenthesis is found will be expanded.&nbsp; The other form
of macro reference namely:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; $&lt;macro_identifier&gt;</TT>
<BR><BR>may be used in a similar fashion.&nbsp; The previous example would be of the form:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; $&lt;partial_macro_identifier&gt;$version</TT>
<BR><BR>Macro expansion occurs until a character that cannot be in a macro identifier is found (on the same line as the &quot;$&quot;)
after which the resultant macro identifier is expanded.&nbsp; If you want two macros to be concatenated then the line would
have to be coded:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; $(macro1)$(macro2)</TT>
<BR><BR>The use of parentheses is the preferred method for macro references because it completely specifies the order of expansion.
<BR><BR>In the previous example, we can see that the four command lines that invoke the compiler are very similar in form.
&nbsp;We may make use of these similarities by denoting the command by a macro reference.&nbsp; We need to be able to define
a macro that will expand into the correct command when processed.&nbsp; Fortunately, Make can reference the first member of
the dependent list, the last member of the dependent list, and the current target being updated with the use of some special
macros.&nbsp; These special macros have the form:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; $&lt;file_specifier&gt;&lt;form_qualifier&gt;</TT>
<BR><BR>where &lt;file_specifier&gt; is one of:
<DL>
<DT>&quot;^&quot;
<DD>represents the current target being updated
<DT>&quot;[&quot;
<DD>represents the first member of the dependent list
<DT>&quot;]&quot;
<DD>represents the last member of the dependent list
</DL>
<BR>and &lt;form_qualifier&gt; is one of:
<DL>
<DT>&quot;@&quot;
<DD>full file name
<DT>&quot;*&quot;
<DD>file name with extension removed
<DT>&quot;&amp;&quot;
<DD>file name with path and extension removed
<DT>&quot;.&quot;
<DD>file name with path removed
<DT>&quot;:&quot;
<DD>path of file name
</DL>
<BR>If the file &quot;D:\DIR1\DIR2\NAME.EXT&quot; is the current target being updated then the following example will show
how the form qualifiers are used.
<DL>
<DT><B><I>Macro</I></B>
<DD><B><I>Expansion for D:\DIR1\DIR2\NAME.EXT</I></B>
<DT>$^@
<DD><TT> D:\DIR1\DIR2\NAME.EXT</TT>
<DT>$^*
<DD><TT> D:\DIR1\DIR2\NAME</TT>
<DT>$^&amp;
<DD><TT> NAME</TT>
<DT>$^.
<DD><TT> NAME.EXT</TT>
<DT>$^:
<DD><TT> D:\DIR1\DIR2\</TT>
</DL>
<BR>These special macros provide the capability to reference targets and dependents in a variety of ways.
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (more macros)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; version = debugging&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # debugging version</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_production = linking production version ...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_debugging = linking debug version ...</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_production =</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_debugging = debug all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options = $(link_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_production = /mf /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_debugging = /mf /d1 /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options = $(compile_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compiler_command = wfc386 $[* $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; include_files = defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; object_files = main.obj input.obj calc.obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
output.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(object_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(msg_$(version))</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink $(link_options) @$^*</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; main.obj : main.for $(include_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler_command)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; calc.obj : calc.for $(include_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler_command)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; input.obj : input.for $(include_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler_command)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; output.obj : output.for $(include_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler_command)</TT>
<BR><BR>This example illustrates the use of the special dependency macros.&nbsp; Notice the use of &quot;$^*&quot; in the
linker command.&nbsp; The macro expands into the string &quot;plot&quot; since &quot;plot.exe&quot; is the target when the
command is processed.&nbsp; The use of the special dependency macros is recommended because they make use of information that
is already contained in the dependency rule.
<BR><BR>At this point, we know that macro references begin with a &quot;$&quot; and that comments begin with a &quot;#&quot;.
&nbsp;What happens if we want to use these characters without their special meaning?&nbsp; Make has two special macros that
provide these characters to you.&nbsp; The special macro &quot;$$&quot; will result in a &quot;$&quot; when expanded and &quot;$#&quot;
will expand into a &quot;#&quot;.&nbsp; These special macros are provided so that you are not forced to work around the special
meanings of the &quot;$&quot; and &quot;#&quot; characters.
<BR><BR>There is also a simple macro text substitution facility.&nbsp; We have previously seen that a macro call can be made
with $(macroname).&nbsp; The construct $(macroname:string1=string2) substitutes macroname with each occurrence of string1
replaced by string2.&nbsp; We have already seen that it can be useful for a macro to be a set of object file names separated
by spaces.&nbsp; The file directive in wlink can accept a set of names separated by commas.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (macro substitution)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .c.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wfc386 -zq $*.c</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; object_files = main.obj input.obj calc.obj output.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(object_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink name $@ file $(object_files: =,)</TT>
<BR><BR>Note that macro substitution cannot be used with special macros.
<BR><BR>It is also worth noting that although the above example shows a valid approach, the same problem, that is, providing
a list of object files to wlink, can be solved without macro subsitutions.&nbsp; The solution is using the {} syntax of wlink,
as shown in the following example.&nbsp; Refer to the Open Watcom Linker Guide for details.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (not using macro substitution)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .c.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wfc386 -zq $*.c</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; object_files = main.obj input.obj calc.obj output.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(object_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink name $@ file { $(object_files) }</TT>
<H2 ID="Implicit_Rules"> Implicit Rules </H2>
<BR>Open Watcom Make is capable of accepting declarations of commonly used dependencies.&nbsp; These declarations are called
&quot;implicit rules&quot; as opposed to &quot;explicit rules&quot; which were discussed previously.&nbsp; Implicit rules
may be applied only in instances where you are able to describe a dependency in terms of file extensions.
<BR><BR><B><I>Hint:</I></B>&nbsp; Recall that a file extension is the portion of the file name which follows the period.&nbsp;
In the file specification:
<BR><BR><TT>c:\dos\ansi.sys</TT>
<BR><BR>the file extension is &quot;SYS&quot;.
<BR><BR>An implicit rule provides a command list for a dependency between files with certain extensions.&nbsp; The form of
an implicit rule is as follows:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .&lt;dependent_extension&gt;.&lt;target_extension&gt;:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;command_list&gt;</TT>
<BR><BR>Implicit rules are used if a file has not been declared as a target in any explicit rule or the file has been declared
as a target in an explicit rule with no command list.&nbsp; For a given target file, a search is conducted to see if there
are any implicit rules defined for the target file's extension in which case Make will then check if the file with the dependent
extension in the implicit rule exists.&nbsp; If the file with the dependent extension exists then the command list associated
with the implicit rule is executed and processing of the makefile continues.
<BR><BR>Other implicit rules for the target extension are searched in a similar fashion.&nbsp; The order in which the dependent
extensions are checked becomes important if there is more than one implicit rule declaration for a target extension.&nbsp;
If we have the following makefile fragment:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .pas.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (command list)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (command list)</TT>
<BR><BR>an ambiguity arises.&nbsp; If we have a target file &quot;TEST.OBJ&quot; then which do we check for first, &quot;TEST.PAS&quot;
or &quot;TEST.FOR&quot;?&nbsp; Make handles this with the previously described<TT> .EXTENSIONS</TT> directive.&nbsp; Returning
to our makefile fragment:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .pas.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (command list)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (command list)</TT>
<BR><BR>and our target file &quot;TEST.OBJ&quot;, we know that the<TT> .EXTENSIONS</TT> list determines in what order the
dependents &quot;TEST.PAS&quot; and &quot;TEST.FOR&quot; will be tried.&nbsp; If the .EXTENSIONS declaration is:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .EXTENSIONS:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .EXTENSIONS: .exe .obj .asm .pas .for .c .cob</TT>
<BR><BR>we can see that the dependent file &quot;TEST.PAS&quot; will be tried first as a possible dependent with &quot;TEST.FOR&quot;
being tried next.
<BR><BR>One apparent problem with implicit rules and their associated command lists is that they are used for many different
targets and dependents during the processing of a makefile.&nbsp; The same problem occurs with commands constructed from macros.
&nbsp;Recall that there is a set of special macros that start with &quot;$^&quot;, &quot;$[&quot;, or &quot;$]&quot; that
reference the target, first dependent, or last dependent of an explicit dependency rule.&nbsp; In an implicit rule there may
be only one dependent or many dependents depending on whether the rule is being executed for a target with a single colon
&quot;:&quot; or double colon &quot;::&quot; dependency.&nbsp; If the target has a single colon or double colon dependency,
the &quot;$^&quot;, &quot;$[&quot;, and &quot;$]&quot; special macros will reflect the values in the rule that caused the
implicit rule to be invoked.&nbsp; Otherwise, if the target does not have a dependency rule then the &quot;$[&quot; and &quot;$]&quot;
special macros will be set to the same value, namely, the file found in the implicit rule search.
<BR><BR>We will use the last programming example to illustrate a possible use of implicit rules.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (implicit rules)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; version = debugging&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # debugging version</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_production = linking production version ...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_debugging = linking debug version ...</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_production =</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_debugging = debug all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options = $(link_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compiler = wfc386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_production = /mf /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_debugging = /mf /d1 /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options = $(compile_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; include_files = defs.fi globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; object_files = main.obj input.obj calc.obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
output.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(object_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(msg_$(version))</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink $(link_options) @$^*</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) $[* $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; main.obj : main.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; calc.obj : calc.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; input.obj : input.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; output.obj : output.for $(include_files)</TT>
<BR><BR>As this makefile is processed, any time an object file is found to be older than its associated source file or include
files then Make will attempt to execute the command list associated with the explicit rule.&nbsp; Since there are no command
lists associated with the four object file targets, an implicit rule search is conducted.&nbsp; Suppose &quot;CALC.OBJ&quot;
was older than &quot;CALC.FOR&quot;.&nbsp; The lack of a command list in the explicit rule with &quot;CALC.OBJ&quot; as a
target causes the &quot;.for.obj&quot; implicit rule to be invoked for &quot;CALC.OBJ&quot;.&nbsp; The file &quot;CALC.FOR&quot;
is found to exist so the commands
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wfc386 calc /mf /d1 /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo linking debug version ...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink debug all @plot</TT>
<BR><BR>are executed.&nbsp; The last two commands are a result of the compilation of &quot;CALC.FOR&quot; producing a &quot;CALC.OBJ&quot;
file that is younger than the &quot;PLOT.EXE&quot; file that in turn must be generated again.
<BR><BR>The use of implicit rules is straightforward when all the files that the makefile deals with are in the current directory.
&nbsp;Larger applications may have files that are in many different directories.&nbsp; Suppose we moved the programming example
files to three sub-directories.
<DL>
<DT><B><I>Files</I></B>
<DD><B><I>Sub-directory</I></B>
<DT>include files
<DD><TT> \EXAMPLE\INC</TT>
<DT>source files
<DD><TT> \EXAMPLE\SRC</TT>
<DT>rest
<DD><TT> \EXAMPLE\O</TT>
</DL>
<BR>Now the previous makefile (located in the \EXAMPLE\O sub-directory) would look like this:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (implicit rules)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; i_dir&nbsp;&nbsp; = \example\inc\ #sub-directory containing include files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; s_dir&nbsp;&nbsp; = \example\src\ #sub-directory containing source files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; version = debugging&nbsp;&nbsp; # debugging version</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_production = linking production version ...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_debugging = linking debug version ...</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_production =</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_debugging = debug all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options = $(link_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compiler = wfc386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_production = /mf /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_debugging = /mf /d1 /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options = $(compile_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; include_files = $(i_dir)defs.fi $(i_dir)globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; object_files = main.obj input.obj calc.obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
output.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(object_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(msg_$(version))</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink $(link_options) @$^*</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) $[* $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; main.obj : $(s_dir)main.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; calc.obj : $(s_dir)calc.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; input.obj : $(s_dir)input.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; output.obj : $(s_dir)output.for $(include_files)</TT>
<BR><BR>Suppose &quot;\EXAMPLE\O\CALC.OBJ&quot; was older than &quot;\EXAMPLE\SRC\CALC.FOR&quot;.&nbsp; The lack of a command
list in the explicit rule with &quot;CALC.OBJ&quot; as a target causes the &quot;.for.obj&quot; implicit rule to be invoked
for &quot;CALC.OBJ&quot;.&nbsp; At this time, the file &quot;\EXAMPLE\O\CALC.FOR&quot; is not found so an error is reported
indicating that &quot;CALC.OBJ&quot; could not be updated.&nbsp; How may implicit rules be useful in larger applications if
they will only search the current directory for the dependent file?&nbsp; We must specify more information about the dependent
extension (in this case &quot;.FOR&quot;).&nbsp; We do this by associating a path with the dependent extension as follows:
&nbsp;
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .&lt;dependent_extension&gt; : &lt;path_specification&gt;</TT>
<BR><BR>This allows the implicit rule search to find the files with the dependent extension.
<BR><BR><B><I>Hint:</I></B>&nbsp; A valid path specification is made up of directory specifications separated by semicolons
(&quot;;&quot;).&nbsp; Here are some path specifications:
<BR><BR><TT>D:;C:\DOS;C:\UTILS;C:\WC</TT>
<BR><TT>C:\SYS</TT>
<BR><TT>A:\BIN;D:</TT>
<BR>Notice that these path specifications are identical to the form required by the operating system shell's &quot;PATH&quot;
command.
<BR><BR>Our makefile will be correct now if we add the new declaration as follows:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (implicit rules)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; i_dir&nbsp;&nbsp; = \example\inc\ #sub-directory containing include files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; s_dir&nbsp;&nbsp; = \example\src\ #sub-directory containing source files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; version = debugging&nbsp;&nbsp;&nbsp; # debugging version</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_production = linking production version ...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_debugging = linking debug version ...</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_production =</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_debugging = debug all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options = $(link_options_$(version))</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compiler = wfc386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_production = /mf /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_debugging = /mf /d1 /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options = $(compile_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; include_files = $(i_dir)defs.fi $(i_dir)globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; object_files = main.obj input.obj calc.obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
output.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(object_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(msg_$(version))</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink $(link_options) @$^*</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for:&nbsp;&nbsp;&nbsp;&nbsp; $(s_dir)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) $[* $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; main.obj : $(s_dir)main.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; calc.obj : $(s_dir)calc.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; input.obj : $(s_dir)input.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; output.obj : $(s_dir)output.for $(include_files)</TT>
<BR><BR>Suppose &quot;\EXAMPLE\O\CALC.OBJ&quot; is older than &quot;\EXAMPLE\SRC\CALC.FOR&quot;.&nbsp; The lack of a command
list in the explicit rule with &quot;CALC.OBJ&quot; as a target will cause the &quot;.for.obj&quot; implicit rule to be invoked
for &quot;CALC.OBJ&quot;.&nbsp; The dependent extension &quot;.FOR&quot; has a path associated with it so the file &quot;\EXAMPLE\SRC\CALC.FOR&quot;
is found to exist.&nbsp; The commands
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wfc386 \EXAMPLE\SRC\CALC /mf /d1 /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo linking debug version ...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink debug all @plot</TT>
<BR><BR>are executed to update the necessary files.
<BR><BR>If the application requires many source files in different directories Make will search for the files using their
associated path specifications.&nbsp; For instance, if the current example files were setup as follows:
<DL>
<DT><B><I>Sub-directory</I></B>
<DD><B><I>Contents</I></B>
<DT>\EXAMPLE\INC
<DD><TT> DEFS.FI, GLOBALS.FI</TT>
<DT>\EXAMPLE\SRC\PROGRAM
<DD><TT> MAIN.FOR, CALC.FOR</TT>
<DT>\EXAMPLE\SRC\SCREEN
<DD><TT> INPUT.FOR, OUTPUT.FOR</TT>
<DT>\EXAMPLE\O
<DD><TT> PLOT.EXE, MAKEFILE, MAIN.OBJ, CALC.OBJ, INPUT.OBJ, OUTPUT.OBJ</TT>
</DL>
<BR>the makefile would be changed to:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (implicit rules)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; i_dir&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = ..\inc\&nbsp; # sub-directory with include
files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # sub-directories with FORTRAN 77 source files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; program_dir&nbsp; = ..\for\program\ # - MAIN.FOR, CALC.FOR</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; screen_dir&nbsp;&nbsp; = ..\for\screen\&nbsp; # - INPUT.FOR, OUTPUT.FOR</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; version&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = debugging&nbsp;&nbsp;&nbsp;&nbsp; # debugging version</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_production = linking production version ...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_debugging = linking debug version ...</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_production =</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_debugging = debug all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options = $(link_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compiler = wfc386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_production = /mf /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_debugging = /mf /d1 /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options = $(compile_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; include_files = $(i_dir)defs.fi $(i_dir)globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; object_files = main.obj input.obj calc.obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
output.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(object_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(msg_$(version))</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink $(link_options) @$^*</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for:&nbsp;&nbsp;&nbsp;&nbsp; $(program_dir);$(screen_dir)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) $[* $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; main.obj : $(program_dir)main.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; calc.obj : $(program_dir)calc.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; input.obj : $(screen_dir)input.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; output.obj : $(screen_dir)output.for $(include_files)</TT>
<BR><BR>Suppose that there is a change in the &quot;DEFS.FI&quot; file which causes all the source files to be recompiled.
&nbsp;The implicit rule &quot;.for.obj&quot; is invoked for every object file so the corresponding &quot;.FOR&quot; file must
be found for each &quot;.OBJ&quot; file.&nbsp; We will show where Make searches for the FORTRAN 77 source files.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; update&nbsp;&nbsp;&nbsp; main.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test&nbsp;&nbsp;&nbsp; ..\for\program\main.for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (it does exist)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; execute wfc386 ..\for\program\main /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; update&nbsp;&nbsp;&nbsp; calc.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test&nbsp;&nbsp;&nbsp; ..\for\program\calc.for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (it does exist)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; execute wfc386 ..\for\program\calc /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; update&nbsp;&nbsp;&nbsp; input.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test&nbsp;&nbsp;&nbsp; ..\for\program\input.for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;(it does not exist)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test&nbsp;&nbsp;&nbsp; ..\for\screen\input.for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (it does exist)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; execute wfc386 ..\for\screen\input /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; update&nbsp;&nbsp;&nbsp; output.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test&nbsp;&nbsp;&nbsp; ..\for\program\output.for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(it does not exist)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test&nbsp;&nbsp;&nbsp; ..\for\screen\output.for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; (it does exist)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; execute wfc386 ..\for\screen\output /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; etc.</TT>
<BR><BR>Notice that Make checked the sub-directory &quot;..\SRC\PROGRAM&quot; for the files &quot;INPUT.FOR&quot; and &quot;OUTPUT.FOR&quot;.
&nbsp;Make optionally may use a circular path specification search which may save on disk activity for large makefiles.&nbsp;
The circular path searching may be used in two different ways:
<OL>
<LI>use the command line option &quot;o&quot;
<LI>use the<TT> .OPTIMIZE</TT> directive.
</OL>
<BR>Make will retain (for each suffix) what sub-directory yielded the last successful search for a file.&nbsp; The search
for a file is resumed at this directory in the hope that wasted disk activity will be minimized.&nbsp; If the file cannot
be found in the sub-directory then Make will search the next sub-directory in the path specification (cycling to the first
sub-directory in the path specification after an unsuccessful search in the last sub-directory).
<BR><BR>Changing the previous example to include this feature, results in the following:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (optimized path searching)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .OPTIMIZE</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; i_dir&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = ..\inc\&nbsp; # sub-directory with
include files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # sub-directories with FORTRAN 77 source files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; program_dir&nbsp; = ..\for\program\ # - MAIN.FOR, CALC.FOR</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; screen_dir&nbsp;&nbsp; = ..\for\screen\&nbsp; # - INPUT.FOR, OUTPUT.FOR</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; version&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = debugging&nbsp;&nbsp;&nbsp;&nbsp; # debugging version</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_production = linking production version ...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_debugging = linking debug version ...</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_production =</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_debugging = debug all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options = $(link_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compiler = wfc386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_production = /mf /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_debugging = /mf /d1 /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options = $(compile_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; include_files = $(i_dir)defs.fi $(i_dir)globals.fi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; object_files = main.obj input.obj calc.obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
output.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(object_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(msg_$(version))</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink $(link_options) @$^*</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for:&nbsp;&nbsp;&nbsp;&nbsp; $(program_dir);$(screen_dir)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) $[* $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; main.obj : $(program_dir)main.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; calc.obj : $(program_dir)calc.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; input.obj : $(screen_dir)input.for $(include_files)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; output.obj : $(screen_dir)output.for $(include_files)</TT>
<BR><BR>Suppose again that there is a change in the &quot;DEFS.FI&quot; file which causes all the source files to be recompiled.
&nbsp;We will show where Make searches for the FORTRAN 77 source files using the optimized path specification searching.
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; update&nbsp;&nbsp;&nbsp; main.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test&nbsp;&nbsp;&nbsp; ..\for\program\main.for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (it does exist)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; execute wfc386 ..\for\program\main /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; update&nbsp;&nbsp;&nbsp; calc.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test&nbsp;&nbsp;&nbsp; ..\for\program\calc.for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (it does exist)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; execute wfc386 ..\for\program\calc /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; update&nbsp;&nbsp;&nbsp; input.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test&nbsp;&nbsp;&nbsp; ..\for\program\input.for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;(it does not exist)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test&nbsp;&nbsp;&nbsp; ..\for\screen\input.for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (it does exist)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; execute wfc386 ..\for\screen\input /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; update&nbsp;&nbsp;&nbsp; output.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test&nbsp;&nbsp;&nbsp; ..\for\screen\output.for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; (it does exist)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; execute wfc386 ..\for\screen\output /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; etc.</TT>
<BR><BR>Make did not check the sub-directory &quot;..\SRC\PROGRAM&quot; for the file &quot;OUTPUT.FOR&quot; because the last
successful attempt to find a &quot;.FOR&quot; file occurred in the &quot;..\SRC\SCREEN&quot; sub-directory.&nbsp; In this
small example, the amount of disk activity saved by Make is not substantial but the savings become much more pronounced in
larger makefiles.
<BR><BR><B><I>Hint:</I></B>&nbsp; The simple heuristic method that Make uses for optimizing path specification searches namely,
keeping track of the last successful sub-directory, is very effective in reducing the amount of disk activity during the processing
of a makefile.&nbsp; A pitfall to avoid is having two files with the same name in the path.&nbsp; The version of the file
that is used to update the target depends on the previous searches.&nbsp; Care should be taken when using files that have
the same name with path specifications.
<BR><BR>Large makefiles for projects written in FORTRAN 77 may become difficult to maintain with all the include file dependencies.
&nbsp;Ignoring include file dependencies and using implicit rules may reduce the size of the makefile while keeping most of
the functionality intact.&nbsp; The previous example may be made smaller by using this idea.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # programming example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # (no include dependencies)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .OPTIMIZE</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; i_dir&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = ..\inc\&nbsp; # sub-directory with
include files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # sub-directories with FORTRAN 77 source files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; program_dir&nbsp; = ..\for\program\ # - MAIN.FOR, CALC.FOR</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; screen_dir&nbsp;&nbsp; = ..\for\screen\&nbsp; # - INPUT.FOR, OUTPUT.FOR</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; version&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = debugging&nbsp;&nbsp;&nbsp;&nbsp; # debugging version</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_production = linking production version ...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; msg_debugging = linking debug version ...</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_production =</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options_debugging = debug all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options = $(link_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compiler = wfc386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_production = /mf /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options_debugging = /mf /d1 /warn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options = $(compile_options_$(version))</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; object_files = main.obj input.obj calc.obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
output.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(object_files)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(msg_$(version))</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink $(link_options) @$^*</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for:&nbsp;&nbsp;&nbsp;&nbsp; $(program_dir);$(screen_dir)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(compiler) $[* $(compile_options)</TT>
<BR><BR>Implicit rules are very useful in this regard providing you are aware that you have to make up for the information
that is missing from the makefile.&nbsp; In the case of FORTRAN 77 programs, you must ensure that you force Make to compile
any programs affected by changes in include files.&nbsp; Forcing Make to compile programs may be done by touching source files
(not recommended), deleting object files, or using the &quot;a&quot; option and targets on the command line.&nbsp; Here is
how the files &quot;INPUT.OBJ&quot; and &quot;MAIN.OBJ&quot; may be recompiled if a change in some include file affects both
files.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; del input.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; del main.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake</TT>
<BR><BR>or using the &quot;a&quot; option
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake /a input.obj main.obj</TT>
<BR><BR>The possibility of introducing bugs into programs is present when using this makefile technique because it does not
protect the programmer completely from object modules becoming out-of-date.&nbsp; The use of implicit rules without header
file dependencies is a viable makefile technique but it is not without its pitfalls.
<H2 ID="Double_Colon_Explicit_Rules"> Double Colon Explicit Rules </H2>
<BR>Single colon &quot;:&quot; explicit rules are useful in many makefile applications.&nbsp; However, the single colon rule
has certain restrictions that make it difficult to express more complex dependency relationships.&nbsp; The restrictions imposed
on single colon &quot;:&quot; explicit rules are:
<OL>
<LI>only one command list is allowed for each target
<LI>after the command list is executed, the target is considered up to date
</OL>
<BR>The first restriction becomes evident when you want to update a target in different ways (i.e., when the target is out
of date with respect to different dependents).&nbsp; The double colon explicit rule removes this restriction.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # multiple command lists</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; target1 :: dependent1 dependent2</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; command1</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; target1 :: dependent3 dependent4</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; command2</TT>
<BR><BR>Notice that if &quot;target1&quot; is out of date with respect to either &quot;dependent1&quot; or &quot;dependent2&quot;
then &quot;command1&quot; will be executed.&nbsp; The double colon &quot;::&quot; explicit rule does not consider the target
(in this case &quot;target1&quot;) up to date after the command list is executed.&nbsp; Make will continue to attempt to update
&quot;target1&quot;.&nbsp; Afterwards &quot;command2&quot; will be executed if &quot;target1&quot; is out of date with respect
to either &quot;dependent3&quot; or &quot;dependent4&quot;.&nbsp; It is possible that both &quot;command1&quot; and &quot;command2&quot;
will be executed.&nbsp; As a result of the target not being considered up to date, an implicit rule search will be conducted
on &quot;target1&quot; also.&nbsp; Make will process the double colon &quot;::&quot; explicit rules in the order that they
are encountered in the makefile.
<H2 ID="Preprocessing_Directives"> Preprocessing Directives </H2>
<BR>One of the primary objectives in using a make utility is to improve the development and maintenance of projects.&nbsp;
A programming project consisting of many makefiles in different sub-directories may become unwieldy to maintain.&nbsp; The
maintenance problem stems from the amount of duplicated information scattered throughout the project makefiles.&nbsp; Make
provides a method to reduce the amount of duplicated information present in makefiles.&nbsp; Preprocessing directives provide
the capability for different makefiles to make use of common information.
<H3 ID="File_Inclusion"> File Inclusion </H3>
<BR>A common solution to the &quot;duplicated information&quot; problem involves referencing text contained in one file from
many different files.&nbsp; Make supports file inclusion with the<TT> !include</TT> preprocessing directive.&nbsp; The development
of object libraries, using 16-bit Open Watcom FORTRAN 77, for the different 80x86 16-bit memory models provides an ideal example
to illustrate the use of the<TT> !include</TT> preprocessing directive.
<DL>
<DT><B><I>Sub-directory</I></B>
<DD><B><I>Contents</I></B>
<DT>\WINDOW
<DD><TT> WINDOW.CMD, WINDOW.MIF</TT>
<DT>\WINDOW\INC
<DD><TT> PROTO.FI, GLOBALS.FI, BIOS_DEF.FI</TT>
<DT>\WINDOW\SRC
<DD><TT> WINDOW.FOR, KEYBOARD.FOR, MOUSE.FOR, BIOS.FOR</TT>
<DT>\WINDOW\BCSD
<DD>medium model object files,<TT> MAKEFILE, WINDOW_M.LIB</TT>
<DT>\WINDOW\BCBD
<DD>large model object files,<TT> MAKEFILE, WINDOW_L.LIB</TT>
<DT>\WINDOW\BCHD
<DD>huge model object files,<TT> MAKEFILE, WINDOW_L.LIB</TT>
</DL>
<BR>The WLIB command file &quot;WINDOW.CMD&quot; contains the list of library operations required to build the libraries.
&nbsp;The contents of &quot;WINDOW.CMD&quot; are:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; -+window</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; -+bios</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; -+keyboard</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; -+mouse</TT>
<BR><BR>The &quot;-+&quot; library manager command indicates to WLIB that the object file should be replaced in the library.
<BR><BR>The file &quot;WINDOW.MIF&quot; contains the makefile declarations that are common to every memory model.&nbsp; The
&quot;.MIF&quot; extension will be used for all the Make Include Files discussed in this manual.&nbsp; This extension is also
in the default extension list so it is a recommended extension for Make include files.&nbsp; The contents of the &quot;WINDOW.MIF&quot;
file is as follows:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # example of a Make Include File</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; common = /d1 /warn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # common options</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; objs = window.obj bios.obj keyboard.obj mouse.obj</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for: ..\src</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .for.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wfc $[* $(common) $(local) /m$(model)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; window_$(model).lib : $(objs)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlib window_$(model) @..\window</TT>
<BR><BR>The macros &quot;model&quot; and &quot;local&quot; are defined by the file &quot;MAKEFILE&quot; in each object directory.
&nbsp;An example of the file &quot;MAKEFILE&quot; in the medium memory model object directory is:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # !include example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; model = m&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # memory model required</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; local =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # memory model specific
options</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !include ..\window.mif</TT>
<BR><BR>Notice that changes that affect all the memory models may be made in one file, namely &quot;WINDOW.MIF&quot;.&nbsp;
Any changes that are specific to a memory model may be made to the &quot;MAKEFILE&quot; in the object directory.&nbsp; To
update the medium memory model library, the following commands may be executed:&nbsp; 
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;cd \window\bcsd</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wmake</TT>
<BR><BR>A DOS &quot;.BAT&quot; or OS/2 &quot;.CMD&quot; file may be used to update all the different memory models.&nbsp;
If the following DOS &quot;MAKEALL.BAT&quot; (OS/2 &quot;MAKEALL.CMD&quot;) file is located somewhere in the &quot;PATH&quot;,
we may update all the libraries.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; cd \window\bcsd</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake %1 %2 %3 %4 %5 %6 %7 %8 %9</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; cd \window\bcbd</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake %1 %2 %3 %4 %5 %6 %7 %8 %9</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; cd \window\bchd</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wmake %1 %2 %3 %4 %5 %6 %7 %8 %9</TT>
<BR><BR>The batch file parameters are useful if you want to specify options to Make.&nbsp; For instance, a global recompile
may be done by executing:&nbsp; 
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;makeall /a</TT>
<BR><BR>The<TT> !include</TT> preprocessing directive is a good way to partition common information so that it may be maintained
easily.
<BR><BR>Another use of the<TT> !include</TT> involves program generated makefile information.&nbsp; For instance, if we have
a program called &quot;WMKMK&quot; that will search through source files and generate a file called &quot;WMKMK.MIF&quot;
that contains:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # program generated makefile information</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FOR_to_OBJ = $(compiler) $[* $(compile_options)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; OBJECTS = WINDOW.OBJ BIOS.OBJ KEYBOARD.OBJ MOUSE.OBJ</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WINDOW.OBJ : ..\SRC\WINDOW.FOR ..\INC\PROTO.FI ..\INC\GLOBALS.FI</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(FOR_to_OBJ)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; BIOS.OBJ : ..\SRC\BIOS.FOR ..\INC\BIOS_DEF.FI ..\INC\GLOBALS.FI</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(FOR_to_OBJ)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; KEYBOARD.OBJ : ..\SRC\KEYBOARD.FOR ..\INC\PROTO.FI ..\INC\GLOBALS.FI</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(FOR_to_OBJ)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; MOUSE.OBJ : ..\SRC\MOUSE.FOR ..\INC\PROTO.FI ..\INC\GLOBALS.FI</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(FOR_to_OBJ)</TT>
<BR><BR>In order to use this program generated makefile information, we use a &quot;MAKEFILE&quot; containing:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # makefile that makes use of generated makefile information</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options = /mf /d1 /warn</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; first_target : window.lib .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo done</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !include wmkmk.mif</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; window.lib : $(OBJECTS)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlib window $(OBJECTS)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; make : .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wmkmk /r ..\src\*.for+..\inc</TT>
<BR><BR>Notice that there is a symbolic target &quot;first_target&quot; that is used as a &quot;place holder&quot;.&nbsp;
The default behaviour for Make is to &quot;make&quot; the first target encountered in the makefile.&nbsp; The symbolic target
&quot;first_target&quot; ensures that we have control over what file will be updated first (in this case &quot;WINDOW.LIB&quot;).
&nbsp;The use of the<TT> !include</TT> preprocessing directive simplifies the use of program generated makefile information
because any changes are localized to the file &quot;MAKEFILE&quot;.&nbsp; As program development continues, the file &quot;WMKMK.MIF&quot;
may be regenerated so that subsequent invocations of WMAKE benefit from the new makefile information.&nbsp; The file &quot;MAKEFILE&quot;
even contains the command to regenerate the file &quot;WMKMK.MIF&quot;.&nbsp; The symbolic target &quot;make&quot; has an
associated command list that will regenerate the file &quot;WMKMK.MIF&quot;.&nbsp; The command list can be executed by typing
the following command:&nbsp; 
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wmake make</TT>
<BR><BR>The use of the<TT> !include</TT> preprocessing directive is a simple way to reduce maintenance of related makefiles.
<BR><BR><B><I>Hint:</I></B>&nbsp; Macros are expanded on<TT> !include</TT> preprocessor control lines.&nbsp; This allows many
benefits like:
<BR><BR><B>!include $(%env_var)</B>
<BR><BR>so that the files that Make will process can be controlled through many different avenues like internal macros, command
line macros, and environment variables.
<BR><BR>Another way to access files is through the suffix path feature of Make.&nbsp; A definition like
<BR><BR><B>.mif :&nbsp; c:\mymifs;d:\some\more\mifs</B>
<BR><BR>will cause Make to search different paths for any make include files.
<H3 ID="Conditional_Processing"> Conditional Processing </H3>
<BR>Open Watcom Make has conditional preprocessing directives available that allow different declarations to be processed.
&nbsp;The conditional preprocessing directives allow the makefile to
<OL>
<LI>check whether a macro is defined, and
<LI>check whether a macro has a certain value.
</OL>
<BR>The macros that can be checked include
<OL>
<LI>normal macros &quot;$(&lt;macro_identifier&gt;)&quot;
<LI>environment macros &quot;$(%&lt;environment_var&gt;)&quot;
</OL>
<BR>The conditional preprocessing directives allow a makefile to adapt to different external conditions based on the values
of macros or environment variables.&nbsp; We can define macros on the WMAKE command line as shown in the following example.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wmake &quot;macro=some text with spaces in it&quot;</TT>
<BR><BR>Alternatively, we can include a makefile that defines the macros if all the macros cannot fit on the command line.
&nbsp;This is shown in the following example:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wmake /f macdef.mif /f makefile</TT>
<BR><BR>Also, environment variables can be set before WMAKE is invoked.&nbsp; This is shown in the following example:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;set macro=some text with spaces in it</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wmake</TT>
<BR><BR>Now that we know how to convey information to Make through either macros or environment variables, we will look at
how this information can be used to influence makefile processing.
<BR><BR>Make has conditional preprocessing directives that are similar to the C preprocessor directives.&nbsp; Make supports
these preprocessor directives:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifeq</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifneq</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifeqi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifneqi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifdef</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifndef</TT>
<BR><BR>along with
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !else</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><BR>Together these preprocessor directives allow selection of makefile declarations to be based on either the value or
the existence of a macro.
<BR><BR>Environment variables can be checked by using an environment variable name prefixed with a &quot;%&quot;.&nbsp; A
common use of a conditional preprocessing directive involves setting environment variables.&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # setting an environment variable</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifndef %lib</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .BEFORE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set lib=c:\watcom\lib386\dos</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><BR>If you are writing portable applications, you might want to have:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # checking a macro</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !include version.mif</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifdef OS2</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; machine = /2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # compile for 286</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !else</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; machine = /0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # default: 8086</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><BR>The<TT> !ifdef</TT> (&quot;if defined&quot;) and<TT> !ifndef</TT> (&quot;if not defined&quot;) conditional preprocessing
directives are useful for checking boolean conditions.&nbsp; In other words, the<TT> !ifdef</TT> and<TT> !ifndef</TT> are
useful for &quot;yes-no&quot; conditions.&nbsp; There are instances where it would be useful to check a macro against a value.
&nbsp;In order to use the value checking preprocessor directives, we must know the exact value of a macro.&nbsp; A macro definition
is of the form:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; &lt;macro_identifier&gt; = &lt;text&gt; &lt;comment&gt;</TT>
<BR><BR>Make will first strip any comment off the line.&nbsp; The macro definition will then be the text following the equal
&quot;=&quot; sign with leading and trailing blanks removed.&nbsp; Initially this might not seem like a sensible way to define
a macro but it does lend itself well to defining macros that are common in makefiles.&nbsp; For instance, it allows definitions
like:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # sample macro definitions</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; link_options&nbsp;&nbsp;&nbsp; = debug line&nbsp;&nbsp; # line number debugging</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compile_options = /d1 /nostack # line numbers, no stack checking</TT>
<BR><BR>These definitions are both readable and useful.&nbsp; A makefile can handle differences between compilers with the<TT>
!ifeq, !ifneq, !ifeqi</TT> and<TT> !ifneqi</TT> conditional preprocessing directives.&nbsp; The first two perform case sensitive
comparisons while the last two perform case insensitive comparisons.&nbsp; One way of setting up adaptive makefiles is:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # options made simple</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; compiler&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = wfc386</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; stack_overflow&nbsp; = No&nbsp;&nbsp; # yes -&gt; check for stack overflow</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; line_info&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Yes&nbsp; # yes -&gt; generate line numbers</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifeq compiler wfc386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifneqi stack_overflow&nbsp;&nbsp; yes</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; stack_option&nbsp;&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /nostack</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifeqi line_info&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yes</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; line_option&nbsp;&nbsp;&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /d1</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifeq compiler fl32</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifeqi stack_overflow&nbsp;&nbsp;&nbsp; yes</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; stack_option&nbsp;&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -Ge</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifeqi line_info&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yes</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; line_option&nbsp;&nbsp;&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -Zd</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # make sure the macros are defined</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifndef stack_option</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; stack_option&nbsp;&nbsp;&nbsp; =</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifndef line_option</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; line_option&nbsp;&nbsp;&nbsp; =</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; example : .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $(compiler) $(stack_option) $(line_option)</TT>
<BR><BR>The conditional preprocessing directives can be very useful to hide differences, exploit similarities, and organize
declarations for applications that use many different programs.
<BR><BR>Another directive is the<TT> !define</TT> directive.&nbsp; This directive is equivalent to the normal type of macro
definition (i.e., macro = text) but will make C programmers feel more at home.&nbsp; One important distinction is that the<TT>
!define</TT> preprocessor directive may be used to reflect the logical structure of macro definitions in conditional processing.
&nbsp;For instance, the previous makefile could have been written in this style:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifndef stack_option</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; define stack_option</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifndef line_option</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; define line_option</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><BR>The &quot;!&quot; character must be in the first column but the directive keyword can be indented.&nbsp; This freedom
applies to all of the preprocessing directives.&nbsp; The<TT> !else</TT> preprocessing directive benefits from this type of
style because<TT> !else</TT> can also check conditions like:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !else ifeq</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !else ifneq</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !else ifeqi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !else ifneqi</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !else ifdef</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !else ifndef</TT>
<BR><BR>so that logical structures like:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifdef %version</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; ifeq %version debugging</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp;&nbsp;&nbsp; define option debug all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; else ifeq %version beta</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp;&nbsp;&nbsp; define option debug line</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; else ifeq %version production</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp;&nbsp;&nbsp; define option debug</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; else</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp;&nbsp;&nbsp; error invalid value in VERSION</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; endif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><BR>can be used.&nbsp; The above example checks the environment variable &quot;VERSION&quot; for three possible values
and acts accordingly.
<BR><BR>Another derivative from the C language preprocessor is the<TT> !error</TT> directive which has the form of
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !error &lt;text&gt;</TT>
<BR><BR>in Make.&nbsp; This directive will print out the text and terminate processing of the makefile.&nbsp; It is very useful
in preventing errors from macros that are not defined properly.&nbsp; Here is an example of the<TT> !error</TT> preprocessing
directive.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifndef stack_option</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; error stack_option is not defined</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifndef line_option</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; error line_option is not defined</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><BR>There is one more directive that can be used in a makefile.&nbsp; The<TT> !undef</TT> preprocessing directive will
clear a macro definition.&nbsp; The<TT> !undef</TT> preprocessing directive has the form:
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !undef &lt;macro_identifier&gt;</TT>
<BR><BR>The macro identifier can represent a normal macro or an environment variable.&nbsp; A macro can be cleared after it
is no longer needed.&nbsp; Clearing a macro will reduce the memory requirements for a makefile.&nbsp; If the macro identifier
represents an environment variable (i.e., the identifier has a &quot;%&quot; prefix) then the environment variable will be
deleted from the current environment.&nbsp; The<TT> !undef</TT> preprocessing directive is useful for deleting environment
variables and reducing the amount of internal memory required during makefile processing.
<H3 ID="Loading_Dynamic_Link_Libraries"> Loading Dynamic Link Libraries </H3>
<BR>Open Watcom Make supports loading of Dynamic Link Library (DLL) versions of Open Watcom software through the use of the<TT>
!loaddll</TT> preprocessing directive.&nbsp; This support is available on Win32 and 32-bit OS/2 platforms.&nbsp; Performance
is greatly improved by avoiding a reload of the software for each file to be processed.&nbsp; The syntax of the<TT> !loaddll</TT>
preprocessing directive is:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !loaddll $(exename) $(dllname)</TT>
<BR><BR>where<TT> $(exename)</TT> is the command name used in the makefile and<TT> $(dllname)</TT> is the name of the DLL
to be loaded and executed in its place.&nbsp; For example, consider the following makefile which contains a list of commands
and their corresponding DLL versions.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # Default compilation macros for sample programs</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # Compile switches that are enabled</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CFLAGS&nbsp; = -d1</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = wpp386 $(CFLAGS)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; LFLAGS&nbsp; = DEBUG ALL</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; LINK&nbsp;&nbsp;&nbsp; = wlink&nbsp; $(LFLAGS)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifdef __LOADDLL__</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; loaddll wcc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wccd</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; loaddll wccaxp&nbsp;&nbsp; wccdaxp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; loaddll wcc386&nbsp;&nbsp; wccd386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; loaddll wpp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wppdi86</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; loaddll wppaxp&nbsp;&nbsp; wppdaxp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; loaddll wpp386&nbsp;&nbsp; wppd386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; loaddll wlink&nbsp;&nbsp;&nbsp; wlinkd</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp; loaddll wlib&nbsp;&nbsp;&nbsp;&nbsp; wlibd</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .c.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(CC) $*.c</TT>
<BR><BR>The<TT> __LOADDLL__</TT> symbol is defined for versions of Open Watcom Make that support the<TT> !loaddll</TT> preprocessing
directive.&nbsp; The<TT> !ifdef __LOADDLL__</TT> construct ensures that the makefile can be processed by an older version
of Open Watcom Make.
<BR><BR>Make will look up the<TT> wpp386</TT> command in its DLL load table and find a match.&nbsp; It will then attempt to
load the corresponding DLL (i.e.,<TT> wppd386.dll</TT>) and pass it the command line for processing.&nbsp; The lookup is case
insensitive but must match in all other respects.&nbsp; For example, if a path is included with the command name then the
same path must be specified in the<TT> !loaddll</TT> preprocessing directive.&nbsp; This problem can be avoided through the
use of macros as illustrated below.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # Default compilation macros for sample programs</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # Compile switches&nbsp; that are enabled</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; cc286&nbsp;&nbsp; = wpp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; cc286d&nbsp; = wppdi86</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; cc386&nbsp;&nbsp; = wpp386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; cc386d&nbsp; = wppd386</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; linker&nbsp; = wlink</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; linkerd = wlinkd</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CFLAGS&nbsp; = -d1</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $(cc386) $(CFLAGS)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; LFLAGS&nbsp; = DEBUG ALL</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; LINK&nbsp;&nbsp;&nbsp; = wlink&nbsp; $(LFLAGS)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !ifdef __LOADDLL__</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !loaddll $(cc286)&nbsp;&nbsp; $(cc286d)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !loaddll $(cc386)&nbsp;&nbsp; $(cc386d)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !loaddll $(linker)&nbsp; $(linkerd)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !endif</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .c.obj:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(CC) $*.c</TT>
<BR><BR>A path and/or extension may be specified with the DLL name if desired.
<H2 ID="Command_List_Directives"> Command List Directives </H2>
<BR>Open Watcom Make supports special directives that provide command lists for different purposes.&nbsp; If a command list
cannot be found while updating a target then the directive<TT> .DEFAULT</TT> may be used to provide one.&nbsp; A simple<TT>
.DEFAULT</TT> command list which makes the target appear to be updated is:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .DEFAULT</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wtouch $^@</TT>
<BR><BR>The Open Watcom Touch utility sets the time-stamp on the file to the current time.&nbsp; The effect of the above rule
will be to &quot;update&quot; the file without altering its contents.&nbsp; 
<BR><BR>In some applications it is necessary to execute some commands before any other commands are executed and likewise
it is useful to be able to execute some commands after all other commands are executed.&nbsp; Make supports this capability
by checking to see if the<TT> .BEFORE</TT> and<TT> .AFTER</TT> directives have been used.&nbsp; If the<TT> .BEFORE</TT> directive
has been used, the<TT> .BEFORE</TT> command list is executed before any commands are executed.&nbsp; Similarly the<TT> .AFTER</TT>
command list is executed after processing is finished.&nbsp; It is important to note that if all the files are up to date
and no commands must be executed, the<TT> .BEFORE</TT> and<TT> .AFTER</TT> command lists are never executed.&nbsp; If some
commands are executed to update targets and errors are detected (non-zero return status, macro expansion errors), the<TT>
.AFTER</TT> command list is not executed (the<TT> .ERROR</TT> directive supplies a command list for error conditions and is
discussed in this section).&nbsp; These two directives may be used for maintenance as illustrated in the following example:
&nbsp;
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .BEFORE and .AFTER example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .BEFORE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo .BEFORE command list executed</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .AFTER</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo .AFTER command list executed</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # rest of makefile follows</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .</TT>
<BR><BR>If all the targets in the makefile are up to date then neither the<TT> .BEFORE</TT> nor the<TT> .AFTER</TT> command
lists will be executed.&nbsp; If any of the targets are not up to date then before any commands to update the target are executed,
the<TT> .BEFORE</TT> command list will be executed.&nbsp; The<TT> .AFTER</TT> command list will be executed only if there
were no errors detected during the updating of the targets.&nbsp; The<TT> .BEFORE, .DEFAULT,</TT> and<TT> .AFTER</TT> command
list directives provide the capability to execute commands before, during, and after the makefile processing.&nbsp; 
<BR><BR>Make also supports the<TT> .ERROR</TT> directive.&nbsp; The<TT> .ERROR</TT> directive supplies a command list to be
executed if an error occurs during the updating of a target.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # .ERROR example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .ERROR</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; beep</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # rest of makefile follows</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .</TT>
<BR><BR>The above makefile will audibly signal you that an error has occurred during the makefile processing.&nbsp; If any
errors occur during the<TT> .ERROR</TT> command list execution, makefile processing is terminated.
<H2 ID="MAKEINIT_File"> MAKEINIT File </H2>
<BR>As you become proficient at using Open Watcom Make, you will probably want to isolate common makefile declarations so
that there is less duplication among different makefiles.&nbsp; Make will search for a file called &quot;MAKEINIT&quot; (or
&quot;TOOLS.INI&quot; when the &quot;ms&quot; option is set) and process it before any other makefiles.&nbsp; The search for
the &quot;MAKEINIT&quot; file will occur along the current &quot;PATH&quot;.&nbsp; If the file &quot;MAKEINIT&quot; is not
found, processing continues without any errors.&nbsp; By default, Make defines a set of data described at the &quot;r&quot;
option.&nbsp; The use of a &quot;MAKEINIT&quot; file will allow you to reuse common declarations and will result in simpler,
more maintainable makefiles.
<H2 ID="Command_List_Execution"> Command List Execution </H2>
<BR>Open Watcom Make is a program which must execute other programs and operating system shell commands.&nbsp; There are three
basic types of executable files in DOS.
<OL>
<LI><TT> .COM</TT> files
<LI><TT> .EXE</TT> files
<LI><TT> .BAT</TT> files
</OL>
<BR>There are two basic types of executable files in Windows NT.
<OL>
<LI><TT> .EXE</TT> files
<LI><TT> .BAT</TT> files
</OL>
<BR>There are two basic types of executable files in OS/2.
<OL>
<LI><TT> .EXE</TT> files
<LI><TT> .CMD</TT> files
</OL>
<BR>The<TT> .COM</TT> and<TT> .EXE</TT> files may be loaded into memory and executed.&nbsp; The<TT> .BAT</TT> files must be
executed by the DOS command processor or shell, &quot;COMMAND.COM&quot;.&nbsp; The<TT> .CMD</TT> files must be executed by
the OS/2 command processor or shell, &quot;CMD.EXE&quot; Make will search along the &quot;PATH&quot; for the command and depending
on the file extension the file will be executed in the proper manner.
<BR><BR>If Make detects any input or output redirection characters (these are &quot;&gt;&quot;, &quot;&lt;&quot;, and &quot;|&quot;)
in the command, it will be executed by the shell.
<BR><BR>Under DOS, an asterisk prefix (*) will cause Make to examine the length of the command argument.&nbsp; If it is too
long (&gt; 126 characters), it will take the command argument and stuff it into a temporary environment variable and then
execute the command with &quot;@env_var&quot; as its argument.&nbsp; Suppose the following sample makefile fragment contained
a very long command line argument.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # Asterisk example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *foo myfile /a /b /c ... /x /y /z</TT>
<BR><BR>Make will perform something logically similar to the following steps.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set TEMPVAR001=myfile /a /b /c ... /x /y /z</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foo @TEMPVAR001</TT>
<BR><BR>The command must, of course, support the &quot;@env_var&quot; syntax.&nbsp; Typically, DOS commands do not support
this syntax but many of the Open Watcom tools do.
<BR><BR>The exclamation mark prefix (!) will force a command to be executed by the shell.&nbsp; Also, the command will be
executed by the shell if the command is an internal shell command from the following list:
<DL>
<DT>break
<DD>(check for Ctrl+Break)
<DT>call
<DD>(nest batch files)
<DT>chdir
<DD>(change current directory)
<DT>cd
<DD>(change current directory)
<DT>cls
<DD>(clear the screen)
<DT>cmd
<DD>(start NT or OS/2 command processor)
<DT>command
<DD>(start DOS command processor)
<DT>copy
<DD>(copy or combine files)
<DT>ctty
<DD>(DOS redirect input/output to COM port)
<DT>d:
<DD>(change drive where &quot;d&quot; represents a drive specifier)
<DT>date
<DD>(set system date)
<DT>del
<DD>(erase files)
<DT>dir
<DD>(display contents in a directory)
<DT>echo
<DD>(display commands as they are processed)
<DT>erase
<DD>(erase files)
<DT>for
<DD>(repetitively process commands, intercepted by WMAKE)
<DT>if
<DD>(allow conditional processing of commands)
<DT>md
<DD>(make directory)
<DT>mkdir
<DD>(make directory, intercepted by WMAKE)
<DT>path
<DD>(set search path)
<DT>pause
<DD>(suspend batch operations)
<DT>prompt
<DD>(change command prompt)
<DT>ren
<DD>(rename files)
<DT>rename
<DD>(rename files)
<DT>rmdir
<DD>(remove directory, intercepted by WMAKE)
<DT>rd
<DD>(remove directory)
<DT>rm
<DD>(erase files or directories, intercepted by WMAKE)
<DT>set
<DD>(set environment variables, intercepted by WMAKE)
<DT>time
<DD>(set system time)
<DT>type
<DD>(display contents of a file)
<DT>ver
<DD>(display the operating system version number)
<DT>verify
<DD>(set data verification)
<DT>vol
<DD>(display disk volume label)
</DL>
<BR>The operating system shell &quot;SET&quot; command is intercepted by Make.&nbsp; The &quot;SET&quot; command may be used
to set environment variables to values required during makefile processing.&nbsp; The environment variable changes are only
valid during makefile processing and do not affect the values that were in effect before Make was invoked.&nbsp; The &quot;SET&quot;
command may be used to initialize environment variables necessary for the makefile commands to execute properly.&nbsp; The
setting of environment variables in makefiles reduces the number of &quot;SET&quot; commands required in the system initialization
file.&nbsp; Here is an example with the Open Watcom F77 compiler.&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # SET example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .BEFORE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set finclude=c:\special\inc;$(%finclude)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set lib=c:\watcom\lib386\dos</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # rest of makefile follows</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .</TT>
<BR><BR>The first &quot;SET&quot; command will set up the<B> FINCLUDE</B> environment variable so that the Open Watcom F77
compiler may find header files.&nbsp; Notice that the old value of the<B> FINCLUDE</B> environment variable is used in setting
the new value.
<BR><BR>The second &quot;SET&quot; command indicates to the Open Watcom Linker that libraries may be found in the indicated
directories.
<BR><BR>Environment variables may be used also as dynamic variables that may communicate information between different parts
of the makefile.&nbsp; An example of communication within a makefile is illustrated in the following example.&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # internal makefile communication</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .BEFORE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set message=message text 1</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo *$(%message)*</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set message=</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo *$(%message)*</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; .example : another_target .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo *$(%message)*</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; another_target : .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set message=message text 2</TT>
<BR><BR>The output of the previous makefile would be:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; (command output only)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; *message text 1*</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; **</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; *message text 2*</TT>
<BR><BR>Make handles the &quot;SET&quot; command so that it appears to work in an intuitive manner similar to the operating
system shell's &quot;SET&quot; command.&nbsp; The &quot;SET&quot; command also may be used to allow commands to relay information
to commands that are executed afterwards.
<BR>The DOS &quot;FOR&quot; command is intercepted by Make.&nbsp; The reason for this is that DOS has a fixed limit for the
size of a command thus making it unusable for large makefile applications.&nbsp; One such application that can be done easily
with Make is the construction of a WLINK command file from a makefile.&nbsp; The idea behind the next example is to have one
file that contains the list of object files.&nbsp; Anytime this file is changed, say, after a new module has been added, a
new linker command file will be generated which in turn, will cause the linker to relink the executable.&nbsp; First we need
the makefile to define the list of object files, this file is &quot;OBJDEF.MIF&quot; and it declares a macro &quot;objs&quot;
which has as its value the list of object files in the application.&nbsp; The content of the &quot;OBJDEF.MIF&quot; file is:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # list of object files</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; objs = &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; window.obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bios.obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; keyboard.obj &amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mouse.obj</TT>
<BR><BR>The main makefile (&quot;MAKEFILE&quot;) is:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # FOR command example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !include objdef.mif</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(objs) plot.lnk</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink @plot</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.lnk : objdef.mif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo NAME $^&amp; &gt;$^@</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo DEBUG all &gt;&gt;$^@</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for %i in ($(objs)) do echo FILE %i &gt;&gt;$^@</TT>
<BR><BR>This makefile would produce a file &quot;PLOT.LNK&quot; automatically whenever the list of object files is changed
(anytime &quot;OBJDEF.MIF&quot; is changed).&nbsp; For the above example, the file &quot;PLOT.LNK&quot; would contain:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; NAME plot</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; DEBUG all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FILE window.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FILE bios.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FILE keyboard.obj</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FILE mouse.obj</TT>
<BR><BR>The commands &quot;rm&quot;, &quot;mkdir&quot; and &quot;rmdir&quot; are intercepted by Make to handle file/directory
names consistently with other Make commands (LFN, forward/backward slashes).&nbsp; If you want to use host OS native versions
then simply use '!' character in front of these commands.
<BR><BR>The &quot;rm&quot; command is simplified implementation of the POSIX rm command.&nbsp; It supports following options.
<DL>
<DT>-f
<DD>force deletion of read-only files, no diagnostics messages about missing items
<DT>-r
<DD>deletion of directories
<DT>-v
<DD>verbose operation
</DL>
<BR>The &quot;mkdir&quot; command is simplified implementation of the POSIX &quot;mkdir&quot; command.&nbsp; It supports following
options.
<DL>
<DT>-p
<DD>force creation of all parent directories
</DL>
<BR>The &quot;rmdir&quot; command is is simplified implementation of the POSIX &quot;rmdir&quot; command.
<BR><BR>Make supports nine internal commands:
<OL>
<LI><TT> %abort</TT>
<LI><TT> %append</TT>
<LI><TT> %create</TT>
<LI><TT> %erase</TT>
<LI><TT> %make</TT>
<LI><TT> %null</TT>
<LI><TT> %quit</TT>
<LI><TT> %stop</TT>
<LI><TT> %write</TT>
</OL>
<BR>The<TT> %abort</TT> and<TT> %quit</TT> internal commands terminate execution of Make and return to the operating system
shell:<TT>&nbsp; %abort</TT> sets a non-zero exit code;<TT> %quit</TT> sets a zero exit code.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # %abort and %quit example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; done_enough :</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %quit</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; suicide :</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %abort</TT>
<BR><BR>The<TT> %append, %create, %erase,</TT> and<TT> %write</TT> internal commands allow WMAKE to generate files under makefile
control.&nbsp; This is useful for files that have contents that depend on makefile contents.&nbsp; Through the use of macros
and the &quot;for&quot; command, Make becomes a very powerful tool in maintaining lists of files for other programs.
<BR><BR>The<TT> %append</TT> internal command appends a text line to the end of a file (which is created if absent) while
the<TT> %write</TT> internal command creates or truncates a file and writes one line of text into it.&nbsp; Both commands
have the same form, namely:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; %append &lt;file&gt; &lt;text&gt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; %write &lt;file&gt; &lt;text&gt;</TT>
<BR><BR>where<TT> &lt;file&gt;</TT> is a file specification and<TT> &lt;text&gt;</TT> is arbitrary text.
<BR><BR>The<TT> %create</TT> internal command will create or truncate a file so that the file does not contain any text while
the<TT> %erase</TT> internal command will delete a file.&nbsp; Both commands have the same form, namely:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; %create &lt;file&gt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; %erase &lt;file&gt;</TT>
<BR><BR>where<TT> &lt;file&gt;</TT> is a file specification.
<BR><BR>Full macro processing is performed on these internal commands so the full power of WMAKE can be used.&nbsp; The following
example illustrates a common use of these internal commands.&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # %append, %create, %erase, and %write example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !include objdef.mif</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(objs) plot.lnk</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink @plot</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.lnk : objdef.mif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %create $^@</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %append $^@ NAME $^&amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Next line equivalent to previous two lines.</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %create $^@ NAME $^&amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %append $^@ DEBUG all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for %i in ($(objs)) do %append $^@ FILE %i</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; clean : .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %erase plot.lnk</TT>
<BR><BR>The above code demonstrates a valuable technique that can generate directive files for WLINK, WLIB, and other utilities.
<BR><BR>The<TT> %make</TT> internal command permits the updating of a specific target and has the form:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; %make &lt;target&gt;</TT>
<BR><BR>where<TT> &lt;target&gt;</TT> is a target in the makefile.&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # %make example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !include objdef.mif</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(objs)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %make plot.lnk</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink @plot</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.lnk : objdef.mif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %create $^@</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %append $^@ NAME $^&amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %append $^@ DEBUG all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for %i in ($(objs)) do %append $^@ FILE %i</TT>
<BR><BR>There seem to be other ways of doing the same thing.&nbsp; Among them is putting plot.lnk into the list of dependencies:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # %make counter-example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !include objdef.mif</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(objs) plot.lnk</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink @plot</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.lnk : objdef.mif</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %create $^@</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %append $^@ NAME $^&amp;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %append $^@ DEBUG all</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for %i in ($(objs)) do %append $^@ FILE %i</TT>
<BR><BR>and using a make variable:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # %make counter-example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; !include objdef.mif</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; plot.exe : $(objs)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wlink NAME $^&amp; DEBUG all FILE { $(objs)
}</TT>
<BR><BR>The<TT> %null</TT> internal command does absolutely nothing.&nbsp; It is useful because Make demands that a command
list be present whenever a target is updated.&nbsp; 
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # %null example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; all : application1 application2 .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %null</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; application1 : appl1.exe .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %null</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; application2 : appl2.exe .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %null</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; appl1.exe : (dependents ...)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (commands)</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; appl2.exe : (dependents ...)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (commands)</TT>
<BR><BR>Through the use of the<TT> %null</TT> internal command, multiple application makefiles may be produced that are quite
readable and maintainable.
<BR><BR>The<TT> %stop</TT> internal command will temporarily suspend makefile processing and print out a message asking whether
Makefile processing should continue.&nbsp; Make will wait for either the &quot;y&quot; key (indicating that the Makefile processing
should continue) or the &quot;n&quot; key.&nbsp; If the &quot;n&quot; key is pressed, makefile processing will stop.&nbsp;
The<TT> %stop</TT> internal command is very useful for debugging makefiles but it may be used also to develop interactive
makefiles.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; # %stop example</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; all : appl1.exe .SYMBOLIC</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %null</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; appl1.exe : (dependents ...)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @echo Are you feeling lucky? Punk!</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @%stop</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (commands)</TT>
<H2 ID="Compatibility_Between_Open_Watcom_Make_and_UNIX_Make"> Compatibility Between Open Watcom Make and UNIX Make </H2>
<BR>Open Watcom Make was originally based on the UNIX Make utility.&nbsp; The PC's operating environment presents a base of
users which may or may not be familiar with the UNIX operating system.&nbsp; Make is designed to be a PC product with some
UNIX compatibility.&nbsp; The line continuation in UNIX Make is a backslash (&quot;\&quot;) at the end of the line.&nbsp;
The backslash (&quot;\&quot;) is used by the operating system for directory specifications and as such will be confused with
line continuation.&nbsp; For example, you could type:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; cd \</TT>
<BR><BR>along with other commands ...&nbsp; and get unexpected results.&nbsp; However, if your makefile does not contain path
separator characters (&quot;\&quot;) and you wish to use &quot;\&quot; as a line continuation indicator then you can use the
Make &quot;u&quot; (UNIX compatibility mode) option.
<BR><BR>Also, in the UNIX operating system there is no concept of file extensions, only the concept of a file suffix.&nbsp;
Make will accept the UNIX Make directive<TT> .SUFFIXES</TT> for compatibility with UNIX makefiles.&nbsp; The UNIX compatible
special macros supported are:
<DL>
<DT><B><I>Macro</I></B>
<DD><B><I>Expansion</I></B> 
<DT>$@
<DD>full name of the target 
<DT>$*
<DD>target with the extension removed 
<DT>$&lt;
<DD>list of all dependents 
<DT>$?
<DD>list of dependents that are younger than the target
</DL>
<BR>The extra checking of makefiles done by Make will require modifications to UNIX makefiles.&nbsp; The UNIX Make utility
does not check for the existence of targets after the associated command list is executed so the &quot;c&quot; or the<TT>
.NOCHECK</TT> directive should be used to disable this checking.&nbsp; The lack of a command list to update a target is ignored
by the UNIX Make utility but Open Watcom Make requires the special internal command<TT> %null</TT> to specify a null command
list.&nbsp; In summary, Make supports many of the features of the UNIX Make utility but is not 100% compatible.
<H2 ID="Open_Watcom_Make_Diagnostic_Messages"> Open Watcom Make Diagnostic Messages </H2>
<BR>This section lists the various warning and error messages that may be issued by the Open Watcom Make.&nbsp; In the messages
below, %?&nbsp; character sequences indicate places in the message that are replaced with some other string.
<DL>
<DT>1 Out of memory
<DD>
<DT>2 Make execution terminated
<DD>
<DT>3 Option %c%c invalid
<DD>
<DT>4 %c%c must be followed by a filename
<DD>
<DT>5 No targets specified
<DD>
<DT>6 Ignoring first target in MAKEINIT
<DD>
<DT>7 Expecting a %M
<DD>
<DT>8 Invalid macro name %E
<DD>
<DT>9 Ignoring out of place %M
<DD>
<DT>10 Macros nested too deep
<DD>
<DT>11 Unknown internal command
<DD>
<DT>12 Program name is too long
<DD>
<DT>13 No control characters allowed in options
<DD>
<DT>14 Cannot execute %E:&nbsp; %Z
<DD>
<DT>15 Syntax error in %s command
<DD>
<DT>16 Nested %s loops not allowed
<DD>
<DT>17 Token too long, maximum size is %d chars
<DD>
<DT>18 Unrecognized or out of place character '%C'
<DD>
<DT>19 Target %E already declared %M
<DD>
<DT>20 Command list does not belong to any target
<DD>
<DT>21 Extension(s) %E not defined
<DD>
<DT>22 No existing file matches %E
<DD>
<DT>23 Extensions reversed in implicit rule
<DD>
<DT>24 More than one command list found for %E
<DD>
<DT>25 Extension %E declared more than once
<DD>
<DT>26 Unknown preprocessor directive:&nbsp; %s
<DD>
<DT>27 Macro %E is undefined
<DD>
<DT>28 !If statements nested too deep
<DD>
<DT>29 !%s has no matching !if
<DD>
<DT>30 Skipping !%1 block after !%2
<DD>
<DT>31 %1 not allowed after !%2
<DD>
<DT>32 Opening file %E:&nbsp; %Z
<DD>
<DT>34 !%s pending at end of file
<DD>
<DT>35 Trying to !%s an undefined macro
<DD>
<DT>36 Illegal attempt to update special target %E
<DD>
<DT>37 Target %E is defined recursively
<DD>
<DT>38 %E does not exist and cannot be made from existing files
<DD>
<DT>39 Target %E not mentioned in any makefile
<DD>
<DT>40 Could not touch %E
<DD>
<DT>41 No %s commands for making %E
<DD>
<DT>42 Last command making (%L) returned a bad status
<DD>
<DT>43 Deleting %E:&nbsp; %Z
<DD>
<DT>44 %s command returned a bad status
<DD>
<DT>45 Maximum string length exceeded
<DD>
<DT>46 Illegal character value %xH in file
<DD>
<DT>47 Assuming target(s) are .%s
<DD>
<DT>48 Maximum %%make depth exceeded
<DD>
<DT>49 Opening (%s) for write:&nbsp; %Z
<DD>
<DT>50 Unable to write:&nbsp; %Z
<DD>
<DT>51 CD'ing to %E:&nbsp; %Z
<DD>
<DT>52 Changing to drive %C:
<DD>
<DT>53 DOS memory inconsistency detected!&nbsp; System may halt ...
<DD>
<DT>53 OS corruption detected
<DD>
<DT>54 While reading (%s):&nbsp; %Z
<DD>
<DT>59 !IF Parse Error
<DD>
<DT>60 TMP Path/File Too Long
<DD>
<DT>61 Unexpected End of File
<DD>
<DT>62 Only NO(KEEP) allowed here
<DD>
<DT>63 Non-matching &quot;
<DD>
<DT>64 Invalid String Macro Substitution
<DD>
<DT>65 File Name Length Exceeded
<DD>
<DT>66 Redefinition of .DEFAULT Command List
<DD>
<DT>67 Non-matching { In Implicit Rule
<DD>
<DT>68 Invalid Implicit Rule Definition
<DD>
<DT>69 Path Too Long
<DD>
<DT>70 Cannot Load/Unload DLL %E
<DD>
<DT>71 Initialization of DLL %E returned a bad status
<DD>
<DT>72 DLL %E returned a bad status
<DD>
<DT>73 Illegal Character %C in macro name
<DD>
<DT>74 in closing file %E
<DD>
<DT>75 in opening file %E
<DD>
<DT>76 in writing file %E
<DD>
<DT>77 User Break Encountered
<DD>
<DT>78 Error in Memory Tracking Encountered
<DD>
<DT>79 Makefile may be Microsoft
<DD>try /ms switch
</DL>
<H1 ID="The_Touch_Utility"> The Touch Utility </H1>
<BR>This chapter describes the Open Watcom Touch utility.&nbsp; Open Watcom Touch will set the time-stamp (i.e., the modification
date and time) of one or more files.&nbsp; The new modification date and time may be the current date and time, the modification
date and time of another file, or a date and time specified on the command line.&nbsp; This utility is normally used in conjunction
with the Open Watcom Make utility.&nbsp; The rationale for bringing a file up-to-date without altering its contents is best
understood by reading the chapter which describes the Make utility.
<BR><BR>The Open Watcom Touch command line syntax is:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WTOUCH [options] file_spec [file_spec...]</TT>
<BR><BR>The square brackets [ ] denote items which are optional.
<DL>
<DT>options
<DD>is a list of valid options, each preceded by a slash (&quot;/&quot;) or a dash (&quot;-&quot;).&nbsp; Options may be specified
in any order.
<DT>file_spec
<DD>is the file specification for the file to be touched.&nbsp; Any number of file specifications may be listed.&nbsp; The wild
card characters &quot;*&quot; and &quot;?&quot; may be used.
</DL>
<BR>The following is a description of the options available.
<DL>
<DT>c
<DD>do not create an empty file if the specified file does not exist
<DT>d &lt;date&gt;
<DD>specify the date for the file time-stamp in &quot;mm-dd-yy&quot; format
<DT>f &lt;file&gt;
<DD>use the time-stamp from the specified file
<DT>i
<DD>increment time-stamp before touching the file
<DT>q
<DD>suppress informational messages
<DT>r
<DD>touch file even if it is marked read-only
<DT>t &lt;time&gt;
<DD>specify the time for the file time-stamp in &quot;hh:mm:ss&quot; format
<DT>u
<DD>use USA date/time format regardless of country
<DT>?
<DD>display help screen
</DL>
<H2 ID="WTOUCH_Operation"> WTOUCH Operation </H2>
<BR>WTOUCH is used to set the time-stamp (i.e., the modification date and time) of a file.&nbsp; The contents of the file
are not affected by this operation.&nbsp; If the specified file does not exist, it will be created as an empty file.&nbsp;
This behaviour may be altered with the &quot;c&quot; option so that if the file is not present, a new empty file will not
be created.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; (will not create myfile.dat)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wtouch /c myfile.dat</TT>
<BR><BR>If a wild card file specification is used and no files match the pattern, no files will have their time-stamps altered.
&nbsp;The date and time that all the specified files are set to is determined as follows:
<OL>
<LI>The current date and time is used as a default value.
<LI>A time-stamp from an &quot;age file&quot; may replace the current date and time.&nbsp; The &quot;f&quot; option is used
to specify the file that will supply the time-stamp.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; (use the date and time from file &quot;last.tim&quot;)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wtouch /f last.tim file*.dat</TT>
<LI>The date and/or time may be specified from the command line to override a part of the time-stamp that will be used.&nbsp;
The &quot;d&quot; and &quot;t&quot; options are used to override the date and time respectively.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; (use current date but use different time)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wtouch /t 2:00p file*.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; (completely specify date and time)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wtouch /d 10-31-90 /t 8:00:00 file*.dat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; (use date from file &quot;last.tim&quot; but set time)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; C&gt;wtouch /f last.tim /t 12:00 file*.dat</TT>
<BR><BR>The format of the date and time on the command line depends on the country information provided by the host operating
system.&nbsp; Open Watcom Touch should accept dates and times in a similar format to any operating system utilities (i.e.,
the DATE and TIME utilities provided by DOS).&nbsp; The &quot;a&quot; and &quot;p&quot; suffix is an extension to the time
syntax for specifying whether the time is A.M.&nbsp; or P.M., but this is only available if the operating system is not configured
for military or 24-hour time.
</OL>
<H1 ID="The_IDE2MAKE_Utility"> The IDE2MAKE Utility </H1>
<BR>This chapter describes the IDE2MAKE utility.&nbsp; IDE2MAKE loads an IDE project file and, using the associated .tgt files,
generates make files that can be invoked with WMAKE.&nbsp; If the .wpj file does not exist, a default project is used.&nbsp;
If any tgtfile(s) are specified, they are used as the targets in creating the make files.
<BR><BR>The IDE2MAKE command line syntax is:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ide2make [options] [tgtfile]</TT>
<BR><BR>The square brackets [ ] denote items which are optional.&nbsp; At least one item must be specified, otherwise the
program usage is shown.
<DL>
<DT>options
<DD>is a list of valid options, each preceded by a slash (&quot;/&quot;) or a dash (&quot;-&quot;).&nbsp; Options may be specified
in any order.
<DT>tgtfile
<DD>is the file specification for the targetfile to be used.&nbsp; Any number of file specifications may be listed.
</DL>
<BR>The following is a description of the options available.
<DL>
<DT>p &lt;wpjfile&gt;
<DD>loads wpjfile.wpj (project.wpj by default)
<DT>c &lt;cfgfile&gt;
<DD>loads cfgfile instead of ide.cfg
<DT>i
<DD>directory to search configuration files
<DT>d
<DD>generate makefiles using development switch set
<DT>l
<DD>generate makefiles with long lines (no length limit)
<DT>r
<DD>generate makefiles using release switch set
<DT>h &lt;number&gt;
<DD>generate makefiles for selected host OS (default is current host)
<BR><BR>0 - Windows 3.x
<BR>1 - OS/2 PM
<BR>2 - Windows NT
<BR>3 - Win-OS/2
<BR>4 - Windows 95
<BR>5 - Japanese Windows 3.x on an IBM
<BR>6 - Japanese Windows 3.x on a Nec98
<BR>7 - Dec Alpha (Windows NT)
<BR>8 - DOS
<BR>9 - Linux
</DL>
<H2 ID="IDE2MAKE_Operation"> IDE2MAKE Operation </H2>
<BR>IDE2MAKE is used to create makefiles from IDE project and targetfiles.&nbsp; If no targetfile is specified, makefiles
for all targets are generated.
</BODY>
