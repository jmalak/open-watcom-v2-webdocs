<HEAD>
<TITLE> Open Watcom 2.0 C/C++ Getting Started </TITLE>
</HEAD>
<BODY>
<H1 ID="Index_of_Topics"> Index of Topics </H1>
<DL>
<DT>- A -
<DD><A HREF="#Accessing_OnMline_Documentation">Accessing On-line Documentation</A>
<BR><A HREF="#Adding_Multiple_Targets">Adding Multiple Targets</A>
<DT>- B -
<DD><A HREF="#Benchmarking_Hints">Benchmarking Hints</A>
<DT>- C -
<DD><A HREF="#C_Programmers">C Programmers</A>
<BR><A HREF="#CPP_Programmers">C++ Programmers</A>
<BR><A HREF="#Changes_in_1_4_that_may_Require_Recompilation">Changes in 1.4 that may Require Recompilation</A>
<BR><A HREF="#Changes_in_1_7_that_may_Require_Recompilation">Changes in 1.7 that may Require Recompilation</A>
<BR><A HREF="#Changes_in_1_8_that_may_Require_Recompilation">Changes in 1.8 that may Require Recompilation</A>
<BR><A HREF="#Changes_in_10_0_that_may_Require_Recompilation">Changes in 10.0 that may Require Recompilation</A>
<BR><A HREF="#Changes_in_10_5_that_may_Require_Recompilation">Changes in 10.5 that may Require Recompilation</A>
<BR><A HREF="#Changes_in_10_6_that_may_Require_Recompilation">Changes in 10.6 that may Require Recompilation</A>
<BR><A HREF="#Changes_in_11_0_that_may_Require_Recompilation">Changes in 11.0 that may Require Recompilation</A>
<BR><A HREF="#Changes_in_Blue_Sky_s_Visual_Programmer_for_11_0">Changes in Blue Sky's Visual Programmer for 11.0</A>
<BR><A HREF="#Changes_in_Microsoft_Foundation_Classes_Support_for_10_6">Changes in Microsoft Foundation Classes Support for 10.6</A>
<BR><A HREF="#Changes_in_Microsoft_Foundation_Classes_Support_for_11_0">Changes in Microsoft Foundation Classes Support for 11.0</A>
<BR><A HREF="#Changes_in_Microsoft_Win32_SDK_Support_for_11_0">Changes in Microsoft Win32 SDK Support for 11.0</A>
<BR><A HREF="#Changes_that_may_Require_Recompilation">Changes that may Require Recompilation</A>
<BR><A HREF="#Changes_to_the_C_Compiler_for_11_0">Changes to the C Compiler for 11.0</A>
<BR><A HREF="#Changes_to_the_C_Compiler_in_10_6">Changes to the C Compiler in 10.6</A>
<BR><A HREF="#Changes_to_the_C_Library_in_10_6">Changes to the C Library in 10.6</A>
<BR><A HREF="#Changes_to_the_CPP_Compiler_for_11_0">Changes to the C++ Compiler for 11.0</A>
<BR><A HREF="#Changes_to_the_CPP_Compiler_in_10_6">Changes to the C++ Compiler in 10.6</A>
<BR><A HREF="#Changes_to_the_CDCPP_Libraries_for_11_0">Changes to the C/C++ Libraries for 11.0</A>
<BR><A HREF="#Changes_to_the_Code_Generator_for_11_0">Changes to the Code Generator for 11.0</A>
<BR><A HREF="#Changes_to_the_Compiler_Tools_for_11_0">Changes to the Compiler Tools for 11.0</A>
<BR><A HREF="#Changes_to_the_Dialog_Editor_in_10_6">Changes to the Dialog Editor in 10.6</A>
<BR><A HREF="#Changes_to_the_DOS_Graphics_Library_for_11_0">Changes to the DOS Graphics Library for 11.0</A>
<BR><A HREF="#Changes_to_the_Image_Editor_in_10_6">Changes to the Image Editor in 10.6</A>
<BR><A HREF="#Changes_to_the_Resource_Compiler_in_10_6">Changes to the Resource Compiler in 10.6</A>
<BR><A HREF="#Changes_to_the_Resource_Editor_in_10_6">Changes to the Resource Editor in 10.6</A>
<BR><A HREF="#Command_Line_Options_added_to_Watcom_C8_0_D386">Command Line Options added to Watcom C8.0 /386</A>
<BR><A HREF="#Command_Line_Options_added_to_Watcom_C8_5_D386">Command Line Options added to Watcom C8.5 /386</A>
<BR><A HREF="#Command_Line_Options_added_to_Watcom_C9_0_D386">Command Line Options added to Watcom C9.0 /386</A>
<BR><A HREF="#Contacting_Technical_Support">Contacting Technical Support</A>
<BR><A HREF="#Correcting_an_Error">Correcting an Error</A>
<DT>- D -
<DD><A HREF="#Debugging_the_Program">Debugging the Program</A>
<BR><A HREF="#Defining_a_Project">Defining a Project</A>
<BR><A HREF="#Differences_from_Open_Watcom_Version_1_0">Differences from Open Watcom Version 1.0</A>
<BR><A HREF="#Differences_from_Open_Watcom_Version_1_1">Differences from Open Watcom Version 1.1</A>
<BR><A HREF="#Differences_from_Open_Watcom_Version_1_2">Differences from Open Watcom Version 1.2</A>
<BR><A HREF="#Differences_from_Open_Watcom_Version_1_3">Differences from Open Watcom Version 1.3</A>
<BR><A HREF="#Differences_from_Open_Watcom_Version_1_4">Differences from Open Watcom Version 1.4</A>
<BR><A HREF="#Differences_from_Open_Watcom_Version_1_5">Differences from Open Watcom Version 1.5</A>
<BR><A HREF="#Differences_from_Open_Watcom_Version_1_6">Differences from Open Watcom Version 1.6</A>
<BR><A HREF="#Differences_from_Open_Watcom_Version_1_7">Differences from Open Watcom Version 1.7</A>
<BR><A HREF="#Differences_from_Open_Watcom_version_1_8">Differences from Open Watcom version 1.8</A>
<BR><A HREF="#Differences_from_Open_Watcom_version_1_9">Differences from Open Watcom version 1.9</A>
<BR><A HREF="#Differences_from_Version_11_0">Differences from Version 11.0</A>
<BR><A HREF="#Documentation">Documentation</A>
<BR><A HREF="#DOS_Developers">DOS Developers</A>
<DT>- E -
<DD><A HREF="#Editing_a_Bitmap">Editing a Bitmap</A>
<BR><A HREF="#Editing_Menus">Editing Menus</A>
<BR><A HREF="#Executing_the_Program">Executing the Program</A>
<BR><A HREF="#Extended_DOS_Developers">Extended DOS Developers</A>
<DT>- H -
<DD><A HREF="#HandsMon_Introduction_to_Open_Watcom_CDCPP">Hands-on Introduction to Open Watcom C/C++</A>
<BR><A HREF="#Hardware_and_Software_Requirements">Hardware and Software Requirements</A>
<DT>- I -
<DD><A HREF="#Incremental_Installation">Incremental Installation</A>
<BR><A HREF="#Information_Technical_Support_Will_Need_to_Help_You">Information Technical Support Will Need to Help You</A>
<BR><A HREF="#Installation">Installation</A>
<BR><A HREF="#Installation_Notes_for_OSD2">Installation Notes for OS/2</A>
<BR><A HREF="#Installation_Notes_for_Windows_3_x">Installation Notes for Windows 3.x</A>
<BR><A HREF="#Installing_Open_Watcom_CDCPP">Installing Open Watcom C/C++</A>
<BR><A HREF="#Introduction_to_Open_Watcom_CDCPP">Introduction to Open Watcom C/C++</A>
<BR><A HREF="#Items_No_Longer_Supported">Items No Longer Supported</A>
<DT>- M -
<DD><A HREF="#Major_Differences_from_Version_10_0">Major Differences from Version 10.0</A>
<BR><A HREF="#Major_Differences_from_Version_10_0_LA">Major Differences from Version 10.0 LA</A>
<BR><A HREF="#Major_Differences_from_Version_10_5">Major Differences from Version 10.5</A>
<BR><A HREF="#Major_Differences_from_Version_10_6">Major Differences from Version 10.6</A>
<BR><A HREF="#Major_Differences_from_Watcom_C7_0_D386">Major Differences from Watcom C7.0 /386</A>
<BR><A HREF="#Major_Differences_from_Watcom_C8_0_D386">Major Differences from Watcom C8.0 /386</A>
<BR><A HREF="#Major_Differences_from_Watcom_C8_5_D386">Major Differences from Watcom C8.5 /386</A>
<BR><A HREF="#Major_Differences_from_Watcom_C9_0_D386">Major Differences from Watcom C9.0 /386</A>
<BR><A HREF="#Major_Differences_from_Watcom_C9_01_D386">Major Differences from Watcom C9.01 /386</A>
<BR><A HREF="#Major_Differences_from_Watcom_C9_5_D386">Major Differences from Watcom C9.5 /386</A>
<BR><A HREF="#Making_a_Target">Making a Target</A>
<BR><A HREF="#Making_All_Targets">Making All Targets</A>
<DT>- O -
<DD><A HREF="#OnMline_Documentation_under_DOS">On-line Documentation under DOS</A>
<BR><A HREF="#OnMline_Documentation_under_OSD2">On-line Documentation under OS/2</A>
<BR><A HREF="#OnMline_Documentation_under_Windows">On-line Documentation under Windows</A>
<BR><A HREF="#The_Open_Watcom_CDCPP_Tutorial">The Open Watcom C/C++ Tutorial</A>
<BR><A HREF="#OSD2_Developers">OS/2 Developers</A>
<BR><A HREF="#Outline">Outline</A>
<DT>- P -
<DD><A HREF="#ProtectedMmode_Compiler_and_Linker">Protected-mode Compiler and Linker</A>
<DT>- R -
<DD><A HREF="#The_README_File">The README File</A>
<BR><A HREF="#Release_Notes_for_Open_Watcom_CDCPP_2_0">Release Notes for Open Watcom C/C++ 2.0</A>
<BR><A HREF="#Resources_at_Your_Fingertips">Resources at Your Fingertips</A>
<DT>- S -
<DD><A HREF="#Sampling_and_Profiling_an_Executable">Sampling and Profiling an Executable</A>
<BR><A HREF="#Saving_the_Project_and_Terminating_the_Session">Saving the Project and Terminating the Session</A>
<BR><A HREF="#Smart_Editing">Smart Editing</A>
<BR><A HREF="#Suggested_Reading">Suggested Reading</A>
<BR><A HREF="#Sybase_Open_Watcom_Public_License">Sybase Open Watcom Public License</A>
<BR><A HREF="#System_Configuration_File_Modifications">System Configuration File Modifications</A>
<DT>- T -
<DD><A HREF="#Technical_Support_and_Services">Technical Support and Services</A>
<BR><A HREF="#TroubleMShooting">Trouble-Shooting</A>
<BR><A HREF="#Tutorial_Review">Tutorial Review</A>
<DT>- U -
<DD><A HREF="#Using_the_Source_Browser">Using the Source Browser</A>
<DT>- V -
<DD><A HREF="#Virtual_Device_Driver_Developers">Virtual Device Driver Developers</A>
<DT>- W -
<DD><A HREF="#What_is_in_version_2_0_of_Open_Watcom_CDCPP_">What is in version 2.0 of Open Watcom C/C++?</A>
<BR><A HREF="#WinMOSD2_and_OSD2_Specific">Win-OS/2 and OS/2 Specific</A>
<BR><A HREF="#Windows_3_x_Developers">Windows 3.x Developers</A>
<BR><A HREF="#Windows_95_Help_File_Format">Windows 95 Help File Format</A>
<BR><A HREF="#Windows_NT_Developers">Windows NT Developers</A>
</DL>
<H1 ID="Introduction_to_Open_Watcom_CDCPP"> Introduction to Open Watcom C/C++ </H1>
<BR>Welcome to the Open Watcom C/C++ 2.0 development system.&nbsp; Open Watcom C/C++ is an Open Source successor to commercial
compilers previously marketed by Sybase, Powersoft and originally WATCOM International Corp.
<BR><BR>Version 2.0 of Open Watcom C/C++ is a professional, optimizing, multi-platform C and C++ compiler with a comprehensive
suite of development tools for developing and debugging both 16-bit and 32-bit applications for DOS, extended DOS, Novell
NLMs, 16-bit OS/2, 32-bit OS/2, Windows 3.x, Windows 95/98/Me, Win32s, and Windows NT/2000/XP (Win32).
<BR><BR>You should read the entire contents of this booklet, as it contains information on new programs and modifications
that have been made since the previous release.
<HR>
<BR><B>Special NOTE to users of previous versions!&nbsp; See the section entitled</B> <A HREF="#Release_Notes_for_Open_Watcom_CDCPP_2_0">Release Notes for Open Watcom C/C++ 2.0</A><B>
to determine if you need to recompile your application.</B>
<HR>
<H2 ID="What_is_in_version_2_0_of_Open_Watcom_CDCPP_"> What is in version 2.0 of Open Watcom C/C++? </H2>
<BR>Version 2.0 incorporates the features professional developers have been demanding:
<DL>
<DT>Open, Multi-target Integrated Development Environment
<DD>The IDE allows you to easily edit, compile, link, debug and build applications for 16-bit systems like DOS, OS/2 1.x, and
Windows 3.x and 32-bit systems like extended DOS, Novell NLMs, OS/2, Windows 3.x (Win32s), Windows 95/98/Me, and Windows NT/2000/XP.
&nbsp;Projects can be made up of multiple targets which permit a project to include EXEs and DLLs.&nbsp; The IDE produces
makefiles for the project which can be viewed and edited with a text editor.&nbsp; The IDE is hosted under Windows 3.x, Windows
95/98/Me, Windows NT/2000/XP, and 32-bit OS/2.
<DT>The Widest Range of Intel x86 Platforms
<DD>
<DL>
<DT>Host Platforms
<DD>
<UL>
<LI>DOS (command line)
<LI>32-bit OS/2 (IDE and command line)
<LI>Windows 3.x (IDE)
<LI>Windows 95/98/Me (IDE and command line)
<LI>Windows NT/2000/XP (IDE and command line)
</UL>
<DT>16-bit Target Platforms
<DD>
<UL>
<LI>DOS
<LI>Windows 3.x
<LI>OS/2 1.x
</UL>
<DT>32-bit Target Platforms
<DD>
<UL>
<LI>Extended DOS
<LI>Win32s
<LI>Windows 95/98/Me
<LI>Windows NT/2000/XP
<LI>32-bit OS/2
<LI>Novell NLMs
</UL>
</DL>
<DT>Cross-Platform Development Tools
<DD>The core tools in the package permit cross-platform development that allows developers to exploit the advanced features of
today's popular 32-bit operating systems, including Windows 95/98/Me, Windows NT/2000/XP, and OS/2.&nbsp; Cross-platform support
allows you to develop on a host development environment for execution on a different target system.
<DT>Multi-Platform Debugger
<DD>The new debugger advances developer productivity.&nbsp; New features include redesigned interface, ability to set breakpoints
on nested function calls, improved C++ and DLL debugging, reverse execution, and configurable interface.&nbsp; Graphical versions
of the debugger are available under Windows 3.x, Windows 95/98/Me, Windows NT/2000/XP, and 32-bit OS/2.&nbsp; Character versions
of the debugger are available under DOS, Windows 3.x, Windows NT/2000/XP, and 32-bit OS/2.&nbsp; For VIDEO fans, we have kept
the command line compatibility from the original debugger.
<DT>Class Browser
<DD>The Browser lets you visually navigate the object hierarchies, functions, variable types, and constants of your C/C++ application.
<DT>Performance Analysis
<DD>The Open Watcom Execution Sampler and Open Watcom Execution Profiler are performance analysis tools that locate heavily used
sections of code so that you may focus your efforts on these areas and improve your application's performance.
<DT>Editor
<DD>The Open Watcom Editor is a context sensitive source editor, integrated into the Windows 3.x, Windows 95/98/Me and Windows
NT/2000/XP version of the IDE.
<DT>Graphical Development Tools
<DD>Open Watcom C/C++ includes a suite of graphical development tools to aid development of Windows 3.x, Windows 95/98/Me and
Windows NT/2000/XP applications.&nbsp; The development tools include:
<DL>
<DT>Resource Editors
<DD>Enable you to create resources for your 16-bit and 32-bit Windows applications.&nbsp; For 32-bit OS/2 PM development, Open
Watcom C/C++ interoperates with IBM's OS/2 Developer's Toolkit (available from IBM).&nbsp; These tools have been seamlessly
integrated into the IDE.&nbsp; The resource compiler allows you to incorporate these resources into your application.
<DT>Resource Compiler
<DD>Produces a compiled resource file from a source file.
<DT>Zoom
<DD>Magnifies selected sections of your screen.
<DT>Heap Walker
<DD>Displays memory usage for testing and debugging purposes.
<DT>Spy
<DD>Monitors messages passed between your application and Windows.
<DT>DDESpy
<DD>Monitors all DDE activity occurring in the system.
<DT>Dr.&nbsp; Watcom
<DD>Enables you to debug your program by examining both the program and the system after an exception occurs; monitors native
applications running under Windows 3.x, Windows 95/98/Me or Windows NT/2000/XP.
</DL>
<DT>Assembler
<DD>An assembler is included in the package.&nbsp; It is compatible with a subset of the Microsoft macro assembler (MASM).
<DT>C++ Class Libraries
<DD>Open Watcom C/C++ includes container and stream class libraries.
<DT>Royalty-free 32-bit DOS Extender
<DD>Open Watcom C/C++ includes the DOS/4GW 32-bit DOS extender by Tenberry Software with royalty-free run-time and virtual memory
support up to 32MB.
<DT>Support for wide range of DOS Extenders
<DD>Open Watcom C/C++ allows you to develop and debug applications based on the following DOS extender technology:&nbsp; CauseWay
DOS Extender, Tenberry Software's DOS/4G and Phar Lap's TNT DOS Extender.&nbsp; You can also develop applications using DOS/32A
and FlashTek's DOS Extender but, currently, there is no support for debugging these applications.
<DT>Sample programs and applications
<DD>Open Watcom C/C++ includes a large set of sample applications to demonstrate the integrated development environment.
</DL>
<H2 ID="Technical_Support_and_Services"> Technical Support and Services </H2>
<BR>We are committed to ensuring that our products perform as they were designed.&nbsp; Although a significant amount of testing
has gone into this product, you may encounter errors in the software or documentation.&nbsp; Technical support is provided
on an informal basis through the Open Watcom C/C++ newsgroups.&nbsp; Please visit http://www.openwatcom.org/ for more information.
<H3 ID="Resources_at_Your_Fingertips"> Resources at Your Fingertips </H3>
<BR>Open Watcom C/C++ contains many resources to help you find answers to your questions.&nbsp; The documentation is the first
place to start.&nbsp; With each release of the product, we update the manuals to answer the most frequently asked questions.
&nbsp;Most of this information is also accessible through on-line help.
<BR><BR>The &quot;README&quot; file in the main product directory contains up-to-date information that recently became available.
<BR><BR>Answers to frequently asked questions are available on the Open Watcom World Wide Web server (http://www.openwatcom.org/).
<H3 ID="Contacting_Technical_Support"> Contacting Technical Support </H3>
<BR>Our technical support is available to help resolve technical defects in the software.&nbsp; Note that all support is currently
informal and free.&nbsp; The following are ways to contact technical support.
<DL>
<DT>Newsgroups
<DD>The easiest way to get support is through the Open Watcom newsgroups at news://news.openwatcom.org/.
<DT>World Wide Web
<DD>You can also submit bug reports or enhancement requests through the Open Watcom bug tracking system at http://bugzilla.openwatcom.org/.
</DL>
<H3 ID="Information_Technical_Support_Will_Need_to_Help_You"> Information Technical Support Will Need to Help You </H3>
<BR>The more information you can provide to technical support, the faster they can help you solve your problem.&nbsp; A detailed
description of the problem, short sample program, and a summary of steps to duplicate the problem (including compiler and
linker options) are essential.&nbsp; Concise problem reports allow technical support to quickly pinpoint the problem and offer
a resolution.&nbsp; Here is a list of information that will help technical support solve the problem:
<DL>
<DT>Contact information
<DD>We would like your name, as well as telephone and fax numbers where you can be reached during the day.
<DT>Product information
<DD>Please tell us the product name and exact version number.
<DT>Hardware configuration
<DD>Please tell us what type of processor you are using (e.g., 2.2GHz Intel Pentium 4), how much memory is present, what kind
of graphics adapter you are using, and how much memory it has.
<DT>Software configuration
<DD>Please tell us what operating system and version you are using.
<DT>Concise problem report with short sample program
<DD>Please provide a complete description of the problem and the steps to reproduce it.&nbsp; A small, self-contained program
example with compile and link options is ideal.
</DL>
<H3 ID="Suggested_Reading"> Suggested Reading </H3>
<BR>There are a number of good books and references that can help you answer your questions.&nbsp; Following is a list of
some of the books and documents we feel might be helpful.&nbsp; This is by no means an exhaustive list.&nbsp; Contact your
local bookstore for additional information.
<H4 ID="C_Programmers"> C Programmers </H4>
<DL>
<DT>The C Programming Language, 2nd Edition
<DD>
<BR><BR>Brian W.&nbsp; Kernighan and Dennis M.Ritchie; Prentice Hall, 1988.
<DT>C DiskTutor
<DD>
<BR><BR>L.&nbsp; John Ribar; Osborne McGraw-Hill, 1992.
</DL>
<H4 ID="CPP_Programmers"> C++ Programmers </H4>
<DL>
<DT>C++ Primer, 2nd Edition
<DD>
<BR><BR>Stanley B.&nbsp; Lippman; Addison-Wesley Publishing Company, 1991.
<DT>Teach Yourself C++ in 21 Days
<DD>
<BR><BR>Jesse Liberty; Sams Publishing, 1994.
</DL>
<H4 ID="DOS_Developers"> DOS Developers </H4>
<DL>
<DT>PC Interrupts, Second Edition
<DD>
<BR><BR>Ralf Brown and Jim Kyle; Addison-Wesley Publishing Company, 1994.
<DT>Relocatable Object Module Format Specification, V1.1
<DD>
<BR><BR>The Tool Interface Standards (TIS) OMF specification can be obtained from the Open Watcom website.&nbsp; Here is the
URL.
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; http://www.openwatcom.org/ftp/devel/docs/omf.pdf</TT>
<BR><BR>This file contains a PDF version of the TIS OMF V1.1 specification.
</DL>
<H4 ID="Extended_DOS_Developers"> Extended DOS Developers </H4>
<DL>
<DT>Extending DOS-A Programmer's Guide to Protected-Mode DOS, 2nd Edition
<DD>
<BR><BR>Ray Duncan, et al; Addison-Wesley Publishing Company, 1992.
<DT>DOS Protected-Mode Interface (DPMI) Specification
<DD>
<BR><BR>The DPMI 1.0 specification can be obtained from the Open Watcom website.&nbsp; Here is the URL.
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; http://www.openwatcom.org/ftp/devel/docs/dpmi10.pdf</TT>
<BR><BR>This file contains a PDF version of the DPMI 1.0 specification.
</DL>
<H4 ID="Windows_3_x_Developers"> Windows 3.x Developers </H4>
<DL>
<DT>Microsoft Windows Programmer's Reference
<DD>
<BR><BR>Microsoft Corporation; Microsoft Press, 1990.
<DT>Programming Windows 3.1, Third Edition
<DD>
<BR><BR>Charles Petzold; Microsoft Press, 1992.
<DT>Windows Programming Primer Plus
<DD>
<BR><BR>Jim Conger; Waite Group Press, 1992.
</DL>
<H4 ID="Windows_NT_Developers"> Windows NT Developers </H4>
<DL>
<DT>Advanced Windows NT
<DD>
<BR><BR>Jeffrey Richter; Microsoft Press.&nbsp; 1994.
<DT>Inside Windows NT
<DD>
<BR><BR>Helen Custer; Microsoft Press.&nbsp; 1993.
<DT>Microsoft Win32 Programmer's Reference, Volume One
<DD>
<BR><BR>Microsoft Corporation; Microsoft Press, 1993.
</DL>
<H4 ID="OSD2_Developers"> OS/2 Developers </H4>
<DL>
<DT>The Design of OS/2
<DD>
<BR><BR>H.M.&nbsp; Deitel and M.S.&nbsp; Kogan; Addison-Wesley Publishing Company, 1992.
<DT>OS/2 Warp Unleashed, Deluxe Edition
<DD>
<BR><BR>David Moskowitz and David Kerr, et al; Sams Publishing, 1995.
</DL>
<H4 ID="Virtual_Device_Driver_Developers"> Virtual Device Driver Developers </H4>
<DL>
<DT>Writing Windows Virtual Device Drivers
<DD>
<BR><BR>David Thielen and Bryan Woodruff; Addison-Wesley Publishing Company, 1994.
</DL>
<H1 ID="Installation"> Installation </H1>
<BR>The package contains the following components:
<UL>
<LI><B> Open Watcom C/C++ CD-ROM</B>
<LI><B> This manual</B>
</UL>
<H2 ID="Hardware_and_Software_Requirements"> Hardware and Software Requirements </H2>
<BR>Open Watcom C/C++ requires the following minimum configuration:
<UL>
<LI>IBM PC compatible
<LI>An 80386 or higher processor
<LI>8 MB of memory
<LI>Hard disk with enough space available to install the components you require.
<LI>A CD-ROM disk drive
</UL>
<BR>In addition to the above requirements, you need one of the following operating systems:
<UL>
<LI>DOS version 5.0 or higher
<LI>Microsoft Windows version 3.1 running in enhanced mode
<LI>Microsoft Windows 95 or higher
<LI>Microsoft Windows NT version 3.1 or higher
<LI>IBM OS/2 2.1 or higher
</UL>
<H2 ID="The_README_File"> The README File </H2>
<BR>Before you install Open Watcom C/C++, you should read the contents of the &quot;README&quot; file which is stored in the
root directory of the CD-ROM.&nbsp; It contains valuable, up-to-date information concerning this product.
<H2 ID="Installing_Open_Watcom_CDCPP"> Installing Open Watcom C/C++ </H2>
<BR>The installation program in this version has been completely redesigned with several new &quot;smart&quot; features.&nbsp;
If you have installed a previous version of Open Watcom C/C++ then you should install Open Watcom C/C++ 2.0 into the same
path (except for the reason described in the following paragraph).&nbsp; It will examine a previous installation to determine
what features were previously installed.&nbsp; It will use this information to establish default settings for the installation
that you are about to attempt.&nbsp; Of course, you can add or remove features as you progress through the installation steps.
<BR><BR>If you are installing only one of the Open Watcom C/C++ or Open Watcom FORTRAN 77 products and you have an older version
of the other product, we do NOT recommend that you install the new product into the same directory as the old product.&nbsp;
The Open Watcom C/C++ and Open Watcom FORTRAN 77 products are compatible at the same version number.&nbsp; However, the Open
Watcom C/C++ and Open Watcom FORTRAN 77 products are usually NOT compatible across different version numbers.&nbsp; If this
is the case, care must be exercised when switching between use of the two products.&nbsp; Environment variables such as<B>
PATH</B> and<B> WATCOM</B> must be modified and/or corrected.&nbsp; System files such as<TT> CONFIG.SYS</TT> and<TT> SYSTEM.INI</TT>
must be modified and/or corrected.
<BR><BR>If you are installing both Open Watcom C/C++ 2.0 and Open Watcom FORTRAN 77 2.0, we recommend that you install both
products under the same directory.&nbsp; This will eliminate duplication of files and, as a result, reduce the total required
disk space.&nbsp; The two products share the use of certain environment variables which point to the installation directory.
&nbsp;If separate installation directories are used, problems will arise.
<BR><BR>When you install Open Watcom C/C++ and Open Watcom FORTRAN 77 in the same directory, you should not deselect any options
when running the second installation; otherwise the second product's install may remove files that were installed (and are
required) by the first product's install.&nbsp; This isn't an issue if you only have one of Open Watcom C/C++ or Open Watcom
FORTRAN 77.&nbsp; The problem is that Open Watcom C/C++ and Open Watcom FORTRAN 77 don't know about the installation options
you have selected for each other's product.
<BR><BR>If you wish to create a backup of your previous version, please do so before installing Open Watcom C/C++ 2.0.
<BR><BR>If you decide to install Open Watcom C/C++ 2.0 into a different directory than the previously installed version, you
will have to manually edit system files (e.g., CONFIG.SYS, AUTOEXEC.BAT, SYSTEM.INI) after the installation process is complete
to remove the old version from various environment variables (e.g., PATH, DEVICE=).&nbsp; This is necessary since the path
to the new version will appear after the path to the old version.&nbsp; To avoid this extra work, we recommend installing
the new version into the same path as the old version.
<BR><BR>As an example, here are a few of the environment variables and &quot;RUN&quot; directives that are modified/added
to the OS/2<TT> CONFIG.SYS</TT> file.&nbsp; You should make sure that all references to the older version of the software
are removed.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; LIBPATH=...;D:\WATCOM\BINP\DLL;...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SET PATH=...;D:\WATCOM\BINP;D:\WATCOM\BINW;...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SET HELP=...;D:\WATCOM\BINP\HELP;...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SET BOOKSHELF=...;D:\WATCOM\BINP\HELP;...</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SET INCLUDE=...;D:\WATCOM\H\OS2;D:\WATCOM\H;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SET WATCOM=D:\WATCOM</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SET EDPATH=D:\WATCOM\EDDAT</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; RUN=D:\WATCOM\BINP\NMPBIND.EXE</TT>
<BR><BR>You may wish to run Open Watcom C/C++ under more than one operating system on the same personal computer.&nbsp; For
every operating system that you use, simply start up the operating system and run the corresponding install procedure.
<BR><BR>If you run the Windows 3.x installation procedure, you do not need to run the DOS installation procedure also.
<BR><BR>If you plan to use Win-OS/2 as a development platform under OS/2, you must run the Windows 3.1 install program (selecting
Windows 3.1 host support).
<BR><BR>Place the CD-ROM disk in your CD-ROM drive.&nbsp; Select one of the following procedures depending on the host operating
system that you are currently running.&nbsp; Below, substitute the CD-ROM drive specification for &quot;x:&quot;.
<DL>
<DT>DOS
<DD>Enter the following command:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; x:\setup</TT>
<DT>Windows 3.x
<DD>Start Windows 3.x and choose Run from the File menu of the Program Manager.&nbsp; Enter the following command:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; x:\setup</TT>
<DT>Windows 95/98/Me
<DD>Choose Run from the Start menu and enter the following command:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; x:\setup</TT>
<DT>Windows NT/2000/XP
<DD>Log on to an account that is a member of the &quot;Administrator&quot; group so that you have sufficient rights to modify
the system environment.&nbsp; Choose Run from the File menu of the Program Manager.&nbsp; Enter the following command:&nbsp;

<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; x:\setup</TT>
<DT>OS/2
<DD>Start an OS/2 session and enter the following command:&nbsp; 
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; x:\install</TT>
</DL>
<H2 ID="Incremental_Installation"> Incremental Installation </H2>
<BR>You may wish to install Open Watcom C/C++, and subsequently install features that you omitted in the first install.&nbsp;
You can also remove features that you no longer wish to have installed.&nbsp; You can achieve this as follows:
<OL>
<LI>Start the installation program.
<LI>Select any new features that you wish to install.
<LI>Deselect any features that you wish to remove.
<LI>Re-run the installation program for each host operating system that you use.
</OL>
<H2 ID="System_Configuration_File_Modifications"> System Configuration File Modifications </H2>
<BR>The install program makes changes to your operating system startup files to allow Open Watcom C/C++ to run.&nbsp; We strongly
recommend that you allow the install program to modify your system configuration files for you, but you may do it by hand.
&nbsp;The changes required may be found in any of the following files which have been placed in the root of the installation
directory:
<DL>
<DT>CONFIG.NEW
<DD>Changes required for<TT> CONFIG.SYS</TT> (DOS, Windows, Windows 95/98/Me, OS/2)
<DT>AUTOEXEC.NEW
<DD>Changes required for<TT> AUTOEXEC.BAT</TT> (DOS, Windows, Windows 95/98/Me, OS/2)
<DT>CHANGES.ENV
<DD>Changes required for the Windows NT/2000/XP environment
</DL>
<H2 ID="Installation_Notes_for_Windows_3_x"> Installation Notes for Windows 3.x </H2>
<OL>
<LI>When you use the Integrated Development Environment under Windows 3.x, it is important that the IDE's batch server program
be able to run in the background.&nbsp; Therefore, make sure that the &quot;Exclusive in Foreground&quot; checkbox is NOT
checked in the &quot;Scheduling&quot; options of &quot;386 Enhanced&quot; in the &quot;Control Panel&quot;.
<LI>When you use the Integrated Development Environment under Windows 3.x, the line
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; OverlappedIO=ON</TT>
<BR><BR>in your &quot;SYSTEM.INI&quot; file can cause problems.&nbsp; This controls (disables) the queuing of DiskIO and makes
some changes between DOS box timings to allow some processes to finish.
<LI>When you use the Integrated Development Environment under Windows 3.x, it is important that the line
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; NoEMMDriver=ON</TT>
<BR><BR>not appear in your &quot;SYSTEM.INI&quot; file.&nbsp; It will prevent a link from succeeding in the IDE..
<LI>When you use the Integrated Development Environment under Windows 3.x on the NEC PC-9800 series, it is important that
the line
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; InDOSPolling=TRUE</TT>
<BR><BR>not appear in your &quot;SYSTEM.INI&quot; file.&nbsp; It will prevent a make from succeeding in the IDE.
<LI>Central Point Software's anti-virus programs (VDEFEND, VSAFE, VWATCH) conflict with the Integrated Development Environment
under Windows 3.x.
<LI>The Program Information File &quot;BATCHBOX.PIF&quot; is used by the Integrated Development Environment (IDE) to start
up a background batch server for compiling, linking, etc.&nbsp; The PIF references &quot;COMMAND.COM&quot;.&nbsp; If you are
using a substitute for &quot;COMMAND.COM&quot; such as &quot;4DOS.COM&quot; then you must modify the PIF accordingly using
a PIF editor.
</OL>
<H2 ID="Installation_Notes_for_OSD2"> Installation Notes for OS/2 </H2>
<OL>
<LI>The Integrated Development Environment (IDE) uses the IBM OS/2 Enhanced System Editor (EPM) for editing text files.&nbsp;
You must ensure that EPM is installed in your OS/2 system if you are planning to use the IDE.&nbsp; You can selectively install
the Enhanced Editor by running the OS/2 Setup and Installation program (Selective Install) and choosing &quot;Enhanced Editor&quot;
from the &quot;Tools and Games&quot; detail page.
<LI>On some systems with limited memory that use the UNDELETE feature of OS/2, compile times may be slow because OS/2 is saving
copies of compiler temporary files.&nbsp; You may start the BATSERV process using the OS/2<TT> STARTUP.CMD</TT> file with<B>
DELDIR</B> turned off as illustrated below.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SET OLD_DEL_DIR=%DELDIR%</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SET DELDIR=</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; DETACH C:\WATCOM\BINP\BATSERV.EXE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SET DELDIR=%OLD_DEL_DIR%</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; SET OLD_DEL_DIR=</TT>
<LI>If you plan to use the Named Pipe Remote Debugging support of the Open Watcom Debugger then the<TT> NMPSERV.EXE.</TT>
&nbsp;program must be running.&nbsp; It may be started during OS/2 initialization via a &quot;RUN=&quot; statement in your<TT>
CONFIG.SYS</TT> file or manually as needed through the DETACH command.
</OL>
<H1 ID="HandsMon_Introduction_to_Open_Watcom_CDCPP"> Hands-on Introduction to Open Watcom C/C++ </H1>
<BR>Let's get started and introduce some of the tools that are in Open Watcom C/C++.&nbsp; The purpose of this chapter is
to briefly test out the new graphical tools in Open Watcom C/C++ using an existing application.
<BR><BR>In this tutorial, we will take an existing set of C++ source files, create a project in our integrated development
environment, and perform the following tasks:
<UL>
<LI>Add multiple targets
<LI>Make a target
<LI>Make all targets
<LI>Execute the program
<LI>Debug the program
<LI>Use the Browser
<LI>Correct errors
<LI>Sample and profile the executable
<LI>Save the project
<LI>Terminate the session
</UL>
<H2 ID="Outline"> Outline </H2>
<BR>Open Watcom's Integrated Development Environment (IDE) manages the files and tools that a programmer uses when developing
a project.&nbsp; This includes all the source files, include files, libraries, compiler(s), linkers, preprocessors, etc.&nbsp;
that one uses.
<BR><BR>The IDE has a graphical interface that makes it easy to visualize the make-up of a project.&nbsp; A single IDE session
shows a project.&nbsp; If the project consists of a number of components, such as two executables and one library, these are
each shown as target windows in the project window.&nbsp; Each target window shows the files that are needed to construct
the target and is associated via its filename extension with a rule that describes the construction mechanism.&nbsp; For example,
a filename with the extension &quot;.EXE&quot; may be associated with the rule for constructing 32-bit Windows executables,
or a filename with the extension &quot;.LIB&quot; may be associated with the rule for constructing static libraries.&nbsp;
Different projects can refer to the same target.&nbsp; If they do, the target is shared and can be manipulated via either
project, with changes made through one affecting the other.
<BR><BR>The IDE itself is a collection of programs that manages the various files and tools used to create the target libraries
and executables.&nbsp; It creates makefile(s) from the information in the target descriptions and invokes Open Watcom Make
to construct the targets themselves.&nbsp; A configuration file contains built-in knowledge of the Open Watcom compilers,
editors, Profiler, and Browser, as well as all their switches.
<H2 ID="The_Open_Watcom_CDCPP_Tutorial"> The Open Watcom C/C++ Tutorial </H2>
<BR>This tutorial walks you through the creation and execution of a C/C++ program under Windows.&nbsp; This will give you
an understanding of the basic concepts of the IDE and its components, and it will detail the steps involved in project development.
&nbsp;The result of this tutorial is a three dimensional drawing of a kitchen which you can manipulate using either the menus
or the icons on the toolbar.&nbsp; You can rotate and resize the drawing, as well as adjust the lighting and contrast.
<BR><BR>To begin, start the IDE.&nbsp; This is done by double-clicking on the &quot;IDE&quot; icon in the Open Watcom C/C++
window.
<BR><BR>A status field at the bottom of the IDE window indicates the function of the icon on the toolbar over which your mouse
cursor is currently positioned.&nbsp; If the status area does not show you the function of the icons as you move the mouse
cursor over them, check that no item in the menu bar is highlighted (if one is highlighted, press the Alt key).
<BR><BR><TT><IMG SRC="ide1c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 1.</I></B><B><I></I></B><B> The initial IDE screen</B>
<H3 ID="Defining_a_Project"> Defining a Project </H3>
<BR>In this tutorial, you will be creating a new project called<TT> KITCHEN.</TT>&nbsp; Here are the steps required to accomplish
this task.
<OL>
<LI>Define a new project by pulling down the<B> File</B> menu and selecting the<B> New Project...</B>&nbsp; item.&nbsp; You
can also define a new project by clicking on the &quot;Create a new project&quot; icon on the toolbar.
<LI>A choice of different sample project directories is available.&nbsp; Assuming that you installed the Open Watcom C/C++
software in the<TT> \WATCOM</TT> directory, you will find the sample project directories in the following directory:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; \WATCOM\SAMPLES\IDE</TT>
<BR><BR>For purposes of this tutorial, we recommend that you select one of the following project directories:
<DL>
<DT>WIN
<DD>for an example of 16-bit Windows 3.x application development when using Windows 3.x under DOS as a host development system,
<DT>WIN386
<DD>for an example of 32-bit Windows 3.x application development when using Windows 3.x under DOS as a host development system,
<DT>WIN32
<DD>for an example of 32-bit Win32 application development when using Windows NT/2000/XP or Windows 95/98/Me as a host development
system, and
<DT>OS2
<DD>for an example of 32-bit OS/2 application development when using 32-bit OS/2 as a host development system.
</DL>
<BR>Thus the<TT> target</TT> that we refer to below should be one of<TT> WIN, WIN386, WIN32,</TT> or<TT> OS2</TT> depending
on your selection.&nbsp; The tutorial uses the<TT> WIN32</TT> example for illustrative purposes.&nbsp; You will find some
minor variations from your selected target environment.
<BR><BR>When asked for a project name, you can do one of two things:
<OL>
<LI>enter the following pathname:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; d:[path]\SAMPLES\IDE\target\KITCHEN</TT>
<BR><BR>where<TT> d:[path]</TT> is the drive and path where you installed the Open Watcom software, or
<LI>use the file browser to select the following directory:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; d:[path]\SAMPLES\IDE\target</TT>
<BR><BR>and specify the filename<TT> kitchen.</TT>
</OL>
<BR><TT><IMG SRC="ide2c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 2.</I></B><B><I></I></B><B> Creating a new project</B>
<BR><BR>Press the Enter key or click on OK (OPEN).
<BR><BR>The project description will be stored in this file and the IDE will set the current working directory to the specified
path during your session.
<LI>You will be prompted for a target name.&nbsp; Since we will be attaching pre-defined targets, just click the<B> Browse</B>
button when prompted for the target name.&nbsp; Select the &quot;draw&quot; target file (it will be one of<TT> draw16.tgt,
draw.tgt, draw32.tgt, drawos2.tgt</TT> depending on your selection of target).
<BR><BR><TT><IMG SRC="ide3c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 3.</I></B><B><I></I></B><B> Attaching existing targets</B>
<BR><BR>Press the Enter key or click on OK (OPEN).
<LI>You can ignore the settings displayed for<B> Target Environment</B> and<B> Image Type</B> since the target definition
already exists (we created it for you).&nbsp; The settings are important when you are defining a new target (i.e., one that
was not predefined).
<BR><BR><TT><IMG SRC="ide4c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 4.</I></B><B><I></I></B><B> Selecting a target type</B>
<BR><BR>Press the Enter key or click on OK.
</OL>
<BR>A target window is created in the project window for the &quot;draw&quot; target.&nbsp; This window contains all of the
files associated with the target.&nbsp; You can click on any of the &quot;Folder&quot; icons to hide or un-hide all files
with a particular extension.&nbsp; For example, you may wish to un-hide all the files with a<TT> .bmp</TT> extension by clicking
on the folder icon associated with bitmap files.
<H3 ID="Adding_Multiple_Targets"> Adding Multiple Targets </H3>
<BR>Open Watcom's IDE allows you to have multiple targets in any particular project.&nbsp; Note that targets can be used by
multiple projects.&nbsp; To add a new target to the project, do the following.
<OL>
<LI>Pull down the<B> Targets</B> menu and select the<B> New Target...</B>&nbsp; item.
<LI>Enter<TT> button.tgt</TT> as the target name for the new target to be added to the project.&nbsp; Do not forget to include
the<TT> .tgt</TT> extension.&nbsp; It is required when selecting a pre-existing target.
<LI>You can ignore the settings displayed for<B> Target Environment</B> and<B> Image Type</B> since the target definition
already exists (we created it for you).&nbsp; The settings are important when you are defining a new target (i.e., one that
was not predefined).
<LI>Press the Enter key or click on OK.
</OL>
<BR>A target window is created in the project window for the<TT> button</TT> target.
<H3 ID="Making_a_Target"> Making a Target </H3>
<BR>Open Watcom's IDE will automatically generate the sequence of steps required to build or &quot;make&quot; each of the
targets in a project.&nbsp; Note that the targets in a project can be made individually or collectively.&nbsp; To make the<TT>
button.lib</TT> target, do the following.
<OL>
<LI>Click on the window of the target you wish to make.&nbsp; In this case, click on the<TT> button.lib</TT> target window.
<LI>Pull down the<B> Targets</B> menu and select the<B> Make</B> item (you can also do this by clicking on the &quot;Make
the current target&quot; icon on the toolbar, or by right-clicking on the target and selecting the<B> Make</B> item from the
pop-up menu).
</OL>
<BR>The IDE will now construct a makefile based on its knowledge of the target and construction rules, and then invoke the
make utility to create the target, in this case<TT> button.lib.</TT>&nbsp; The output of this procedure is displayed in the
Log window.
<H3 ID="Making_All_Targets"> Making All Targets </H3>
<BR>Click the &quot;Make all targets in the project&quot; icon on the toolbar to make all of the targets in the current project.
&nbsp;If one target depends on another target, the latter target will be made first.&nbsp; In this tutorial<TT> button.lib</TT>
will be made first (there will be nothing to do since it was made previously) and then<TT> draw???.exe,</TT> since<TT> button.lib</TT>
is in the list of files associated with<TT> draw???.exe.</TT>&nbsp; In each case, the IDE constructs makefiles based on its
knowledge of the target and construction rules.&nbsp; The output of this procedure is displayed in the Log window.
<BR><BR><TT><IMG SRC="ide5c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 5.</I></B><B><I></I></B><B> Making one or more targets</B>
<H3 ID="Executing_the_Program"> Executing the Program </H3>
<BR>The project should have built without errors, so now you are ready to execute the program you have developed.
<BR><BR>Click on the<TT> draw???.exe</TT> target window and simply click on the &quot;Run the current target&quot; icon on
the toolbar.&nbsp; You can also do this by selecting<B> Run</B> from the<B> Targets</B> menu, or right-clicking anywhere on
the target window outside of the inner frame and selecting<B> Run</B> from the pop-up menu (right-clicking is context sensitive
and the pop-up menu that results will vary depending on the area of the window in which you right-click).
<BR><BR><TT><IMG SRC="ide6c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 6.</I></B><B><I></I></B><B> The kitchen demo</B>
<BR><BR>The demo you have created is a simple three dimensional drawing of a kitchen.&nbsp; By using either the icons on the
toolbar or the menus you can rotate the picture left, right, up, and down, make the picture brighter or dimmer, move the picture
closer or farther away, and increase or decrease the amount of contrast (this latter feature is found in the &quot;Lighting&quot;
menu).&nbsp; Choose<B> Exit</B> from the<B> File</B> menu to exit the demo program when you are finished.
<H3 ID="Smart_Editing"> Smart Editing </H3>
<BR>The IDE recognizes the type of file you wish to edit, and invokes the appropriate editor for the task.&nbsp; To edit a
file, you either double-click on it or select it and click the &quot;Edit&quot; icon on the toolbar.&nbsp; Files with a<TT>
.c, .cpp, .h, .hpp, .for, .asm</TT> or<TT> .rc</TT> extension are edited with a text editor; files with a<TT> .bmp, .ico,</TT>
or<TT> .cur</TT> extension are edited with the Image Editor; files with a<TT> .dlg</TT> or<TT> .res</TT> extension are edited
with the Resource Editor.
<BR><BR><TT><IMG SRC="ide7c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 7.</I></B><B><I></I></B><B> The Open Watcom Editor for Windows</B>
<BR><BR>Now we will edit one of the source files and introduce an error into the application.
<OL>
<LI>Double-click on the &quot;draw&quot; source file (i.e.,<TT> draw???.c</TT>) to load the source file into the editor.
<LI>Scroll down to line 227 using the keyboard or mouse.&nbsp; You can also pull down the<B> Edit</B> menu, select<B> Goto
Line...,</B> and enter 227.&nbsp; The Open Watcom Editor makes full use of colors and fonts to achieve syntax highlighting.
&nbsp;File templates for C, C++, and FORTRAN files are defined to assist you in distinguishing the components of your code.
<LI>Pull down the<B> Options</B> menu and select the<B> Colors</B> item.
<LI>Click on a color from the palette, drag it to the word<TT> if</TT> on line 218, and release it.&nbsp; All keywords are
now displayed in the chosen color.&nbsp; Drag a different color to a comment line (line 225) and all comments will display
in that color.&nbsp; Similarly, you can select the Fonts item from the Options menu, select a font style and size, and drag
it to your source file.&nbsp; Close the Fonts and Colors dialog by double-clicking in the upper left hand corner.
<LI>You can now save this color and font configuration for all<TT> .cpp</TT> files by pulling down the<B> Options</B> menu,
selecting the<B> General...,</B> item and clicking next to<B> Save configuration on exit</B> in the &quot;Features&quot; box.
&nbsp;Press Enter or click on OK.
<LI>Now, to introduce an error into the application, replace the line<TT> #if 0</TT> with<TT> #if 1.</TT>
<LI>Save your changes by clicking on the &quot;Write the current file to disk&quot; icon or select<B> Save</B> from the<B>
File</B> menu.
<LI>Return to the IDE (by clicking on it if it is visible on your screen, or by using Alt-Tab), re-make your project, and
run it.&nbsp; A fault occurs in your application, so the next step is to track down the problem using the Open Watcom Debugger.
</OL>
<H3 ID="Debugging_the_Program"> Debugging the Program </H3>
<BR>To debug a program it must first be compiled to include debugging information.&nbsp; The IDE maintains two sets of switches
for each target in a project.&nbsp; These are known as the Development Switches and the Release Switches.
<OL>
<LI>Right click on<TT> draw???.c</TT> and select<B> Source options</B> from the pop-up menu.&nbsp; Select<B> C Compiler Switches</B>
from the sub-menu.
<BR><BR>By default, your target is placed in development mode with the debugging switches for the compiler and linker set
to include debugging information.&nbsp; You can either set the switches in each category manually or you can copy the default
Release switches using the CopyRel button.&nbsp; This method of setting switches is especially convenient since you can specify
everything from diagnostic, optimization, and code generation switches to special linker switches all without having to memorize
a cryptic switch name - you simply click next to the switches you wish to use for a particular item.
<LI>Scroll through the categories using the &gt;&gt; button until you get to:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; 6. Debugging Switches</TT>
<BR><BR>We can see that full debugging information was used in the compile, so just click on<B> Cancel</B> to exit this screen.
<BR><BR><TT><IMG SRC="ide8c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 8.</I></B><B><I></I></B><B> Setting compiler switches</B>
<LI>To invoke the debugger, pull down the<B> Targets</B> menu and choose the<B> Debug</B> item or select the &quot;Debug the
current target&quot; icon from the toolbar.
</OL>
<BR>The Open Watcom Debugger is designed to be as convenient and intuitive as possible, while at the same time providing a
comprehensive and flexible environment for serious debugging.&nbsp; You can configure your environment to display exactly
the information you require to be most productive.&nbsp; Among the windows available are source and assembly, modules, functions,
calls, threads, images, watches, locals, globals, file variables, registers, 80x87 FPU, stack, I/O ports, memory display,
and a log window.&nbsp; You can step through your source using the keys or icons on the toolbar.&nbsp; Execute one line at
a time by stepping over calls or stepping into calls, or execute until the current function returns.&nbsp; Right-mouse button
functionality gives context-sensitive pop-up menus.
<BR><BR><TT><IMG SRC="ide9c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 9.</I></B><B><I></I></B><B> The Open Watcom Debugger</B>
<BR><BR>We know that a fault has occurred in<TT> draw???.exe,</TT> so we will run the application and examine the state of
the program when the fault occurs.
<OL>
<LI>Click on the &quot;go!&quot; icon on the toolbar to begin execution of the program.&nbsp; The exception occurs and the
source window shows the line
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; *pwidth = bitmap.bmWidth + 5;</TT>
<BR><BR>in the function<TT> button_size</TT> as the last line executed before the exception.&nbsp; Examining the Locals window
you will see that<TT> pwidth</TT> is a NULL pointer, hence the exception.
<LI>We can now move up the call stack by clicking on the &quot;Move up the call stack&quot; icon on the toolbar (red up arrow)
to follow the program's execution.&nbsp; On the previous line, we see<TT> button_size</TT> is called from<TT> add_button.</TT>
&nbsp;Moving up the call stack again, we see<TT> add_button</TT> is called with NULL as its fifth parameter.&nbsp; An artificial
error has been introduced for the purposes of this tutorial.&nbsp; It is located several lines back in the source file.
<LI>By replacing the line<TT> #if 1</TT> with<TT> #if 0</TT> we can bypass this error.&nbsp; Right-click on the line<TT> #if
1</TT> and select Show, then Line...&nbsp; from the pop-up menus to see the line number which must be corrected, then exit
the debugger.
<LI>Double-click on<TT> draw???.c</TT> to load the source file into the editor.
<LI>Scroll down to line 227 using the keyboard or mouse, or pull down the<B> Edit</B> menu, select<B> Goto Line...,</B> and
enter 227.
<LI>Replace the line<TT> #if 1</TT> with<TT> #if 0</TT> and save your changes by clicking on the &quot;Write the current file
to disk&quot; icon or selecting<B> Save</B> from the<B> File</B> menu.
<LI>Return to the IDE (by clicking on it if it is visible on your screen, or by using Alt-Tab) and re-make your project.
<LI>Run your project to see the kitchen demo.
</OL>
<H3 ID="Using_the_Source_Browser"> Using the Source Browser </H3>
<BR>Suppose you wanted to change the color of the tabletop in your application.&nbsp; You can use the Open Watcom Browser
to determine the code you will need to change.&nbsp; The Open Watcom Browser provides an easy way to examine the class definitions,
member functions, and inheritance trees associated with your C++ code.&nbsp; First, you need to instruct the compiler to emit
Open Watcom Browser information.
<BR><BR><TT><IMG SRC="ide10c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 10.</I></B><B><I></I></B><B> The Open Watcom Browser</B>
<OL>
<LI>Right click on<TT> furnitu.cpp,</TT> then select<B> Source options</B> from the pop-up menus.&nbsp; Select<B> C++ Compiler
Switches</B> from the sub-menu.
<LI>Go to the
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; 6. Debugging Switches</TT>
<BR><BR>category by selecting it from the drop-down list box or by scrolling through the categories using the &gt;&gt; button.
<LI>Select<TT> Emit Browser information [-db]</TT> and click on OK.
<LI>Click the &quot;Make all targets in the project&quot; icon to re-make the project.&nbsp; The compiler will emit Browser
information for<TT> furnitu.cpp</TT> in a file called<TT> draw???.dbr.</TT>&nbsp; Now you are ready to browse the target's
source.
<LI>Pull down the<B> Targets</B> menu and select<B> Browse,</B> or click the &quot;Browse the current target&quot; icon on
the toolbar.&nbsp; The inheritance tree for the target is displayed.
<LI>To view details on any particular class, double-click on the item for information such as the location of the class definition,
the private, public, and protected functions of the class, and the class inheritance.&nbsp; Branches of the inheritance tree
can be collapsed and expanded.&nbsp; A variety of tools are available to help you navigate your C++ source.&nbsp; Double-click
on the<TT> table</TT> class.
<LI>Double-click on the function<TT> top_and_four_legs()</TT> to see the details on this function.
<LI>Select the variable<TT> tabletop,</TT> pull down the<B> Detail</B> menu, and select the<B> Goto Definition...</B>&nbsp;
item.&nbsp; The Editor is invoked, loading the file<TT> furnitu.cpp</TT> which contains the definition of<TT> top_and_four_legs.</TT>
<LI>Next we will make some changes to<TT> furnitu.cpp</TT> in order to change the color of the tabletop.&nbsp; Scroll down
to line 143 using the keyboard or mouse, or pull down the<B> Edit</B> menu, select<B> Goto Line...,</B> and enter 143
<LI>Replace the line
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; tabletop-&gt;rgb(0,255,255);</TT>
<BR><BR>with
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; tabletop-&gt;black();</TT>
<LI>Save your changes by clicking on the &quot;Write the current file to disk&quot; icon or selecting<B> Save</B> from the<B>
File</B> menu.
<LI>Shut down the Browser before re-making the project.
<LI>Return to the IDE (by clicking on it if it is visible on your screen, or by using Alt-Tab).
<LI>Click the &quot;Make all targets in the project&quot; icon to re-make the project.
</OL>
<H3 ID="Correcting_an_Error"> Correcting an Error </H3>
<BR>An error is encountered during the make and error message(s) appear in the log window.&nbsp; Additional information on
the error is available by selecting the error, pulling down the<B> Log</B> menu and selecting the<B> Help on Message</B> item.
<OL>
<LI>Double-click on the error message
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; furnitu.cpp (132): Error! E029: (col 15) symbol 'black' has not been declared.</TT>
<BR><BR>The offending source file (<TT> furnitu.cpp</TT>) is loaded into the Editor and the cursor is positioned at the line
which caused the error.&nbsp; Apparently, black has not been defined as a color.
<LI>Restart the Browser.
<LI>Double-click on<TT> color</TT> in the Inheritance window to see the member functions of the class<TT> color.</TT>&nbsp;
Among our choices are<TT> blue(), green(),</TT> and<TT> red().</TT>
<LI>Press the Alt-Tab key combination to return to the Editor and replace the line
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; tabletop-&gt;black();</TT>
<BR><BR>with
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; tabletop-&gt;red();</TT>
<LI>Save your changes.
<LI>Return to the IDE and re-make the project.
<LI>Run the program to see the changes you have made to the tabletop.
</OL>
<H3 ID="Editing_a_Bitmap"> Editing a Bitmap </H3>
<BR>You can edit bitmaps, icons, or cursors associated with your project using Open Watcom's Image Editor.&nbsp; Double-click
on a file with a<TT> .bmp, .ico,</TT> or<TT> .cur</TT> extension and the file is loaded into the Image Editor.&nbsp; The editor
has many features to design your images, including resizing, rotation, shifting, and a utility to take a &quot;snapshot&quot;
of another image and import it.
<BR><BR><TT><IMG SRC="ide11c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 11.</I></B><B><I></I></B><B> The Open Watcom Image Editor</B>
<BR><BR>Suppose you wanted to change the color of the right-arrow icon in your application.
<OL>
<LI>If the &quot;Folder&quot; icon next to<TT> .bmp</TT> is closed, click on it to restore all the files with a<TT> .bmp</TT>
extension to the file list.
<LI>Scroll the window until the file<TT> right.bmp</TT> is visible.
<LI>Double-click on<TT> right.bmp</TT> in the<TT> draw???.exe</TT> target window.
<LI>Select the &quot;Paint Can&quot; icon from the Tool Palette.
<LI>Select a color from the Color Palette.
<LI>Click on the arrow.
<LI>Save your changes using the &quot;Save&quot; icon on the toolbar and exit the Image Editor.
<LI>Click the &quot;Make all targets in the project&quot; icon to rebuild the project with the change incorporated.
</OL>
<H3 ID="Editing_Menus"> Editing Menus </H3>
<BR>Next, you will add source files to the list of items that make up<TT> draw???.exe.</TT>
<OL>
<LI>Pull down the<B> Sources</B> menu and select the<B> New Source...</B>&nbsp; item.
<DL>
<DT>Note:
<DD>You can do this either by choosing from the menu bar or by positioning the mouse over the file list area and clicking the
right mouse button.&nbsp; The IDE displays a pop-up menu from which you can choose the desired action.
</DL>
<LI>Enter the filename<TT> draw.res</TT> (or<TT> drawos2.res</TT> for OS/2).&nbsp; For OS/2, click OK when you have entered
the source file name.&nbsp; For all other systems, click on Add when you have entered the source file name and then click
on Close.&nbsp; Now we will remove the<TT> .rc</TT> file from the project so that our changes to the<TT> .res</TT> file will
not be overwritten.&nbsp; When an<TT> .rc</TT> file is present, the<TT> .res</TT> file is generated from the<TT> .rc</TT>
file.
<LI>Right click on<TT> draw.rc</TT> (or<TT> drawos2.rc</TT> for OS/2), then select<B> Remove Source</B> from the pop-up menu.
<LI>Double-click on<TT> draw.res</TT> (or<TT> drawos2.res</TT>).&nbsp; The Resource Editor is invoked, displaying all the
available resources (in this case, icons, bitmaps, and menus).
<BR><BR><TT><IMG SRC="ide12c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 12.</I></B><B><I></I></B><B> The Open Watcom Resource Editor</B>
<LI>Click on &quot;Menu Resources&quot;.
<LI>Double-click on &quot;DrawMenu&quot; in the right-hand box.&nbsp; This will bring up the Menu Editor.&nbsp; The Menu Editor
displays the menus defined for the resource<TT> DrawMenu.</TT>&nbsp; You can specify pop-up menus, menu items and sub-items,
text, separators, attributes, break styles, and memory flags.
<BR><BR><TT><IMG SRC="ide13c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 13.</I></B><B><I></I></B><B> The Open Watcom Menu Editor</B>
<LI>Click on<TT> MENUITEM &quot;&amp;Dimmer&quot;</TT> in the item list window.
<LI>In the &quot;Item Text&quot; window change the item to<TT> &amp;Darker</TT> and then click on the &quot;Change&quot; button.
<LI>Select<B> Update</B> from the<B> File</B> menu or click on the &quot;Update the file with this menu&quot; icon.
<LI>Exit the Menu Editor.
<LI>Now, select<B> Save</B> from the<B> File</B> menu or click on the &quot;Save this file&quot; icon and exit the Resource
Editor.
<LI>Click the &quot;Make all targets in the project&quot; icon to re-make the project.
</OL>
<H3 ID="Sampling_and_Profiling_an_Executable"> Sampling and Profiling an Executable </H3>
<BR>Together, the Open Watcom Execution Sampler and the Open Watcom Execution Profiler allow you to pinpoint the areas of
your code that are the most heavily used, indicating possible candidates for performance improvements.
<OL>
<LI>Click on the<TT> draw???.exe</TT> target.
<LI>Select the<B> Sample</B> item from the<B> Targets</B> menu item, or click on the &quot;Run and sample the current target&quot;
icon from the toolbar.&nbsp; The Open Watcom Execution Sampler is invoked and your application begins to execute.
<LI>Try rotating and resizing the image a few times.&nbsp; The sampler takes a &quot;snapshot&quot; of the code that is being
executed at regular intervals.&nbsp; Exit the application.&nbsp; A samples file with extension<TT> .smp</TT> is created in
the current directory.&nbsp; This file is input for the profiler.
<LI>You are now ready to profile the executable.&nbsp; Do this by selecting<B> Profile</B> from the<B> Targets</B> menu, or
by clicking on the &quot;Profile the current target&quot; icon on the toolbar.&nbsp; The profiler scans the<TT> .smp</TT>
file and reports the activity in the various modules of the application.&nbsp; The percentage of time spent in the modules
is indicated as an absolute percentage (percent of total samples) and as a relative percentage (percent of samples in the<TT>
.exe</TT> image).
<LI>Double-click on the module or routine names to step down to the exact source being executed when a sample was taken.&nbsp;
For more details, you can adjust the sampling rate of the Sampler to get a better picture of your code.&nbsp; To do this,
exit the Profiler, pull down the<B> Targets</B> menu, and select<B> Target options,</B> then<B> Sample Switches...</B>&nbsp;
from the pop-up menus.&nbsp; Specify a sampling rate such as 2 (for 2 milliseconds), click on OK, then run the Sampler and
Profiler again.
</OL>
<BR><TT><IMG SRC="ide14c.bmp" ALIGN=MIDDLE></TT>
<BR><B><I>Figure 14.</I></B><B><I></I></B><B> The Open Watcom Execution Profiler</B>
<H3 ID="Saving_the_Project_and_Terminating_the_Session"> Saving the Project and Terminating the Session </H3>
<BR>You can now exit the IDE session by selecting<B> Exit</B> from the<B> File</B> menu.&nbsp; If you have not already saved
your project, you will be prompted to do so.&nbsp; Choose &quot;Yes&quot; and the session ends.
<H2 ID="Tutorial_Review"> Tutorial Review </H2>
<BR>In this tutorial, you created a project called<TT> kitchen.wpj,</TT> which was composed of two targets:<TT>&nbsp; draw???.exe</TT>
and<TT> button.lib.</TT>&nbsp; You compiled and linked it into an executable program using the WMAKE utility, the Open Watcom
C and C++ compilers, and the Open Watcom Linker.&nbsp; You executed it both directly and under the control of the Open Watcom
Debugger..&nbsp; You browsed the source, and made changes using the text and resource editors.&nbsp; Finally, you sampled
and profiled the application.
<BR><BR>When you saved the project, you created the following permanent files:
<UL>
<LI><TT> kitchen.wpj</TT> - describes the screen layout and refers to the target files called<TT> draw???.tgt</TT> and<TT>
button.tgt.</TT>
<LI><TT> draw???.tgt</TT> - describes the target executable<TT> draw???.exe</TT> and all switches required to link it.&nbsp;
It also describes the<TT> .c</TT> and<TT> .cpp</TT> files and switches required to compile them.
<LI><TT> button.tgt</TT> - describes the target library and all switches required to create it.&nbsp; It also describes the<TT>
.c</TT> file and the switches used to build the library.
</UL>
<H1 ID="Documentation"> Documentation </H1>
<BR>The following manuals comprise the Open Watcom C/C++ documentation set.&nbsp; When you install the software, portions
of the documentation set are provided as on-line help files.&nbsp; Subsequent sections describe how to access this on-line
help.
<BR><BR>The following describes the titles in the Open Watcom C/C++ documentation set.
<DL>
<DT>Open Watcom C/C++ User's Guide
<DD>This manual describes how to use Open Watcom C/C++.&nbsp; It contains an introduction to the compiler and a tutorial section.
&nbsp;It also describes compiler options, precompiled header files, libraries, memory models, calling conventions, pragmas,
in-line assembly, ROM based applications, and environment variables.
<DT>Open Watcom C/C++ Tools User's Guide
<DD>This manual describes the command line oriented tools including the compile and link utility, library manager, object file
disassembler, far call optimization tool, assembler, patch utility, strip utility, make utility, and touch utility.
<DT>Open Watcom Graphical Tools User's Guide
<DD>This manual describes Open Watcom's Windows and OS/2 graphical tools including the Integrated Development Environment, Browser,
Dr.&nbsp; Watcom, Spy, DDE Spy, Image Editor, Resource Editor, Sampler/Profiler, Resource Compiler, Heap Walker, Zoom, and
Editor.
<DT>Open Watcom C/C++ Programmer's Guide
<DD>This manual includes 5 major sections each of which describes operating system specific development issues.&nbsp; The operating
systems covered include extended DOS, OS/2, Windows 3.x, Windows NT/2000/XP, Windows 95/98/Me, 32-bit Windows 3.x (using Open
Watcom's Supervisor technology) and Novell NLMs.&nbsp; Topics include creating a sample program, operating system specific
error messages, and debugging techniques.
<DT>Open Watcom C Language Reference
<DD>This manual describes the ISO C programming language and extensions which are supported by Open Watcom C.
<DT>Open Watcom C Library Reference
<DD>This manual describe the C and graphics libraries supported by Open Watcom C/C++.
<DT>Open Watcom C++ Class Library Reference
<DD>This manual provides a comprehensive reference to the C++ class libraries provided with Open Watcom C/C++.
<DT>Open Watcom Debugger User's Guide
<DD>This manual describes the Open Watcom Debugger and discusses advanced debugging techniques.
<DT>Open Watcom Linker User's Guide
<DD>This manual describes how to use the Open Watcom Linker to generate executables for target systems such as extended DOS, Windows
3.x, Windows 95/98/Me, Windows NT/2000/XP, OS/2, and Novell NLMs.
</DL>
<H2 ID="Accessing_OnMline_Documentation"> Accessing On-line Documentation </H2>
<BR>The following sections describe how to access the on-line help that is available for DOS, Windows and OS/2.
<H3 ID="OnMline_Documentation_under_DOS"> On-line Documentation under DOS </H3>
<BR>The Open Watcom Help program,<B><I> WHELP</I></B> , may be used under DOS to access on-line documentation.&nbsp; The Open
Watcom Help command line syntax is:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WHELP help_file [topic_name]</TT>
<BR><BR><B>Notes:</B>
<OL>
<LI>If<B> help_file</B> is specified without an extension then &quot;.IHP&quot; is assumed.
<LI>The<B> topic_name</B> parameter is optional.
<LI>If<B> topic_name</B> is not specified, the default topic is &quot;Table of Contents&quot;.
<LI>If<B> topic_name</B> contains spaces then it must be enclosed in quotes.
</OL>
<BR>The following help files are available:
<DL>
<DT>CGUIDE
<DD><B><I> Open Watcom C/C++ User's Guide</I></B> (excludes C and C++ Diagnostic Messages appendices which are available as separate
help files)
<DT>CLIB
<DD><B><I> Open Watcom C Library Reference</I></B>
<DT>CLR
<DD><B><I> Open Watcom C Language Reference</I></B>
<DT>CMIX
<DD><B><I> Open Watcom C/C++ Master Index</I></B>
<DT>CPPLIB
<DD><B><I> Open Watcom C++ Class Library Reference</I></B>
<DT>LGUIDE
<DD><B><I> Open Watcom Linker User's Guide</I></B>
<DT>PGUIDE
<DD><B><I> Open Watcom C/C++ Programmer's Guide</I></B>
<DT>C_README
<DD><B><I> Open Watcom C/C++ Getting Started manual</I></B>
<DT>RESCOMP
<DD>Documentation for the Open Watcom Resource Compiler (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>CTOOLS
<DD><B><I> Open Watcom C/C++ Tools User's Guide</I></B>
<DT>WD
<DD><B><I> Open Watcom Debugger User's Guide</I></B>
<DT>WPROF
<DD>Documentation for the Open Watcom Execution Sampler and Open Watcom Execution Profiler (excerpt from the<B><I> Open Watcom
Graphical Tools User's Guide</I></B>)
<DT>WCCERRS
<DD>Documentation for the Open Watcom C Diagnostic Messages (excerpt from the<B><I> Open Watcom C/C++ User's Guide</I></B>).
<DT>WPPERRS
<DD>Documentation for the Open Watcom C++ Diagnostic Messages (excerpt from the<B><I> Open Watcom C/C++ User's Guide</I></B>).
</DL>
<H3 ID="OnMline_Documentation_under_Windows"> On-line Documentation under Windows </H3>
<BR>On-line documentation is presented in the form of Windows Help files (&quot;.HLP&quot; files).&nbsp; When the software
is installed under Windows 3.x, Windows 95/98/Me or Windows NT/2000/XP, a number of program groups are created.&nbsp; You
can access the on-line document by opening a program group and double-clicking on a help icon.
<DL>
<DT>Open Watcom C/C++ Group
<DD>
<DT>Getting Started
<DD><B><I> Open Watcom C/C++ Getting Started</I></B>
</DL>
<DL>
<DT>Open Watcom C/C++ Tools Help Group
<DD>
<DT>Accelerator Editor Help
<DD>Documentation for the Accelerator Editor (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>C Error Messages
<DD>Documentation for the Open Watcom C Diagnostic Messages (excerpt from the<B><I> Open Watcom C/C++ User's Guide</I></B>)
<DT>C++ Error Messages
<DD>Documentation for the Open Watcom C++ Diagnostic Messages (excerpt from the<B><I> Open Watcom C/C++ User's Guide</I></B>)
<DT>C Language Reference
<DD><B><I> Open Watcom C Language Reference</I></B>
<DT>C Library Reference
<DD><B><I> Open Watcom C Library Reference</I></B>
<DT>C++ Library Reference
<DD><B><I> Open Watcom C++ Class Library Reference</I></B>
<DT>C/C++ Master Index
<DD>The master index for all of the Open Watcom C/C++ on-line help
<DT>DDE Spy Help
<DD>Documentation for the DDE Spy utility (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Debugger Help
<DD><B><I> Open Watcom Debugger User's Guide</I></B>
<DT>Dialog Editor Help
<DD>Documentation for the Dialogue Editor (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Dr.&nbsp; Watcom Help
<DD>Documentation for Dr.&nbsp; Watcom (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Editor Help
<DD>Documentation for the Open Watcom Editor (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Heap Walker Help
<DD>Documentation for the Heap Walker utility (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>IDE Help
<DD>Documentation for the Interactive Development Environment (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Image Editor Help
<DD>Documentation for the Image Editor (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Linker Guide
<DD><B><I> Open Watcom Linker User's Guide</I></B>
<DT>Menu Editor Help
<DD>Documentation for the Menu Editor (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Profiler Help
<DD>Documentation for the Open Watcom Execution Sampler and Open Watcom Execution Profiler (excerpt from the<B><I> Open Watcom
Graphical Tools User's Guide</I></B>)
<DT>Programmer's Guide
<DD><B><I> Open Watcom C/C++ Programmer's Guide</I></B>
<DT>Resource Compiler Help
<DD>Documentation for the Resource Compiler (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Resource Editor Help
<DD>Documentation for the Resource Editor (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Source Browser Help
<DD>Documentation for the Browser (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Spy Help
<DD>Documentation for the Spy utility (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>String Editor Help
<DD>Documentation for the String Editor (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Tools Guide
<DD><B><I> Open Watcom C/C++ Tools User's Guide</I></B>
<DT>User's Guide
<DD><B><I> Open Watcom C/C++ User's Guide</I></B> (excludes C and C++ Diagnostic Messages appendices which are available as separate
help files)
<DT>Zoom Help
<DD>Documentation for the Zoom utility (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
</DL>
<H3 ID="OnMline_Documentation_under_OSD2"> On-line Documentation under OS/2 </H3>
<BR>On-line documentation is presented in the form of OS/2 Information files (&quot;.INF&quot; files).&nbsp; When the software
is installed under OS/2, the Open Watcom C/C++ folder is created.&nbsp; You can access the on-line document by opening the
Open Watcom C/C++ folder and double-clicking on a help icon.
<DL>
<DT>C Error Messages
<DD>Documentation for the C Diagnostic Messages (excerpt from the<B><I> Open Watcom C/C++ User's Guide</I></B>)
<DT>C++ Error Messages
<DD>Documentation for the C++ Diagnostic Messages (excerpt from the<B><I> Open Watcom C/C++ User's Guide</I></B>)
<DT>C Language Reference
<DD><B><I> Open Watcom C Language Reference</I></B>
<DT>C Library Reference
<DD><B><I> Open Watcom C Library Reference</I></B>
<DT>C++ Library Reference
<DD><B><I> Open Watcom C++ Class Library Reference</I></B>
<DT>C/C++ Master Index
<DD>The master index for all of the Open Watcom C/C++ on-line help
<DT>Debugger Help
<DD><B><I> Open Watcom Debugger User's Guide</I></B>
<DT>Getting Started
<DD><B><I> Open Watcom C/C++ Getting Started</I></B>
<DT>IDE Help
<DD>Documentation for the Interactive Development Environment (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Profiler Help
<DD>Documentation for the Open Watcom Execution Sampler and Open Watcom Execution Profiler (excerpt from the<B><I> Open Watcom
Graphical Tools User's Guide</I></B>)
<DT>Programmer's Guide
<DD><B><I> Open Watcom C/C++ Programmer's Guide</I></B>
<DT>Source Browser Help
<DD>Documentation for the Open Watcom Browser (excerpt from the<B><I> Open Watcom Graphical Tools User's Guide</I></B>)
<DT>Tools Guide
<DD><B><I> Open Watcom C/C++ Tools User's Guide</I></B>
<DT>User's Guide
<DD><B><I> Open Watcom C/C++ User's Guide</I></B> (excludes C and C++ Diagnostic Messages appendices which are available as separate
help files)
</DL>
<H1 ID="Benchmarking_Hints"> Benchmarking Hints </H1>
<BR>The Open Watcom C/C++ compiler contains many options for controlling the code to be produced.&nbsp; It is impossible to
have a certain set of compiler options that will produce the absolute fastest execution times for all possible applications.
&nbsp;With that said, we will list the compiler options that we think will give the best execution times for most applications.
&nbsp;You may have to experiment with different options to see which combination of options generates the fastest code for
your particular application.
<BR><BR>The recommended options for generating the fastest 16-bit Intel code are:&nbsp; 
<DL>
<DT>Pentium Pro
<DD>-onatx -oh -oi+ -ei -zp8 -6 -fpi87 -fp6
<DT>Pentium
<DD>-onatx -oh -oi+ -ei -zp8 -5 -fpi87 -fp5
<DT>486
<DD>-onatx -oh -oi+ -ei -zp8 -4 -fpi87 -fp3
<DT>386
<DD>-onatx -oh -oi+ -ei -zp8 -3 -fpi87 -fp3
<DT>286
<DD>-onatx -oh -oi+ -ei -zp8 -2 -fpi87 -fp2
<DT>186
<DD>-onatx -oh -oi+ -ei -zp8 -1 -fpi87
<DT>8086
<DD>-onatx -oh -oi+ -ei -zp8 -0 -fpi87
</DL>
<BR>The recommended options for generating the fastest 32-bit Intel code are:&nbsp; 
<DL>
<DT>Pentium Pro
<DD>-onatx -oh -oi+ -ei -zp8 -6 -fp6
<DT>Pentium
<DD>-onatx -oh -oi+ -ei -zp8 -5 -fp5
<DT>486
<DD>-onatx -oh -oi+ -ei -zp8 -4 -fp3
<DT>386
<DD>-onatx -oh -oi+ -ei -zp8 -3 -fp3
</DL>
<BR>The &quot;oi+&quot; option is for C++ only.&nbsp; Under some circumstances, the &quot;ob&quot; and &quot;ol+&quot; optimizations
may also give better performance with 32-bit Intel code.
<BR><BR>Option &quot;on&quot; causes the compiler to replace floating-point divisions with multiplications by the reciprocal.
&nbsp;This generates faster code (multiplication is faster than division), but the result may not be the same because the
reciprocal may not be exactly representable.
<BR><BR>Option &quot;oe&quot; causes small user written functions to be expanded in-line rather than generating a call to
the function.&nbsp; Expanding functions in-line can further expose other optimizations that couldn't otherwise be detected
if a call was generated to the function.
<BR><BR>Option &quot;oa&quot; causes the compiler to relax alias checking.
<BR><BR>Option &quot;ot&quot; must be specified to cause the code generator to select code sequences which are faster without
any regard to the size of the code.&nbsp; The default is to select code sequences which strike a balance between size and
speed.
<BR><BR>Option &quot;ox&quot; is equivalent to &quot;obmiler&quot; and &quot;s&quot; which causes the compiler/code generator
to do branch prediction (&quot;ob&quot;), generate 387 instructions in-line for math functions such as sin, cos, sqrt (&quot;om&quot;),
expand intrinsic functions in-line (&quot;oi&quot;), perform loop optimizations (&quot;ol&quot;), expand small user functions
in-line (&quot;oe&quot;), reorder instructions to avoid pipeline stalls (&quot;or&quot;), and to not generate any stack overflow
checking (&quot;s&quot;).&nbsp; Option &quot;or&quot; is very important for generating fast code for the Pentium and Pentium
Pro processors.
<BR><BR>Option &quot;oh&quot; causes the compiler to attempt repeated optimizations (which can result in longer compiles but
more optimal code).
<BR><BR>Option &quot;oi+&quot; causes the C++ compiler to expand intrinsic functions in-line (just like &quot;oi&quot;) but
also sets the<B> inline_depth</B> to its maximum (255).&nbsp; By default,<B> inline_depth</B> is 3.&nbsp; The<B> inline_depth</B>
can also be changed by using the C++<TT> inline_depth</TT> pragma.
<BR><BR>Option &quot;ei&quot; causes the compiler to allocate at least an &quot;int&quot; for all enumerated types.
<BR><BR>Option &quot;zp8&quot; causes all data to be aligned on 8 byte boundaries.&nbsp; The default is &quot;zp2&quot; for
the 16-bit compiler and &quot;zp8&quot; for 32-bit compiler.&nbsp; If, for example, &quot;zp1&quot; packing was specified
then this would pack all data which would reduce the amount of data memory required but would require extra clock cycles to
access data that is not on an appropriate boundary.
<BR><BR>Options &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot; and &quot;6&quot;
emit Intel code sequences optimized for processor-specific instruction set features and timings.&nbsp; For 16-bit Intel applications,
the use of these options may limit the range of systems on which the application will run but there are execution performance
improvements.
<BR><BR>Options &quot;fp2&quot;, &quot;fp3&quot;, &quot;fp5&quot; and &quot;fp6&quot; emit Intel floating-point operations
targetted at specific features of the math coprocessor in the Intel series.&nbsp; For 16-bit Intel applications, the use of
these options may limit the range of systems on which the application will run but there are execution performance improvements.
<BR><BR>Option &quot;fpi87&quot; causes in-line Intel 80x87 numeric data processor instructions to be generated into the object
code for floating-point operations.&nbsp; Floating-point instruction emulation is not included so as to obtain the best floating-point
performance in 16-bit Intel applications.
<BR><BR>For 32-bit Intel applications, the use of the &quot;fp5&quot; option will give good performance on the Intel Pentium
but less than optimal performance on the 386 and 486.&nbsp; The use of the &quot;5&quot; option will give good performance
on the Pentium and minimal, if any, impact on the 386 and 486.&nbsp; Thus, the following set of options gives good overall
performance for the 386, 486 and Pentium processors.
<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp; -onatx -oh -oi+ -ei -zp8 -5 -fp3
<H1 ID="Release_Notes_for_Open_Watcom_CDCPP_2_0"> Release Notes for Open Watcom C/C++ 2.0 </H1>
<BR>There are a number of enhancements and changes in this new version of Open Watcom C/C++.&nbsp; The following sections
outline most of the major changes.&nbsp; You should consult the User's Guide for full details on these and other changes made
to the compiler and related tools.&nbsp; You should check the next section to determine if you need to recompile your application.
<H2 ID="Differences_from_Open_Watcom_version_1_9"> Differences from Open Watcom version 1.9 </H2>
<BR>Following is a list of changes made in Open Watcom C/C++ 2.0:
<UL>
<LI>OW tools were ported to 64-bit host platform (Linux and Windows)
</UL>
<H2 ID="Differences_from_Open_Watcom_version_1_8"> Differences from Open Watcom version 1.8 </H2>
<BR>Following is a list of changes made in Open Watcom C/C++ 1.9:
<UL>
<LI>The NULL macro is now defined as ((void *)0) for C; for C++, NULL is still defined as 0 or 0L as previously.&nbsp; This
change may require modifications to user code if NULL was incorrectly used as an integer constant.&nbsp; Note:&nbsp; The 16-bit
windows.h header defines NULL as 0; for 16-bit Windows programming, the effective definition of NULL depends on whether windows.h
or one of the standard C headers is included first.
<LI>The C compiler has improved handling of the _Bool type (C99 mode specific).&nbsp; The _Bool type can now generally be
used in expressions wherever an integer may be used.
<LI>The C compiler now considers enumeration types to be compatible with their underlying integer type, as required by ISO
C.&nbsp; Note that the choice of the underlying type varies and should not be relied upon.
<LI>The C compiler now correctly handles initialization of static floating-point variables with 64-bit integer constants.
<LI>The C and C++ compilers now support the __int8, __int16, and __int32 extension keywords.
<LI>The 16-bit C and C++ compilers now allow the :&gt; operator to be used in initializers of variables with static storage,
as long as both operands are integer constants.&nbsp; This enables the use of MK_FP macro in initializers.
<LI>The C++ compiler now treats warning W737, implicit conversion of pointers to integral types of same size, as an error.
<LI>The C++ compiler now supports several new warnings:&nbsp; W931, warn about meaningless cv-qualifier in casts; W932, warn
about meaningless cv-qualifier in function return types; and W933, warn about use of C-style casts in C++ code.&nbsp; These
warnings must be explicitly enabled through the -wce option.
<LI>The code generator now eliminates redundant epilogue code for 32-bit Intel processors when doing size optimization.
<LI>The code generator correctly handles constant folding of signed 64-bit integer division and right shift operations.
<LI>The code generator now supports constant folding of 64-bit integer modulo operations.
<LI>The code generator no longer mishandles floating-point comparisons where one operand is a variable of type float and the
other operand is a constant of type double or long double.
<LI>The code generator no longer produces incorrect code when a constant expression of type float (e.g., 1.0f + 1.0f) is passed
as an argument to a function which takes a float argument.
<LI>The code generator now makes more accurate decision when choosing whether a multiplication by a constant should be replaced
by a sequence of shifts and additions.&nbsp; Results depend on target CPU type.
<LI>The 386 code generator now produces a CDQ instruction except when targeting a Pentium and optimizing for speed, when a
MOV/SAR sequence is emitted as previously when converting a signed 32-bit integer to 64-bit.
<LI>The code generator no longer emits redundant CS segment overrides when creating calls to symbols imported from DLLs.
<LI>The Win32 API headers and import libraries have been updated to support the new interfaces in Windows 7.
<LI>Support for 16-bit OLE 2.0 has been added.
<LI>Support for RDOS targets has been added.
<LI>Support for ZDOS targets has been added to the linker.
<LI>The floating-point exception handler for 16-bit DOS no longer crashes if the user signal handler modified DS.
<LI>The _floodfill() graphics library function now works correctly again.
<LI>The library no longer leaks memory when a thread created by _beginthread() terminates.
<LI>The %Lf format specifier (and related format specifiers) used with printf family functions now works.
<LI>The library now contains _fseeki64 and _ftelli64 functions to handle 64-bit file offset pointer for streams.
<LI>The library implementations of _lseeki64, _telli64, _fileleni64, _(w)stati64, _(w)findfirsti64, _(w)findnexti64 on OS/2
now properly use 64-bit file sizes and offsets.
<LI>The library implementations of puts and putws now correctly return EOF if they fail
<LI>DOS long file name (LFN) support has been added (new doslfn??.lib model specific libraries contain DOS LFN version of
appropriate modules).&nbsp; By default DOS LFN support is enabled.&nbsp; It can be switch off by setup LFN=N environment variable.
<LI>The wasm assembler now implements support for Turbo Assembler compatible IDEAL mode.&nbsp; The -zcm option may be used
to select this feature.
<LI>The assembler now supports built-in @code and @data symbols.
<LI>The assembler now supports ELSEIF directives for conditional assembly.
<LI>The assembler no longer incorrectly assumes that absolute segments are byte aligned; they are paragraph (16 byte) aligned.
<LI>The built-in cd command in wmake now supports quoted paths with spaces.
<LI>The linker now supports libraries in BSD, COFF, and GNU ar format.
<LI>The linker now allows stack sizes smaller than 512 bytes to be specified and does not silently override them.&nbsp; However,
a new warning (W1172) will be emitted in such case.
<LI>A FULLHEADER option specific to the DOS EXE format has been added to the linker.&nbsp; Please see the Linker Guide for
further information.
<LI>The library manager (wlib) now supports BSD, COFF, and GNU variants of the ar library archive format.&nbsp; Extended -fab,
-fag, -fac options select the variant.&nbsp; The -fa option now selects default format depending on host platform.
<LI>This release introduces Open Watcom's IPF compiler (wipfc) used for creating help files on OS/2.
<LI>Documentation is now provided in Windows CHM format as an option.
<LI>The vi editor now supports non-ASCII characters in the 0x80-0xFF range.
<LI>The console version of the vi editor for Windows now uses standard Windows keyboard processing; AltGr and dead keys now
function correctly.&nbsp; Additionally, Caps Lock is only effective for keys which generate characters.
<LI>The editor now supports for syntax highlight of awk files.
<LI>The editor now supports a Select All command.
<LI>The windowed editor now holds the position of the replace and search/replace dialogs between invocations.
<LI>The wcl and wcl386 utilities now work correctly on a Linux host.
<LI>The DOS NetBIOS trap file and debug server have been modified to work when running on Windows NT (through NTVDM).
<LI>The 16-bit Windows GUI tools no longer require CTL3DV2.DLL, but still use it if the library is present.
</UL>
<H2 ID="Differences_from_Open_Watcom_Version_1_7"> Differences from Open Watcom Version 1.7 </H2>
<BR>Following is a list of changes made in Open Watcom C/C++ 1.8:
<UL>
<LI>The C compiler now performs stricter type checking on enumerated types.&nbsp; Previously, enums were treated as their
underlying type (signed/unsigned char, int, etc.) for type checks.
<LI>The C compiler now adds location information about enumerated symbols in appropriate diagnostics.
<LI>The C compiler has been improved with respect to the handling of near/far pointers, especially when converting or comparing
pointers and integers of different sizes.
<LI>The C compiler now properly recognizes functions that do not return, such as longjmp(), and correctly diagnoses control
flow issues such as unreachable code or missing return statements.
<LI>The C compiler now supports a #pragma alias.&nbsp; This pragma emits alias records into the object file for processing
by the linker.
<LI>The C compiler now has larger capacity and can compile some complex source files that previously caused out of memory
errors (E1064).
<LI>The C compiler now always warns about unprototyped functions (W131).&nbsp; Previously, some forgivable instances of missing
prototypes were undiagnosed by default, which caused users to write non-portable code usually by accident.
<LI>Warning W139 (Divisor for modulo or division operation is zero) has been added to the C compiler.&nbsp; This warning is
triggered whenever the right operand of an integer division or modulo operation is a constant expression with the value of
zero.
<LI>The handling of pragma aux is now correct in cases where code is emitted and a function body already exists for the corresponding
symbolic name.
<LI>Various fixes to the handling of the include_alias pragma have been made.
<LI>The C and C++ compilers now have diagnostics for meaningless comparison of 64-bit and bit-field operands.
<LI>The C and C++ compilers now have conversion tables from CP=1250,1252 (Latin-2,1 for Windows ANSI) to Unicode to support
Windows programming.
<LI>The C++ compiler now supports the explicit specification of function template arguments.&nbsp; For example:&nbsp; f&lt;T&gt;().
<LI>The C++ compiler now uses lazy instantiation for class templates and template members.&nbsp; Only the members actually
used are instantiated.
<LI>The C++ compiler now allows member templates to be defined outside their class.
<LI>Numerous bugs in the C++ compiler have been fixed.
<LI>The C++ compiler allows a class declaration with modifiers to have those modifiers propagate into the class definition.
<LI>When -SH switch is used with the Fortran compiler, the default size of an integer constant is now INTEGER*2.
<LI>The Fortran compiler no longer crashes when equivalencing common/global with automatics.
<LI>Fortran processing for the text record EOL has been normalized.&nbsp; On UNIX systems write/seek uses LF and read uses
LF or CRLF.&nbsp; On non-UNIX systems write/seek uses CRLF and read uses LF or CRLF.
<LI>Various code generation bug fixes to both the 16-bit and 32-bit compilers have been made.
<LI>The Win32 headers and libraries are now Open Watcom's own internal version.&nbsp; The MinGW headers and libraries are
no longer being used.&nbsp; The new headers and libraries provider greater compatibility with the Microsoft SDK and better
support for Microsoft Vista.
<LI>The version of Causeway in the official distribution is now version 4.03.
<LI>The Linux run time libraries now have recvfrom() and sendto() implementations.
<LI>A POSIX compatible fnmatch() function and a corresponding fnmatch.h header has been added.
<LI>The _dos_getfileattr() function no longer crashes in large data models on 16-bit DOS and Windows.
<LI>The C run time library now has implementations of the following functions to improve compatibility with other compilers:
&nbsp;_chmod, _chsize, _creat, _dup2, _eof, _filelength, _isatty, _read, _sopen, _tell, _umask, _unlink, and _write.
<LI>The date and time arguments to _dos_getftime() and _dos_setftime() are now using 'unsigned int' type instead of 'unsigned
short'.&nbsp; This change has been made to improve compatibility with other compilers.
<LI>The segment argument used with _dos_allocmem(), _dos_freemem() and _dos_setblock() is now unsigned int instead of unsigned
short.&nbsp; This change was made for compatibility with other compilers.
<LI>The Fortran run time environment now works on Linux.
<LI>The Linux Fortran run time libraries now have FSYSTEM and FSPAWN implementations.
<LI>The Fortran run time now exposes the saved stack pointer for when crashes occur in the IO subsystems.
<LI>The debugger's options context menu now has an option to allow all child nodes to be expanded recursively.
<LI>The debugger now uses the full size of the type when displaying hexadecimal values (for example 0x03 instead of 0x3).
<LI>The debugger now has a new menu entry to change the display format of all values in an array (all hex or all decimal).
<LI>The debugger now supports break on write rather than just break on change.&nbsp; The trap must support exact breakpoints
for this to happen.
<LI>The Windows debugger now properly handles quoted program names.
<LI>The Windows debugger now has proper color support.
<LI>The NetWare TCP server and trap have been updated for NW6.5SP7 with the latest libcpre.obj file.
<LI>The DOS real-mode trap file (std.trp) now correctly displays high parts of 32-bit registers on 386+ CPUs.&nbsp; Previously,
the high parts were always displayed as zeros.
<LI>WLIB now has a new -pa option to set up library page size automatically to optimal size.
<LI>WLIB now handles COFF import libraries more correctly.
<LI>WCL now properly handles the -fd and -fm options without the file name specified.
<LI>WASM now handles EXTERNDEF directives properly; an EXTDEF record is created only if the symbol is actually referenced.
<LI>WASM now handles the auto-dependency filename properly.
<LI>WASM now implicitly creates the __UNIX__ macro for the BSD target as it has for LINUX and QNX.
<LI>The internal version numbers for WASM and WMAKE are now compatible with that used by the C and C++ compilers.&nbsp; Specifically
the macro __WASM__ has the value 1280 for WASM and the macro __VERSION__ has the value 1280 for WMAKE.
<LI>The 32-bit DOS WD and WPROF can now be used with DOS/4G 2.x.&nbsp; The DOS4GOPTIONS settings are no longer exported.&nbsp;
Users may still override the defaults by supplying their own wd.ini and wprof.ini, respectively.&nbsp; These files must be
in the appropriate format for the DOS/4G version used.&nbsp; Note that this does not affect DOS/4GW users.
<LI>WLINK now handles offsets and groups larger than 64 KB for 32 bit code and 16 bit targets.
<LI>WLINK now ignores fixup displacement when the target relocation is absolute.&nbsp; This is required for compatibility
with object files generated by MASM 5.1.
<LI>WLINK now properly handles the alignment of the last segment in a group if the last segment fragment is blank.
<LI>WLINK can now use the WLINK_LNK environment variable to override the default directive file name (wlink.lnk).&nbsp; If
the specified file isn't found then default file is used as usual.
<LI>WLINK now properly emits segments overlapped by groups to output file.
<LI>WLINK now properly handles imported symbols that are locally defined with the dllimport specifier in PE formatted files.
<LI>WLINK DLL was renamed from wlink.dll to wlinkd.dll.&nbsp; It requires to correct wmake directive &quot;!loaddll&quot;
to use this new name if it is used in makefile.
<LI>WRC on Far-Eastern NT-based systems now honors the DBCS encoding specified on the command line.
<LI>The text editor now supports syntax highlighting for resource files.
<LI>The Fgrep dialog box in graphical editor now has a browse button to display the standard browse for folder dialog box
on versions of Windows that support it.
<LI>The ide2make utility has been added to the Open Watcom distribution.&nbsp; This utility converts IDE project files to
make files.
<LI>The exe2bin utility now performs properly if relocation items are unsorted.
<LI>The installer now generates a batch file that automatically sets the environment variables used by the Open Watcom tools.
</UL>
<H2 ID="Changes_in_1_8_that_may_Require_Recompilation"> Changes in 1.8 that may Require Recompilation </H2>
<DL>
<DT>_dos_getftime and _dos_setftime functions
<DD>32-bit users of _dos_getftime() and _dos_setftime() need to recompile.&nbsp; Consider using stat()/utime() instead of the
non-portable functions.
<DT>_dos_allocmem and _dos_freemem functions
<DD>32-bit DOS users of _dos_allocmem() and _dos_freemem() need to recompile.&nbsp; Consider not using this functions in the first
place.
</DL>
<H2 ID="Differences_from_Open_Watcom_Version_1_6"> Differences from Open Watcom Version 1.6 </H2>
<BR>Following is a list of changes made in Open Watcom C/C++ 1.7:
<UL>
<LI>Functions using the __cdecl calling convention now return floating-point values in FPU registers in 32-bit code.&nbsp;
This is the correct behavior compatible with other compilers.
<LI>The C and C++ compilers now support an include_alias pragma which can be used, among other things, to map long include
filenames onto 8.3 names.&nbsp; In addition, the compilers now support a -na switch to disable the automatic inclusion of
_ialias.h (which contains new include_alias pragmas for certain standard headers).
<LI>The C compiler now emits warnings on operations which mix multi-level pointer types such as void** and int**.&nbsp; Previously
a warning was only emitted in ANSI mode.&nbsp; Note that while void** is not assignment compatible with int**, void* is.&nbsp;
The new stricter behavior is in line with most other C compilers and helps users write cleaner and more portable code.
<LI>The C compiler now warns (W400) when an expression of plain char type is used as array index.&nbsp; Because the sign of
plain char changes depending on compiler choice and settings, using plain char as array index is inherently non-portable and
likely to cause problems.
<LI>The C compiler now folds constant expression before checking for range overflows etc.&nbsp; This enables the compiler
to diagnose constant out of range issues in more cases.
<LI>The C compiler now allows benign variable redefinitions where __near or __far modifiers aren't always explicitly specified
but match when current data model is taken into account (eg.&nbsp; 'extern int __near x;' and 'extern int x;' in small data
models).&nbsp; The new behavior is compatible with the C++ compiler as well as with other vendors' compilers.
<LI>The default stack size for 32-bit DOS extended executables has been increased from 4K to 64K.&nbsp; Note that the linker
can still set greater or smaller stack size.
<LI>The code generator now produces better 16-bit code for 64-bit math operations
<LI>The code generator no longer incorrectly optimizes out conditionals.&nbsp; The problem only occurred in very rare situations
and probably only when doubles were being compared.
<LI>A long-standing problem with use of certain 64-bit constants as results of ternary operators has been fixed.
<LI>The C++ compilers now has a workaround for bugzilla bug #63 (http://bugzilla.openwatcom.org/show_bug.cgi?id=63).&nbsp;
The compiler now generates an error message referring to the bug entry rather than crashing.
<LI>The LIBC and CLIB thin netware libraries have been added to the distribution as experimental.
<LI>32-bit DOS executables now correctly pass environment to child processes started through the spawn family of functions.
&nbsp;Previous incorrect behavior was introduced in version 1.6.
<LI>In the NetWare libraries, __get_stdout with __get_std_stream was causing an infinite recursion.&nbsp; This has been fixed.
<LI>Fixed 8087 emulator/mathlib 80-bit real multiplication if one operator is zero and second is a power of two.
<LI>The _outgtext() function in graph.lib no longer fails on 32-bit targets.
<LI>The Win32 stat() function now returns correct results when it tries to access a file with given name and the directory
containing that file also contained a subdirectory with the same name.
<LI>The debugger now supports a &quot;No Source&quot; toggle (right mouse click menu) in the assembly code window to switch
on/off associated source code.
<LI>The debugger no longer crashes when tracing F77 programs that use variable-size arrays.&nbsp; This only applies to DWARF
debugging information (which is used by default).
<LI>The debugger now correctly displays multi-dimensional Fortran arrays when DWARF debug information format is used (which
is used by default).
<LI>The debugger can now display [partial] strings in Fortran code when the string length exceeds the debugger's internal
limit.&nbsp; The internal limit has also been increased from 512 to 1024 characters.
<LI>The resource compiler now properly copies non-resident name table when processing LX executables.
<LI>The console version of vi for Win32 no longer quits after Ctrl+Left is pressed followed by any other key.
<LI>WCL now correctly takes options from the environment when there is more then one file to compile.
<LI>The linker now supports a MIXED1632 option to allow mixing of 16- and 32-bit logical segments into a single physical segment
in OS/2 LX/LE executables.
<LI>The linker now supports a NOSTUB option for Windows and OS/2 executable formats.&nbsp; This option causes no DOS stub
executable to be written to the output image.
<LI>The installer now allows you to disable creating program groups or modifying the startup environment using the /np and
/ns switches.
</UL>
<H2 ID="Changes_in_1_7_that_may_Require_Recompilation"> Changes in 1.7 that may Require Recompilation </H2>
<DL>
<DT>__cdecl Calling Convention
<DD>Functions in 32-bit code that return floating-point values now do so using the FPU registers.&nbsp; Such functions will need
to be recompiled if they are to be linked with object code produced by Open Watcom C/C++ 1.7.
</DL>
<H2 ID="Differences_from_Open_Watcom_Version_1_5"> Differences from Open Watcom Version 1.5 </H2>
<BR>Following is a list of changes made in Open Watcom C/C++ 1.6:
<UL>
<LI>The C compiler has been modified to use the underlying bit-field type and not signed/unsigned int as the type of operand
which is a bit-field.&nbsp; This is consistent with the C++ compiler and fixes some problems when bit-fields larger than int
are used.
<LI>Processing of #pragma aux has been corrected in the C compiler.&nbsp; This fixes problems when using the mmintrin.h header,
among others.
<LI>The C compiler now accepts __declspec modifiers specifying calling conventions applied to variables, not just functions.
&nbsp;The new behavior is consistent with the C++ compiler, and also with the fact that ordinary calling convention type modifiers
can be used with variables.
<LI>The C and C++ compilers have been fixed to properly declare variable names based on calling convention specifiers.&nbsp;
This fixes problems with building code using IBM SOM.&nbsp; Note that the current behavior is the same as in Open Watcom 1.3
and earlier.
<LI>The C compiler's preprocessor has been modified to allow use of macros with large number of arguments (255 or more).
<LI>The C compiler no longer generates internal errors when options -ri and -oe are specified at the same time.
<LI>The C++ compiler has been fixed to inline intrinsic functions.
<LI>The 386 compilers have been changed to default to tuning code for P6 architecture instead of Pentium.&nbsp; Optimizing
for P6 typically results in slightly more compact and faster code.
<LI>The 386 C compiler has been fixed to properly convert between flat and __far16 pointers, especially pointers to functions.
&nbsp;Its behavior should now be compatible with the C++ compiler.&nbsp; The problem was most likely affecting OS/2 users
who wrote mixed 16-bit and 32-bit code.
<LI>The C compiler has been changed to allow redeclaration of functions in rare cases where initial declaration did not specify
a calling convention and the subsequent declaration specified a calling convention which matched the default.
<LI>A new -zwf switch has been added to the C and C++ compilers.&nbsp; This switch is off by default and enables generation
of FWAIT instructions on 386 and later CPUs.&nbsp; It is only needed in unusual situations.
<LI>The C compiler now correctly converts 64-bit integer constants to floating-point constants.
<LI>The code generator no longer merges memory accesses when volatile variables are involved.
<LI>The code generator now correctly const folds 64-bit right shifts.
<LI>The code generator now properly converts between far pointers and 64-bit integers.&nbsp; Attempts to convert a 48-bit
far pointer to 64-bit integer no longer cause a crash.
<LI>The code generator has been modified to slightly decrease code size when optimizing for size (-os).
<LI>The non-standard alloca.h header has been added for compatibility with other compilers.
<LI>The strftime() library function has been extended to support date formats introduced in C99.
<LI>The file pointer type used with lseek() and tell() has been changed to off_t (from long) for compatibility with POSIX.
<LI>The 386 versions of _clear87() and _status87() functions have been modified to use the no-wait form of FPU control instructions.
&nbsp;This allows these functions to be used in exception handlers when there are pending unmasked floating-point exceptions.
<LI>The 16-bit 8087 emulator has been fixed to correctly evaluate multiplies as infinity instead of zero in rare overflow
situations.
<LI>The resource compiler (wrc) has been fixed to store long integer constants as 32-bit quantities in RCDATA or user data
resource statements.&nbsp; This behavior applies to Win16, Win32, and OS/2 targets.&nbsp; Integers without the 'L' suffix
are stored as 16-bit and potentially truncated.
<LI>The OS/2 specific part of the resource compiler has been corrected to process RCDATA statements properly.
<LI>The assembler (wasm) now supports external absolute symbols.&nbsp; The SIZE, SIZEOF, LENGTH, and LENGTHOF operators have
been corrected for structures.
<LI>Classification of privileged instructions in the assembler has been updated to match MASM.
<LI>The assembler now evaluates expressions in return instructions correctly.&nbsp; Previously, code such as 'ret 28+4' would
be sometimes erroneously assembled as 'ret 28' instead of 'ret 32'.
<LI>The linker has been changed to only recognize segments of class 'STACK' as stack segment.&nbsp; Previously, any segment
with class name ending with 'STACK' (eg.&nbsp; 'FSTACK') was recognized.
<LI>Several minor problems related to creating DOS executables have been fixed in the linker.
<LI>The RUNTIME linker directive has been extended to allow ELF ABI type and version specification.&nbsp; This functionality
is similar to the brandelf utility.&nbsp; See the Linker Guide for details.
<LI>The wmake utility has been modified such that in native wmake mode, a symbolic target with no command list is always considered
to have had its command list executed.&nbsp; That will cause any targets that are dependent on this symbolic target to be
considered out of date.
<LI>The Win32 trap file is now able to determine the full pathname of debuggee's loaded DLLs.&nbsp; This may ease debugging
in some cases as the debugger will be more likely to find debugging information for DLLs.
<LI>The Win16 debugger trap file (std.dll) has been modified to allow 16-bit wdw to run on Windows NT platforms without reporting
a spurious error message on exit.
<LI>Numerous problems with the Win386 extender support have been fixed so that Win386 now works again.
<LI>The dmpobj utility has been enhanced to support additional OMF records, and new command line options have been added.
</UL>
<H2 ID="Differences_from_Open_Watcom_Version_1_4"> Differences from Open Watcom Version 1.4 </H2>
<BR>Following is a list of changes made in Open Watcom C/C++ 1.5:
<UL>
<LI>Support for ISO/IEC TR 24731, &quot;Extensions to the C Library, Part I:&nbsp; Bounds-checking interfaces&quot; has been
added to the C runtime library.&nbsp; The C compiler now predefines the macro __STDC_LIB_EXT1__ (which evaluates to 200509L)
to indicate this support.&nbsp; This set of functions is also known as the Safer C Library.&nbsp; Please see the C Library
Reference for detailed documentation of these functions.
<LI>In C99 mode, the C compiler now supports C99 style declarations intermixed with statements within a block, as well as
declarations in the opening clause of a for loop.
<LI>The C compiler now predefines additional macros required by the C standards.&nbsp; These include __STDC_HOSTED__ (evaluates
to 1) to indicate a hosted implementation and __STDC_VERSION__ (either 199409L or 199901L) to indicate C94 or C99 support
depending on compilation switches.
<LI>A __restrict keyword has been added to the C compiler.&nbsp; It is functionally equivalent to the C99 'restrict' keyword
but is always visible, even in non-C99 mode.
<LI>In C99 mode, the C compiler no longer requires explicit return statement in a main function returning an integer.&nbsp;
In accordance with C99 standard, 'return 0;' is implied if end of function is reached and no return statement was encountered.
<LI>The C compiler has been fixed so that it no longer loses track of pointer base when using __based(__self) pointers.&nbsp;
The C compiler has also been fixed to properly handle dereferencing of based arrays.
<LI>The 16-bit C++ compiler now correctly casts pointers to __segment type without crashing.&nbsp; Proper semantics of the
cast were implemented.
<LI>The 16-bit C compiler has also been modified to handle casts to __segment type correctly, ie.&nbsp; return segment portion
of a pointer.
<LI>The C compiler has been fixed to properly support named based segments (ie.&nbsp; __based( __segname( &lt;name&gt; ) )
pointers) that reference the default _DATA and _CONST segments.
<LI>The compilers and library headers have been modified to properly support use of standard libraries when one of the -ec
switches is used to change default calling convention.
<LI>The C compiler has been modified such that segments created through #pragma data_seg are no longer part of DGROUP.&nbsp;
Typically, the pragma is used only when data segments need to be located in a physically separate segment in the output module.
<LI>New warning W137, &quot;Extern function 'fn' redeclared as static&quot;, has been added to the C compiler.&nbsp; Existing
error E1072, &quot;Storage class disagrees with previous definition of 'symbol'&quot; has been extended to cover redefinitions
from 'extern' to 'static' and not only from 'static' to 'extern'.&nbsp; Changing the linkage of a symbol invokes undefined
behavior according to ISO C.
<LI>New warning W138, &quot;No newline at end of file&quot;, has been added to the C compiler.&nbsp; It is emitted if no line
terminator character was found before the end of a source file.&nbsp; Such files do not conform to ISO C.&nbsp; The missing
newline character will be automatically inserted; this matches the C++ compiler behavior.&nbsp; Note that missing newlines
could previously lead to spurious &quot;#endif matches #if in different source file&quot; warnings.
<LI>The C compiler has been modified to allow the __export or __declspec(dllexport) modifier on a declaration when earlier
declaration exists with no modifier.&nbsp; The updated behavior is compatible with the C++ compiler as well as some compilers
from other vendors.
<LI>In ISO/ANSI mode (-za), the compiler now always warns if it encounters a call to unprototyped function.&nbsp; In extensions
mode (default, -ze), this warning (W131) is suppressed if a matching prototype is found later in the source file.&nbsp; Note
that the behavior in extensions mode is unchanged from earlier versions.
<LI>The C compiler now eliminates static functions that are always inlined from the object file (the functions are of course
still emitted if their address is taken).
<LI>The C compiler has been fixed to properly evaluate boolean expressions (especially the ternary operator) where the condition
is a 64-bit integer constant.&nbsp; Previously, the high 32 bits were in some cases ignored, which could lead to erroneous
results.
<LI>The C compiler has been modified to properly cast floating-point constants to the specified type.&nbsp; Notably FLT_MIN
stored or passed as double is now handled correctly (without spurious precision).
<LI>Handling of empty macro arguments has been corrected in the C compiler's preprocessor.&nbsp; Previously, empty macro arguments
could result in invalid tokens in certain cases.
<LI>The peephole optimizer is now run again after register allocation.&nbsp; This allows the code generator to take advantage
of some optimization opportunities that were previously missed.
<LI>The code generator has been modified to copy DS into ES in __interrupt routine prolog (right after DS was loaded) if the
ES register is considered unalterable, ie.&nbsp; in flat model.&nbsp; This may avoid crashes if ES is dereferenced explicitly
or implicitly in interrupt handlers, for instance when calling memcpy().
<LI>The linker and other tools have been fixed to correctly classify code segments.&nbsp; Previously, code segments could
be misclassified as data, which led to incorrect disassembly and generation of debugging information.
<LI>A performance problem related to emitting debugging information for structures or unions with many members has been corrected
in the code generator.
<LI>The POSIX-defined header libgen.h has been implemented.&nbsp; This includes two functions, basename() and dirname().
<LI>The functions btowc(), fwide(), mbsinit(), wctrans(), and towctrans() have been added to the C runtime library.&nbsp;
These functions are all related to wide-character and multi-byte support, and were first defined by the ISO C Normative Amendment
1.
<LI>C99 functions llabs(), lldiv(), and _Exit() have been added to the C runtime library.&nbsp; Note that the latter is equivalent
to _exit(), defined by POSIX.
<LI>Support for C99 floating-point classification macros has been implemented.&nbsp; This includes fpclassify, isfinite, isinf,
isnan, isnormal, and signbit.
<LI>Modifiers 'hh', 'j', 'z', and 't' defined by C99 for the printf and scanf family of functions have been implemented in
the C runtime library.&nbsp; Please see the C Library Reference for details.
<LI>The 'F' modifier for printf and scanf families of functions conflicts with 'F' format specifier defined by ISO C for floating-point
conversions.&nbsp; It has been replaced by a 'W' modifier which is now used to denote a far pointer.&nbsp; The 'F' modifier
is still recognized in DOS builds of the runtime library (which therefore cannot handle the 'F' format specifier as defined
by ISO C), but is no longer documented and will be removed in a future release.
<LI>Several very obscure bugs have been fixed in the printf and scanf family of functions.&nbsp; These problems were discovered
thanks to a more stringent testing procedure and had never been reported by users.
<LI>The strtod function has been enhanced to follow C99 specification.&nbsp; It will now parse infinity and NaN, as well as
hexadecimal floating-point numbers.&nbsp; See the C Library Reference for details.
<LI>The math library has been fixed to perform binary to decimal floating-point conversions with greater precision.&nbsp;
This fixes a problem where in some cases a conversion from binary to decimal and back was losing precision or producing erroneous
results.
<LI>The graphics library has been fixed to correctly work with VESA modes where the number of bytes per line does not directly
correspond to width of the mode in pixels.
<LI>The owcc utility has been much improved and documented; this tool is a POSIX style compiler driver, designed to provide
certain level of command line compatibility with gcc and ease porting.
<LI>The NOEXTension linker option has been documented; this option instructs the linker not to add any extension (.exe, .dll,
etc.) to the executable name.&nbsp; Any argument to the NAME directive will be used verbatim.&nbsp; This option had been supported
by earlier versions of the linker but not documented.
<LI>The 'include' preprocessor directive not prefixed by an exclamation mark is now recognized in wmake -ms mode for compatibility
with Microsoft and IBM NMAKE.
<LI>The wmake utility has been enhanced to evaluate NMAKE style '[cmd]' expressions (ie.&nbsp; shell commands) in preprocessor
!if directives.&nbsp; This functionality is supported in both wmake and -ms mode.
<LI>Several problems related to the Watcom debugging information format have been fixed in the linker and debugger.&nbsp;
Note that the Watcom format is considered obsolete and its use is not recommended.
<LI>A random but very rare startup failure of Windows based GUI tools (notably wdw) has been fixed.
</UL>
<H2 ID="Differences_from_Open_Watcom_Version_1_3"> Differences from Open Watcom Version 1.3 </H2>
<BR>Following is a list of changes made in Open Watcom C/C++ 1.4:
<UL>
<LI>Support for C99 designated initializers has been added to the C compiler, for example &quot;struct {int a, b;} c = {.a=0,
.b=1};&quot;.&nbsp; This is also supported for arrays, for example &quot;int a[4] = {[0]=5, [3]=2};&quot;.
<LI>Handling of enumerations has been fixed in the C compiler.&nbsp; In certain cases, the compiler chose the wrong type for
operations on objects of enumerated types.&nbsp; Enumerated constants up to 64 bits wide are now also allowed (including in
16-bit compilers).
<LI>The C compiler will now warn if the right hand operand of a bitwise shift expression is a constant that is either negative
or greater than or equal to the bit with of the promoted left operand.&nbsp; The result of such operation is not defined by
ISO C.&nbsp; The warnings are 'W134:&nbsp; Shift amount negative' and 'W135:&nbsp; Shift amount too large'.
<LI>The C compiler now warns in cases where an unsigned type is compared for &lt;= 0.&nbsp; This is equivalent to 'unsigned
== 0' and often indicates that a signed comparison was intended.
<LI>New __watcall keyword has been added to the C and C++ compilers to designate the default Watcom calling convention.
<LI>New -ec?&nbsp; switches have been added to set the default calling convention.
<LI>The 16-bit C compiler now defines _M_I86 macro for consistency with the C++ compiler.&nbsp; The new macro should be used
in preference to the existing M_I86.
<LI>A number of new keywords have been added to the C compiler; these were previously defined as macros:&nbsp; _Cdecl, _Export,
_Far16, _Fastcall, _Pascal, __sycall, _System, __try, __except, __finally, __leave.
<LI>Analogous change has been made to the C++ compiler.&nbsp; The new keywords (and removed predefined macros) are:&nbsp;
_Cdecl, _Export, _Far16, _Fastcall, __inline, _Pascal, __syscall, _System.
<LI>The C++ compiler now handles the &quot;new&quot; template specialization syntax, and partial specialization is partially
supported (no pun intended).
<LI>The C++ compiler now correctly handles the situation where control reaches the end of main() function without encountering
a return statement.&nbsp; In that case, the effect is that of executing &quot;return 0;&quot;.
<LI>The C++ compiler now properly allows return statements with a void expression in functions that return void.
<LI>386 C and C++ compilers now support the Microsoft fastcall calling convention, and recognize the __fastcall keyword.
<LI>The C compiler now recognizes #pragma data_seg and code_seg forms that specify segment and class names without enclosing
them in parentheses.&nbsp; The new behavior is consistent with other compilers.
<LI>New -fti switch has been added to the C compiler to track #include file opens.&nbsp; This helps diagnose include file
problems in complex projects.
<LI>The code generator no longer emits debug information for unreferenced typedefs when -d1+ or -d2 switch is used.&nbsp;
This produces slightly to significantly smaller debug information.&nbsp; Note that behavior of -d3 is unchanged.
<LI>The 386 code generator will no longer select the 'and' instruction to perform zero extension when optimizing for time
on the 686 architecture (-6r or -6s switch).&nbsp; The 'movzx' instruction will always be used instead, because it avoids
partial register stalls and in certain cases significantly improves performance on P6 and newer class CPUs.
<LI>Support for long long based bitfields has been improved in the code generator.
<LI>The code generator now properly diagnoses attempts to emit symbol names that overflow the OMF limit (255 bytes).
<LI>Several problems related to loss of segment information in 386 non-flat models have been fixed in the code generator.
<LI>Command line processing has been changed in the Compile and Link utility (wcl).&nbsp; Forward slashes now may be used
as path separators in file arguments, such that &quot;foo/bar&quot; is now interpreted as &quot;foo\bar.c&quot;.&nbsp; Note
that this does not affect options delimited with forward slashes.
<LI>Support for raw binary and Intel Hex output has been added to the linker, along with support for 24-bit segmented addressing
architectures (HSHIFT option) and arbitrary class/segment reordering (OUTPUT and ORDER directives).&nbsp; See Linker Guide
for details.
<LI>Support for overlays (16-bit DOS) has been reinstated in the linker.&nbsp; A related FARCALLS/NOFARCALLS option has been
added to the linker.&nbsp; See Linker Guide for details.
<LI>The linker now correctly processes relocations to symbols in absolute segments.
<LI>The linker now checks for bitness conflicts (16 vs.&nbsp; 32-bit) when adding segments to a group.
<LI>The minimum accepted value for linker OBJALIGN option has been changed to 16 bytes (previously 512).
<LI>The linker no longer creates a separate .bss section when linking PE modules.&nbsp; Instead, uninitialized data is added
at the end of the data section.&nbsp; This creates slightly smaller executables and reduces memory usage.
<LI>The st_name member was removed from struct stat and related structures.&nbsp; This was done for consistency across platforms
(UNIX has no such field), because the st_name field was almost entirely useless (being limited to 13 characters), and for
compatibility with Microsoft compilers; the latter because struct _wstat and struct _wstati64 are now obsolete and struct
_stat/_stati64 can be used for wide character stat functions.&nbsp; NB:&nbsp; This change requires recompilation.&nbsp; New
object files will not work with old libraries and vice versa.
<LI>The signal() function no longer modifies floating-point control word on Win32 and 32-bit OS/2.&nbsp; Also, default value
for SIGFPE has been changed to SIG_DFL from SIG_IGN on all platforms.
<LI>The e/E format of printf() family of functions has been changed to format the exponent with minimum of two digits (instead
of three).&nbsp; This behavior is dictated by C99 and consistent with most other compilers.
<LI>The floating-point to string conversion routines now format values with greater precision.&nbsp; This means that floating-point
values printed by C and C++ programs may be slightly different from earlier versions of the runtime libraries (but more accurate).
<LI>The sleep() function is now declared in unistd.h and its return type has been changed to unsigned int, for compatibility
with POSIX.
<LI>The clock() function now uses millisecond counters (where available) on DOS and Windows, and is no longer susceptible
to problems related to TZ changes.
<LI>The DOS runtime has been tuned to produce smaller executables.
<LI>C99 functions wmemchr(), wmemcmp(), wmemcpy(), wmemmove(), and wmemset() have been added to the C runtime library.
<LI>A POSIX compatible getopt() function has been added to the C runtime library.
<LI>A POSIX compatible mkstemp() function has been added to the C runtime library.
<LI>BSD compatible safe string copy and concatenation functions, strlcpy() and strlcat(), have been added.&nbsp; Use of these
functions is highly recommended over strncpy() and strncat(), because they are safer and much easier to use.
<LI>New strings.h header has been added for POSIX compatibility, although legacy functions index() and rindex() are not supported.
&nbsp;Functions strcasecmp() and strncasecmp() are also declared in string.h for compatibility with other compilers.
<LI>The C runtime library no longer returns ESPIPE when calling write() on a pipe or device that was opened with O_APPEND
flag.&nbsp; The old behavior was not POSIX conforming.
<LI>Handling of pathnames that include spaces has been improved in the make utility (wmake).
<LI>The disassembler (wdis) now handles big endian object files on little endian host platforms, and vice versa.
<LI>Support for MIPS R4000 and SPARC V8 instruction sets has been added to the disassembler.
<LI>New -zz and -zzo option have been added to the assembler (wasm) for backwards compatibility.&nbsp; See Tools User's Guide
for details.
<LI>Default behavior of inline assembler has changed.&nbsp; The CPU optimization level (-4, -5, -6) now implies the available
instruction set:&nbsp; -5 implies MMX and 3DNow!, -6 also implies SSE/SSE2/SSE3.&nbsp; Also note that any CPU setting override
now reverts to default at the end of each inline assembly block.
<LI>16-bit DOS version of the assembler (wasmr) has been added.&nbsp; This version runs on 8086 and above and requires less
memory than the protected mode version.
<LI>The debugger has been changed to look for support files in directories relative to the debugger executable's location.
&nbsp;This allows the debugger to be used when no debugger specific environment variables have been set.
<LI>A problem with stepping into code (F8) right after debuggee was loaded has been fixed in the debugger.
<LI>The debugger now looks for debug information in a .sym file when the /DOwnload option was specified.&nbsp; Previously
it erroneously only looked at the executable if the download option was used.
<LI>Support for Microsoft/IBM .sym files generated by the MAPSYM utility has been added to the debugger and profiler.&nbsp;
This is helpful especially with symbol files provided by IBM for OS/2 system DLLs; disassembly now shows for instance &quot;call
DOS32EXIT&quot; instead of &quot;call 01C74634&quot;.
<LI>The CauseWay trap file no longer incorrectly maps symbol addresses in 'large' executables (code segment &gt; 64K).
<LI>Interoperability with GNU tools has been improved.&nbsp; The debugger (wd/wdw) should now be able to debug GNU-produced
executables (with DWARF 2 debug information) and vice versa.
<LI>New -zld option has been added to the library manager (wlib) to strip autodependency information from OMF objects.
<LI>New exe2bin utility has been added.&nbsp; See Tools User's Guide for details.
<LI>Basic support for compiling OS/2 resource scripts and binding resources into OS/2 executables (both NE and LX formats)
has been added to the resource compiler (wrc).
<LI>The include search order in the resource compiler has been changed to be more consistent with the C/C++ compilers, as
well as with IBM's and Microsoft's resource compilers.&nbsp; System include files (enclosed in angle brackets) are no longer
searched in current directory or in the directory of the file containing the #include directive.
<LI>The Windows resource compiler has been made more compatible with scripts designed for Microsoft's RC in the way it treats
string literals.
<LI>The MS LINK compatibility wrapper now supports a /RELEASE switch.
<LI>Syntax highlighting support for makefiles has been added to the editor.&nbsp; The default syntax highlighting scheme has
also been made more colorful.
<LI>The editor and Windows GUI tools now store configuration files in more appropriate locations (notably on multi-user machines).
<LI>Several new DOS extender related targets have been added to the IDE.&nbsp; Better support for remote debugging has also
been added to the IDE.
<LI>The CauseWay DOS extender now supports SSE instructions on plain DOS.
<LI>Several simple OS/2 SOM programming examples have been added.
</UL>
<H2 ID="Changes_in_1_4_that_may_Require_Recompilation"> Changes in 1.4 that may Require Recompilation </H2>
<DL>
<DT>stat()
<DD>The<B><I> stat</I></B> function now uses a slightly different<B><I> struct stat</I></B> argument.&nbsp; Source code that uses
the<B><I> stat</I></B> function or references<B><I> struct stat</I></B> must be recompiled before linking the application
with new libraries.
</DL>
<H2 ID="Differences_from_Open_Watcom_Version_1_2"> Differences from Open Watcom Version 1.2 </H2>
<BR>Following is a list of changes made in Open Watcom C/C++ 1.3:
<UL>
<LI>The C++ compiler now restricts the scope of variables declared in a for loop to the scope of that loop in accordance with
ISO C++, not extending the scope beyond the loop (ARM compliant behavior).&nbsp; Code relying on the pre-standard behavior
must either be changed or compiled with new -zf switch which reverts to old scoping rules.
<LI>Support for default template arguments has been added to the C++ compiler.
<LI>Support for alternative tokens (and, xor etc.) has been added to the C++ compiler.&nbsp; It is enabled by default, can
be turned off with the new -zat switch.
<LI>The C runtime library has been made significantly more C99 compliant.&nbsp; A number of new headers have been added (inttypes.h,
stdbool.h, stdint.h, wctype.h) and corresponding new functions implemented.&nbsp; Wide character classification functions
were moved out of ctype.h into wctype.h.&nbsp; C99 va_copy macro was added to stdarg.h.
<LI>Added 'cname' style C++ headers.
<LI>Support for SSE, SSE2, SSE3 and 3DNow!&nbsp; instruction sets has been added.&nbsp; Affected tools are the assembler (wasm),
as well as all x86 compilers, disassembler and debugger.&nbsp; The debugger now also supports MMX registers formatted as floats
(for 3DNow!) as well as a new XMM register window for SSE.
<LI>Inline assembler directives .MMX, .K3D, .XMM, .XMM2 and .XMM3 are now supported in the _asm as well as #pragma aux style
inline assembler interface.&nbsp; Note:&nbsp; .MMX directive is now required (in addition to .586) to use MMX instructions.
<LI>C compiler performance has been significantly improved (up to 5-10 times speedup) when compiling large and complex source
files.
<LI>All x86 compilers now have the ability to perform no truncation when converting floating point values to integers.&nbsp;
Additionally, 32-bit x86 compilers have the option to inline the rounding code instead of calling __CHP.
<LI>The C lexical scanner no longer evaluates constants with (U)LL suffix that fit into 32 bits as zero (1ULL was wrong, LONGLONG_MAX
was correct).
<LI>C and C++ x86 inline assembler has been fixed to properly process hexadecimal constants postfixed with 'h'.
<LI>The C compiler now supports the C99 'inline' keyword, in addition to previously supported '_inline' and '__inline' keywords.
<LI>The C compiler now treats a sequence of adjacent character strings as wide if any of the components are wide (required
by C99), instead of depending on the type of the last component.&nbsp; For example, L&quot;foo &quot; &quot;bar&quot; is now
interpreted as L&quot;foo bar&quot;, instead of &quot;foo bar&quot;.
<LI>The internal C compiler limit on complex expressions has been increased and if it is still insufficient, the compiler
now reports an error instead of crashing.
<LI>The C compiler now issues a warning on the default warning level if a function with no prototype is referenced.&nbsp;
This was previously warning W301 (level 3), now it is warning W131 (level 1).
<LI>Warning &quot;W132:&nbsp; No storage class or type specified&quot; has been added to the C compiler.&nbsp; This warning
is issued if a variable is declared without specifying either storage class or type.&nbsp; This is not allowed in C89.
<LI>Warning &quot;W304:&nbsp; Return type 'int' assumed for function 'foo'&quot; has been added.&nbsp; This warning is issued
if a function is declared without specifying return type.&nbsp; This is allowed in C89 but not in C99.
<LI>Warning &quot;W305:&nbsp; Type 'int' assumed in declaration of 'foo'&quot; has been added to the C compiler.&nbsp; This
warning is issued if a variable is declared without specifying its type.&nbsp; This is allowed in C89 but not in C99.&nbsp;
Note that if warning W132 is issued, W305 applies as well.
<LI>The C compiler now properly warns if a function with implied 'int' return type fails to return a value.&nbsp; This potential
error was previously undetected.
<LI>C++ compiler diagnostic messages have been made more consistent and slightly more detailed.
<LI>Linker for Win32 targets can now create file checksums.&nbsp; These are primarily used for DLLs and device drivers, but
can be applied to all Win32 PE images if required.
<LI>Linker for Win32 targets can now set operating system version requirements into the PECOFF optional header (Microsoft
extended header).
<LI>Linker for Win32 targets can now set the linker version number into the PE optional header (Microsoft extended header).
<LI>The linker will now eliminate zero-sized segments from NE format (16-bit OS/2 and Windows) executables.&nbsp; This fixes
a problem where Windows 3.x would refuse to load an executable with zero sized segment.&nbsp; This could happen especially
with C++ programs where some segments may have ended up empty after eliminating unused functions.
<LI>The linker now (again) produces correct Watcom style debugging information.&nbsp; This was a regression introduced in
previous version.
<LI>Command line parsing for wccxxx, wppxxx and cl has been changed such that a double backslash inside a quoted string is
collapsed to a single backslash, and hence &quot;foo\\&quot; now translates to 'foo\' and not 'foo\&quot;'.
<LI>The IDE and other graphical tools no longer leak system resources (a bug introduced in version 1.2).
<LI>The Image Editor limit on bitmap size has been changed from 512x512 pixels to 2048x2048 pixels.
<LI>The source browser now correctly decodes array information; Version 11.0c of Watcom C/C++ started emitting array browse
information in a new format and the browser hadn't been updated accordingly.
<LI>The NT debugger trap file has been changed so an exception generated during a step operation is handled correctly.&nbsp;
Previously, the single step flag was not being cleared and when the exception was being offered to the debuggee's own exception
handlers, a single step exception occurred in NT's exception handler rather than the exception being passed back to our handler.
<LI>The OS/2 debuggers now dynamically allocate buffer for the command line, preventing crashes when the command line was
over approx.&nbsp; 260 bytes long.
<LI>The NetWare 5 debugger NLM has been changed to use kernel primitives.&nbsp; Previous version were using legacy semaphores.
<LI>The make program (wmake) has been sped up very slightly.&nbsp; Also the 'echo' command is now internal and no longer spawns
the system command interpreter.
<LI>The precision of DBL_MAX, DBL_MIN and DBL_EPSILON has been increased; the non-standard variants prefixed with an underscore
have been removed.
<LI>The C99 functions atoll(), lltoa(), ulltoa(), strtoll(), strtoull() and corresponding wide character functions have been
added to the C runtime library.
<LI>The _beginthread() function now consistently returns -1 in case of error on all platforms.
<LI>The stdaux and stdprn streams are now only defined on DOS based platforms, ie.&nbsp; DOS, Win16 and Win386.&nbsp; No other
platforms support stdaux or stdprn.
<LI>The assert() macro now prints function name in addition to source file and line number, in accordance with C99.
<LI>The _heapchk() function will now always perform a consistency check on the heap, where it would previously only check
consistency if there had been allocations/frees since last call to _heapchk().&nbsp; As a consequence, _heapchk() previously
did not detect certain instances of heap corruption.
<LI>[OS/2 32-bit] The default __disallow_single_dgroup() implementation no longer statically links against PMWIN.DLL.&nbsp;
This allows DLLs to load on systems where PMWIN.DLL isn't present.
<LI>[OS/2 32-bit] Re-implemented clock().&nbsp; The new implementation uses the OS millisecond counter and is hence not susceptible
to TZ changes.&nbsp; It is also smaller, faster and more accurate, although it may wrap around earlier than the original implementation.
<LI>The disassembler (wdis) now correctly processes x86 'push 8-bit immediate' instructions.
<LI>The disassembler now correctly processes absolute memory references.&nbsp; All memory references without fixup are now
disassembled as ds:[...] or sreg:[...].
<LI>Several DirectX Win32 programming samples have been added.&nbsp; Note that a separate DirectX SDK (available from Microsoft)
is required to build these sample programs.
</UL>
<H2 ID="Differences_from_Open_Watcom_Version_1_1"> Differences from Open Watcom Version 1.1 </H2>
<BR>Following is a list of changes made in Open Watcom C/C++ 1.2:
<UL>
<LI>Handling of default libraries for Win32 targets has been changed.&nbsp; Previously default library records were included
in the C runtime library, now they are specified part of the wlink Win32 target definitions in wlsystem.lnk.&nbsp; The list
of libraries has changed from previous version as well and now reflects the Microsoft compiler defaults; existing IDE projects
and makefiles may need to have additional libraries specified if those are no longer part of the default list.
<LI>The C compiler now performs stricter checking on function prototypes and pointer operations.&nbsp; This may lead to previously
undiagnosed warnings/errors appearing when compiling incorrect or ambiguous code.
<LI>The C compiler diagnostic messages have been improved to print more information, making it easier to isolate the problem.
<LI>A new warning (W130) has been added to the C compiler to diagnose possible precision loss on assignment operations.&nbsp;
This warning is never on by default and must be enabled through '#pragma enable_message(130)' or '-wce=130' switch.
<LI>Support for C99 style variable argument macros (and __VA_ARGS__) has been added to the C and C++ compilers.
<LI>Added support for the __func__ symbol (name of the current function) which is equivalent to the already existing __FUNCTION__
symbol.
<LI>Better C99 style support for &quot;long long&quot; type is now available in the C and C++ compilers.&nbsp; LL, ULL and
LLU suffixes are recognized for constants.&nbsp; &quot;long long int&quot; is now also recognized.
<LI>Added C99 style *LLONG_MIN/MAX defines to limits.h.
<LI>The C++ compiler has been fixed to properly accept source files where a template was the last item in a name space or
an external linkage.
<LI>Several new -adxx options have been added to the C and C++ compilers to support automatic generation of 'make' style dependency
files.
<LI>The C compiler has been fixed to correctly diagnose illegal union assignments.
<LI>The C compiler now issues warnings on operations involving pointers to different but compatible unions.
<LI>The C and C++ compilers now ensure word alignment of wide character string literals to satisfy Win32 API restrictions.
<LI>The __UNIX__ macro is now supported in C and C++ compilers, wmake and wasm.&nbsp; It is currently defined for QNX and
Linux targets.
<LI>Default windowing support has been re-enabled for Win16 and Win386 runtime libraries.
<LI>Since default windowing is no longer supported on most platforms, the Programmer's Guide and IDE tutorial have been updated
to reflect that fact.
<LI>The Win32 GUI tools now support the Windows XP look and feel.
<LI>AutoCAD and MFC targets have been removed from the IDE, the -bw switch (default windowing) is no longer available in the
IDE for OS/2 and Win32 targets.
<LI>Manual for the CauseWay DOS extender has been added.
<LI>The dmpobj tool has been added.&nbsp; This utility dumps the contents of OMF object files and can be useful to developers.
<LI>Several system definitions have been added to wlink:&nbsp; os2_pm (16-bit OS/2 Presentation Manager executable), os2_dll
(16-bit OS/2 DLL) and os2v2_dll (32-bit OS/2 DLL).
<LI>The linker has been fixed to read &quot;AR&quot; style archives produced by third party tools.
<LI>The linker has been fixed to prevent crashes when linking with COFF files providing uninitialized COMDAT entries
<LI>Several linker crashes related to ELF object files and executables have been resolved.
<LI>Updated wlink to call wlib with the -c (case sensitive) option when creating import libraries.&nbsp; This fixes problems
with DLLs that export symbols differing only in case.
<LI>The C runtime library has been optimized to produce smaller executables.
<LI>The printf() function now supports the &quot;ll&quot; format specifier for &quot;long long&quot; integers.
<LI>The printf() function has been enhanced to support %b format specifier for bitfields.
<LI>Execution order of C library termination routines is now better defined to prevent instances where temporary files created
through mktemp() could be left behind.
<LI>[OS/2 32-bit] To prevent crashes, termination code is not run if second instance of a DLL failed to load due to single
DGROUP.
<LI>[OS/2 32-bit] The __grow_handles() function was incorrectly adding n requested handles to existing limit instead of setting
the limit to n.
<LI>[OS/2 32-bit] Fixed a problem with _STACKLOW in multithreaded programs and DLLs.&nbsp; This prevents crashes where Fortran
DLLs would run out of stack.
<LI>[OS/2 16-bit] Fixed default math exception handler which wasn't popping the FP status word off the stack and would therefore
crash on exit.
<LI>The Win32 Image Editor has been enhanced with drag-and-drop support.
<LI>The IDE has been fixed to properly handle mixed case filenames.
<LI>The Microsoft compatibility tools (NMAKE, CL) have been fixed to better handle command line arguments.
<LI>The Dialog Editor (wde) has been fixed to prevent occasional DDE related crashes when run from inside the Resource Editor
(wre).
<LI>The 'Change font' option no longer crashes the GUI debugger (wdw).
<LI>On OS/2, wdw now intercepts the F10 key instead of passing it on to the system.
<LI>The code generator now deletes object files if it was interrupted.&nbsp; Previously zero-length invalid object files could
be left behind, interfering with make operation.
<LI>The wasm assembler has been enhanced to generate file dependency information usable by wmake.
<LI>Numerous minor fixes have been made to wasm.
<LI>Compatibility with MASM 6 has been improved with wasm.
<LI>Support for sysenter and sysexit instructions has been added to wasm and wdis.
<LI>Disassembly of xchg and bound instructions has been fixed in wdis (corrected order of operands).
<LI>Several previously undocumented wmake directives have been documented.
<LI>A -sn ('noisy') option has been added to wmake to print all commands that wmake executes, including silent ones.
<LI>The w32api project has been updated to the latest version.
<LI>The os2api project has been enhanced - added multimedia headers and libraries and numerous fixes have been made to the
header files.
<LI>The debugger now supports the F7 key as a shortcut for &quot;run to cursor&quot;.&nbsp; This is consistent with CodeView.
<LI>New internal variable dbg$ntid (next thread id) has been added to the debugger.&nbsp; This permits automated iteration
of all threads.
<LI>The wsample tool has been updated to dynamically allocate storage for command line, where previously the command line
length was limited to 128 characters.
<LI>The FORTRAN compiler has been changed to preserve case of symbols with linkage other than FORTRAN.&nbsp; This is especially
helpful when calling OS API functions and using case sensitive link step (now default).
</UL>
<H2 ID="Differences_from_Open_Watcom_Version_1_0"> Differences from Open Watcom Version 1.0 </H2>
<BR>A number of problems has been corrected in Open Watcom C/C++ 1.1.
<UL>
<LI>Using the -ol option (loop optimization) sometimes resulted in generation of incorrect code.
<LI>The<B><I> printf()</I></B> function could access too much data when formatting strings, causing page faults.
<LI>NANs, INFs and denormals were not handled correctly by the math emulation library.
<LI>The assembler did not generate implicit segment override prefixes when accessing data in code segment.
<LI>The<B><I> clock()</I></B> function sometimes produced incorrect results on OS/2 if the<TT> TZ</TT> environment variable
was set.
<LI>The Open Watcom editor (vi/viw) has been changed to store temporary files in directory designated by the<TT> TMP</TT>
environment variable, instead of using the<TT> TMPDIR</TT> environment variable.
<LI>Many packaging problems (missing files) have been resolved.
</UL>
<H2 ID="Differences_from_Version_11_0"> Differences from Version 11.0 </H2>
<BR>Open Watcom C/C++ 1.0 is not substantially different from Watcom C/C++ version 11.0.&nbsp; There are however several changes
that may require you to change your source and/or makefiles or project files.
<UL>
<LI>The C compiler now implements stricter function prototype processing.&nbsp; This may result in new warning or error messages
on code that was previously compiling cleanly but contained mismatches between function prototypes and actual definitions.
&nbsp;The C++ compiler did not have this problem.
<LI>The linker now defaults to case sensitive symbol resolution.&nbsp; In most cases this is not a problem and may in fact
avoid certain problems.&nbsp; If your project relies on case insensitive linking, please add<B><I> OPTION NOCASEEX</I></B>
to your linker directives.
<LI>Default windowing support has been removed from the runtime libraries.
<LI>Components of the Win32 SDK and OS/2 Toolkits are no longer supplied.
<LI>MFC libraries, source code and documentation are no longer supplied.
</UL>
<H2 ID="Changes_in_11_0_that_may_Require_Recompilation"> Changes in 11.0 that may Require Recompilation </H2>
<BR>Do not attempt to mix object code generated by earlier versions of the compilers with object code generated by this release
or with the libraries provided in this release.
<BR><BR>A new C++ object model has been implemented.&nbsp; If you have undefined references to<TT> __wcpp_3_*</TT> names,
you have old object code.&nbsp; If you have undefined references to<TT> __wcpp_4_*,</TT> you have old libraries and new object
code.
<DL>
<DT>clock()
<DD>The<B><I> clock</I></B> function accuracy has changed from 100 ticks per second to 1000 ticks per second (i.e.,<B><I> CLOCKS_PER_SEC</I></B>
has changed).&nbsp; Source code that uses the<B><I> clock</I></B> function and<B><I> CLOCKS_PER_SEC</I></B> in its calculations
must be recompiled before linking the application with new libraries.
</DL>
<H2 ID="Major_Differences_from_Version_10_6"> Major Differences from Version 10.6 </H2>
<BR>The following sections summarize the major differences from the previous release.
<UL>
<LI>In general, we have improved Microsoft compatibility in our compilers (more warnings instead of errors, support for MS
extensions, etc.) and tools.
<LI>Some of the Win32 and 32-bit OS/2 versions of our tools are now available in DLL form.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DLL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Description</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ------&nbsp;&nbsp; -------&nbsp;&nbsp;&nbsp; -----------------------</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wcc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wccd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16-bit x86 C compiler</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wcc386&nbsp;&nbsp; wccd386&nbsp;&nbsp;&nbsp; 32-bit x86 C compiler</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wpp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wppdi86&nbsp;&nbsp;&nbsp; 16-bit x86 C++ compiler</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wpp386&nbsp;&nbsp; wppd386&nbsp;&nbsp;&nbsp; 32-bit x86 C++ compiler</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlink&nbsp;&nbsp;&nbsp; wlink&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Open Watcom Linker</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; wlib&nbsp;&nbsp;&nbsp;&nbsp; wlibd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Open Watcom Library Manager</TT>
<BR><BR>This provides better performance when using the Integrated Development Environment or Open Watcom Make.&nbsp; See
the description of the<TT> !loaddll</TT> preprocessing directive in Open Watcom Make for more information.
</UL>
<H3 ID="Changes_to_the_CPP_Compiler_for_11_0"> Changes to the C++ Compiler for 11.0 </H3>
<UL>
<LI>The C++ compiler now optimizes empty base-classes to occupy zero storage in the derived class memory layout.&nbsp; The
C++ Working Paper recently allowed this optimization to be performed by conforming implementations.&nbsp; Furthermore, the
optimization has speed and size benefits.&nbsp; There are certain classes of (broken) C++ programs that may not function properly
with the new optimization.&nbsp; If you explicitly memset() an empty base class, you will be clearing memory that you may
not expect to be cleared since the &quot;zero sized&quot; base class in actual fact shares storage with the first member of
the derived class.&nbsp; A memset() of the entire derived class is fine though.
<LI>We have added support for the<TT> mutable</TT> keyword which is used to indicate data members that can be modified even
if you have a<B> const</B> pointer to the class.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; class S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mutable int x;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void foo() const;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; void S::foo() const {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = 1;&nbsp; // OK since it is mutable</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<LI>We have added support for the<TT> bool</TT> type along with<TT> true</TT> and<TT> false.</TT>
<LI>We have added support for the<TT> explicit</TT> attribute.&nbsp; It marks a constructor so that it will not be considered
for overloading during implicit conversions.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; struct S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; explicit S( int );</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; S v = 1;&nbsp;&nbsp;&nbsp; // error; cannot convert 'int' to 'S'</TT>
<BR><BR>Suppose the class was changed as follows:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; struct S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; explicit S(int );</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S( char );</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; S v = 1;&nbsp; // OK; S( char ) is called</TT>
<BR><BR>The fact that<TT> S(int)</TT> is not considered leaves<TT> S(char)</TT> as the only way to satisfy the implicit conversion.
<LI>We have added support for name spaces.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; namespace x {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // anything that can go in file-scope</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; namespace {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // anything in here is local to your module!</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<BR><BR>In the above example, you can access names in the namespace &quot;x&quot; by &quot;x::&quot; scoping.&nbsp; Alternatively,
you can use the &quot;using namespace x&quot; statement (thereby eliminating the need for &quot;x::&quot; scoping).&nbsp;
You can include a part of the namespace into the current scope with the &quot;using x::member&quot; statement.&nbsp; (also
eliminating the need for &quot;x::&quot; scoping).
<OL>
<LI>Name spaces eliminate the hand mangling of names.&nbsp; For example, instead of prefixing names with a distinguishing
string like &quot;XPQ_&quot; (e.g., XPQ_Lookup), you can put the names in a namespace called &quot;XPQ&quot;.
<LI>Name spaces allow for private names in a module.&nbsp; This is most useful for types which are used in a single module.
<LI>Name spaces encourage the meaningful classification of implementation components.&nbsp; For example, code-generation components
might reside in a namespace called &quot;CodeGen&quot;.
</OL>
<LI>We have added support for RTTI (Run-Time Type Information).
<LI>We have added support for the new C++ cast notation.&nbsp; It allows you to use less powerful casts that the all powerful
C-style cast and to write more meaningful code.&nbsp; The idea is to eliminate explicit casts by using a more meaningful new-style
cast.&nbsp; The new C++ casts are:
<BR><BR><B><I>reinterpret_cast</I></B><B> &lt; type-id &gt;(expr)</B>
<BR><BR><B><I>const_cast</I></B><B> &lt; type-id &gt;( expr )</B>
<BR><B><I>static_cast</I></B><B> &lt; type-id &gt;( expr )</B>
<BR><B><I>dynamic_cast</I></B><B> &lt; type-id &gt;( expr )</B> (part of RTTI)
<LI>We have improved (faster) pre-compiled header support.
<LI>We have added &quot;long long&quot; (64-bit integer) support in the form of a new<B> __int64</B> type.
<LI>The default structure packing was changed from &quot;zp1&quot; to &quot;zp2&quot; in the 16-bit compiler and from &quot;zp1&quot;
to &quot;zp8&quot; in the 32-bit compiler.
<LI>The default type of debugging information that is included in object files is &quot;Dwarf&quot;.&nbsp; It used to be &quot;Watcom&quot;.
<LI>A new double-byte string processing option has been added (zkl).&nbsp; When this option is specified, the local or current
code page character set is used to decide if the compiler should process strings as if they might contain double-byte characters.
</UL>
<H3 ID="Changes_to_the_C_Compiler_for_11_0"> Changes to the C Compiler for 11.0 </H3>
<UL>
<LI>We have improved (faster) pre-compiled header support.
<LI>We have added &quot;long long&quot; (64-bit integer) support in the form of a new<B> __int64</B> type.
<LI>The default structure packing was changed from &quot;zp1&quot; to &quot;zp2&quot; in the 16-bit compiler and from &quot;zp1&quot;
to &quot;zp8&quot; in the 32-bit compiler.
<LI>The default type of debugging information that is included in object files is &quot;Dwarf&quot;.&nbsp; It used to be &quot;Watcom&quot;.
<LI>A new double-byte string processing option has been added (zkl).&nbsp; When this option is specified, the local or current
code page character set is used to decide if the compiler should process strings as if they might contain double-byte characters.
</UL>
<H3 ID="Changes_to_the_Code_Generator_for_11_0"> Changes to the Code Generator for 11.0 </H3>
<UL>
<LI>We support Microsoft-compatible in-line assembly formats using the &quot;_asm&quot; keyword.
<LI>A new optimization, &quot;branch prediction&quot;, has been added.&nbsp; This optimization is enabled by the &quot;ob&quot;
or &quot;ox&quot; compiler options.&nbsp; The code generator tries to increase the density of cache use by predicting branches
based upon heuristics (this optimization is especially important for Intel's Pentium Pro).
<LI>We have added Multi-media Extensions (MMX) support to the in-line assemblers.
<LI>We have added &quot;long long&quot; (64-bit integer) support in the form of a new<B> __int64</B> type.
</UL>
<H3 ID="Changes_to_the_Compiler_Tools_for_11_0"> Changes to the Compiler Tools for 11.0 </H3>
<UL>
<LI>The Open Watcom Linker supports incremental linking.
<LI>The Open Watcom Linker can now process COFF and ELF format object files, as well as OMF et al.&nbsp; The Open Watcom Linker
can now read both AR-format (Microsoft compatible) libraries and old-style OMF libraries.
<LI>Support for creating 16-bit DOS overlaid executables has been removed from the linker.
<LI>The Open Watcom Library Manager (WLIB) can now process COFF and ELF format object files, as well as OMF et al.&nbsp; The
Open Watcom Library Manager can now read/write both AR-format (Microsoft compatible) libraries and old-style OMF libraries.
&nbsp;The default output format is AR-format and this can be changed by switches.&nbsp; The Open Watcom Library Manager can
output various format import libraries.
<LI>We have added Multi-media Extensions (MMX) support to the Open Watcom Assembler (WASM).
<LI>A new version of the Open Watcom Disassembler (WDIS) can disassemble Intel or Alpha AXP object code files.&nbsp; It can
process ELF, COFF or OMF object files and ELF, COFF or PE format (Win32) executables.&nbsp; The Open Watcom Disassembler looks
at image file being input to determine the processor-type (defaults to Intel).
<BR><BR>The old disassembler (WDISASM) has been retired and is not included in the package.
<LI>We have added new tool front-ends that emulate Microsoft tools.&nbsp; These are:
<UL>
<LI>nmake
<LI>cl
<LI>link
<LI>lib
<LI>rc
<LI>cvtres
</UL>
<BR>These programs take the usual Microsoft arguments and translate them, where possible, into equivalent Open Watcom arguments
and spawn the equivalent Open Watcom tools.
<LI>Open Watcom Make now processes Microsoft format makefiles when the &quot;ms&quot; option is used.
</UL>
<H3 ID="Changes_to_the_CDCPP_Libraries_for_11_0"> Changes to the C/C++ Libraries for 11.0 </H3>
<UL>
<LI>We have added multi-byte and wide character (including UNICODE) support to the libraries.
<LI>We include run-time DLLs for the C, Math and C++ Libraries.
<LI>We have added Multi-media Extensions (MMX) support to the libraries.
<LI>The following new functions were added to the library...
<DL>
<DT>multi-byte functions
<DD>
</DL>
<LI>The<B><I> clock</I></B> function accuracy has changed from 100 ticks per second to 1000 ticks per second (i.e.,<B><I>
CLOCKS_PER_SEC</I></B> has changed).
<LI>A &quot;commit&quot; flag (&quot;c&quot;) was added to the fopen()<B> mode</B> argument.
<LI>The global translation mode flag default is &quot;text&quot; unless you explicitly link your program with<TT> BINMODE.OBJ.</TT>
<LI>Processing of the &quot;0&quot; flag in the format string for the printf() family of functions has been corrected such
that when a precision is specified, the &quot;0&quot; flag is ignored.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; printf( &quot;%09.3lf\n&quot;, 1.34242 ); // &quot;0&quot; flag is ignored</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; printf( &quot;%09lf\n&quot;, 1.34242 ); // &quot;0&quot; flag is not ignored</TT>
<LI>Support for printing<B> __int64</B> values was added to<B><I> printf</I></B> and related functions.
<LI>Support for scanning<B> __int64</B> values was added to<B><I> scanf</I></B> and related functions.
<LI>The Win32<B><I> _osver</I></B> variable was added to the library.
<LI>The Win32<B><I> _winmajor</I></B> ,<B><I> _winminor</I></B> and<B><I> _winver</I></B> variables were added to the library.
</UL>
<H3 ID="Changes_to_the_DOS_Graphics_Library_for_11_0"> Changes to the DOS Graphics Library for 11.0 </H3>
<UL>
<LI>The graphics library now performs the VESA test<B> before</B> testing for vendor specific graphics cards.&nbsp; This fix
is intended to broaden the number of graphics cards that are supported.
</UL>
<H3 ID="Changes_in_Microsoft_Foundation_Classes_Support_for_11_0"> Changes in Microsoft Foundation Classes Support for 11.0 </H3>
<UL>
<LI>Version 4.1 of the 32-bit MFC is included in the package.
<LI>Version 2.52b of the 16-bit MFC is included in the package.
</UL>
<H3 ID="Changes_in_Microsoft_Win32_SDK_Support_for_11_0"> Changes in Microsoft Win32 SDK Support for 11.0 </H3>
<UL>
<LI>The Win32 SDK is supported for Windows 95 and Windows NT platforms.
</UL>
<H3 ID="Changes_in_Blue_Sky_s_Visual_Programmer_for_11_0"> Changes in Blue Sky's Visual Programmer for 11.0 </H3>
<UL>
<LI>A new 32-bit version of Visual Programmer is included in the package.&nbsp; This version runs on 32-bit Windows 95 and
NT.&nbsp; The 16-bit version of Visual Programmer is no longer included in the package.
<LI>You can generate 16-bit applications with it, but you must be careful to avoid using Win95 controls.
<LI>This new version fixes all known bugs in the previous version.
</UL>
<H2 ID="Changes_in_10_6_that_may_Require_Recompilation"> Changes in 10.6 that may Require Recompilation </H2>
<DL>
<DT>_diskfree_t
<DD>The struct members of the _diskfree_t structure has been changed from UNSIGNED SHORTs to UNSIGNED INTs.&nbsp; This is to deal
with possible HPFS partitions whose size will overflow a short, as well as Microsoft compatibility.
<DT>clock()
<DD>The<B><I> clock</I></B> function accuracy has changed from 100 ticks per second to 1000 ticks per second (i.e.,<B><I> CLOCKS_PER_SEC</I></B>
has changed).&nbsp; Source code that uses the<B><I> clock</I></B> function and<B><I> CLOCKS_PER_SEC</I></B> in its calculations
must be recompiled before linking the application with new libraries.
</DL>
<H2 ID="Major_Differences_from_Version_10_5"> Major Differences from Version 10.5 </H2>
<BR>The following sections summarize the major differences from the previous release of Watcom C/C++.
<H3 ID="Windows_95_Help_File_Format"> Windows 95 Help File Format </H3>
<BR>We have included Windows 95 format help files.
<H3 ID="Changes_to_the_CPP_Compiler_in_10_6"> Changes to the C++ Compiler in 10.6 </H3>
<BR>We have improved Microsoft compatibility so that Win32 SDK and MFC header files can be compiled without change.&nbsp;
The following changes were required to support Win32 SDK header files.
<UL>
<LI>We recognize the single underscore versions of<TT> __stdcall, __inline,</TT> and<TT> __fastcall</TT> keywords.
<LI>The<TT> _fastcall</TT> and<TT> __fastcall</TT> keywords are scanned but ignored since they refer to a particular Microsoft
code generation technique.&nbsp; Open Watcom's generated code is always &quot;fast&quot;.
</UL>
<BR>The following changes were required to support MFC source code.
<UL>
<LI>When /bt=DOS is specified, define<TT> _DOS.</TT>
<LI>When /bt=WINDOWS is specified, define<TT> _WINDOWS.</TT>
<LI>When /m[s|m|c|l|h] is specified, define<TT> __SW_M[S|M|C|L|H]</TT> and<TT> _M_I86[S|M|C|L|H]M.</TT>
</UL>
<BR>The compiler now supports the C++ Standard Template Library (STL).&nbsp; This library is available at the ftp site &quot;butler.hpl.hp.com&quot;.
&nbsp;When compiling applications that use the STL, you must use the &quot;hd&quot; compiler option for debugging info (the
&quot;hw&quot; option causes too much debug information to be generated).
<H3 ID="Changes_to_the_C_Compiler_in_10_6"> Changes to the C Compiler in 10.6 </H3>
<BR>We have improved Microsoft compatibility so that Win32 SDK and MFC header files can be compiled without change.&nbsp;
The following changes were required to support Win32 SDK header files.
<UL>
<LI>Support for the single underscore version of the<TT> __stdcall</TT> keyword.
<LI>When /bt=DOS is specified, define<TT> _DOS.</TT>
<LI>When /bt=WINDOWS is specified, define<TT> _WINDOWS.</TT>
</UL>
<BR>The following changes were required to support SDK sample code.
<UL>
<LI>You can specify calling convention information in a function prototype and you do not have to specify the same information
in the definition.&nbsp; (Note:&nbsp; This is required by the OS/2 Warp SDK samples.)
<LI>Structured exception handling is supported (<TT> __try, __except</TT> and<TT> __finally</TT> keywords).
<LI>Allow initialization of automatic array/struct data using variables and function calls.
</UL>
<H3 ID="Changes_to_the_C_Library_in_10_6"> Changes to the C Library in 10.6 </H3>
<BR>The following new functions were added to the library.
<DL>
<DT>_getw
<DD>read int from stream file
<DT>_putw
<DD>write int to stream file
</DL>
<BR>The<B><I> clock</I></B> function accuracy has changed from 100 ticks per second to 1000 ticks per second (i.e.,<B><I>
CLOCKS_PER_SEC</I></B> has changed).
<H3 ID="Changes_in_Microsoft_Foundation_Classes_Support_for_10_6"> Changes in Microsoft Foundation Classes Support for 10.6 </H3>
<UL>
<LI>Version 3.2 of the 32-bit MFC is included in the package.
<LI>Version 2.52b of the 16-bit MFC is included in the package.
</UL>
<H3 ID="Changes_to_the_Image_Editor_in_10_6"> Changes to the Image Editor in 10.6 </H3>
<UL>
<LI>Support has been added for 256 color bitmaps.
<LI>Support has been added for 16 X 16 icons.
<LI>Support has been added for 48 X 48 icons.
</UL>
<H3 ID="Changes_to_the_Dialog_Editor_in_10_6"> Changes to the Dialog Editor in 10.6 </H3>
<UL>
<LI>Support has been added for Windows 95 controls.
<LI>Support has been added for adding new control styles to existing controls.
<LI>Support has been added for new dialog styles.
<LI>Support has been added for allowing help IDs to be specified in dialog and control statements.
<LI>Support has been added for generating new resource statements in .RC files.
</UL>
<H3 ID="Changes_to_the_Resource_Editor_in_10_6"> Changes to the Resource Editor in 10.6 </H3>
<UL>
<LI>Support has been added for new Windows 95 DIALOGEX resource type.
<LI>Support has been added for generating new DIALOGEX resource statements in .RC files.
</UL>
<H3 ID="Changes_to_the_Resource_Compiler_in_10_6"> Changes to the Resource Compiler in 10.6 </H3>
<UL>
<LI>Support has been added for extended styles for dialogs.
<LI>Support has been added for the RCINCLUDE keyword.
</UL>
<H2 ID="Major_Differences_from_Version_10_0"> Major Differences from Version 10.0 </H2>
<UL>
<LI>New installation program
<LI>Visual Programmer for Windows (MFC) applications
<LI>MFC 3.0 support
<LI>Native C++ exception handling support
<LI>Improved language compatibility with Microsoft
<LI>Browser can now be used to browse C code
<LI>OS/2 3.0 Warp support
<LI>Toolkit for OS/2 1.3
<LI>Windows NT 3.5 support
<LI>Toolkit for Windows NT 3.5
<LI>Windows 95 (Chicago) support
<LI>Source Revision Control System hooks in editor
<LI>TCP/IP remote debug servers for OS/2 and Windows NT/95
</UL>
<BR>In addition to these new features, we have also made a number of improvements to the software.
<OL>
<LI>The editor is more tightly integrated with the IDE.
<LI>It is now easier to select your own favorite editor from the IDE.
<LI>The keyboard interface in the Integrated Development Environment (IDE) has been improved.
<LI>The &quot;fr&quot; option, which is supported by the compilers &amp; assembler, can be used to name the error file drive,
path, file name and/or extension.
<LI>We have added the &quot;t&lt;number&gt;&quot; option to the C++ compiler to set the number of spaces in a tab stop (for
column numbers in error messages).
<LI>The C compiler now supports @filename on the command line like the C++ compiler currently does.
<LI>The &quot;__stdcall&quot; linkage convention has changed.&nbsp; All C symbols (extern &quot;C&quot; symbols in C++) are
now suffixed by &quot;@nnn&quot; where &quot;nnn&quot; is the sum of the argument sizes (each size is rounded up to a multiple
of 4 bytes so that char and short are size 4).&nbsp; When the argument list contains &quot;...&quot;, the &quot;@nnn&quot;
suffix is omitted.&nbsp; This was done for compatibility with Microsoft.&nbsp; Use the &quot;zz&quot; option for backwards
compatibility.
<LI>The 32-bit &quot;__cdecl&quot; linkage convention has changed.&nbsp; Watcom C/C++ 10.0 __cdecl did not match the Microsoft
Visual C++ __cdecl in terms of the binary calling convention; Visual C++ saves EBX in a __cdecl function but Watcom C/C++
10.0 modified EBX.&nbsp; Watcom C/C++ has been changed to match Visual C/C++.
<BR><BR>If you wrote a &quot;__cdecl&quot; function in an earlier version of Watcom C/C++, the EBX register was not saved/restored.
&nbsp;Starting with release 10.5, the EBX register will be saved/restored in the prologue/epilogue of a &quot;__cdecl&quot;
function.
<BR><BR>Another implication of this change is that &quot;__cdecl&quot; functions compiled with an earlier version of Watcom
C/C++ don't match the calling conventions of the current version.&nbsp; The solution is either to recompile the functions
or to define a &quot;__cdecl_old&quot; pragma that matches the old calling conventions.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #pragma aux __cdecl_old &quot;_*&quot; \</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __parm __caller []
\</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __value __struct
__float __struct __routine [eax] \</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __modify [eax ebx
ecx edx];</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #pragma aux (__cdecl_old) foo;</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; extern int foo( int a, int b );</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; void main()</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( &quot;%d\n&quot;, foo( 1, 2 ) );</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<LI>We now allow:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; extern &quot;C&quot; int __cdecl x;</TT>
<BR><BR>It must be<TT> extern &quot;C&quot;</TT> for<TT> __cdecl</TT> to take effect since variables have their type mangled
into the name for &quot;C++&quot; linkage.
<LI>In C++, we have removed the warning for &quot;always true/false&quot; expressions if the sub-expressions are constant
values.
<LI>We have added support for:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #pragma pack(push,4);</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #pragma pack(push);</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #pragma pack(pop)</TT>
<LI>We have added support for:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #pragma comment(lib,&quot;mylib.lib&quot;)</TT>
<BR><BR>which has the same semantics as:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #pragma library( &quot;mylib.lib&quot; )</TT>
<LI>We have added support for expanding macros in the code_seg/data_seg pragmas:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #define DATA_SEG_NAME &quot;MYDATA&quot;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #define CODE_SEG_NAME &quot;MYCODE&quot;</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #pragma data_seg( DATA_SEG_NAME )</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; int x = 3;</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #pragma code_seg( CODE_SEG_NAME )</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; int fn() {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<LI>We have fixed the 16-bit compiler so that it matches the Microsoft 16-bit C compiler for the following cases:
<UL>
<LI>If a pascal function is defined when compiling for Windows 3.x, use the fat Windows 3.x prologue in the function.
<LI>If a cdecl function is defined when compiling for Windows 3.x, use the fat Windows 3.x prologue in the function.
</UL>
<LI>We have fixed the compiler so that
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #include &lt;/dir/file.h&gt;</TT>
<BR><BR>works as expected (it was searching along the INCLUDE path only).
<LI>In C++, we have fixed a problem where an import was generated in the object file for a virtual function call.&nbsp; This
will reduce the size of executables under certain circumstances.
<LI>In C++, we have removed the prohibition of pointer to array of unknown size declarations.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; int (*p)[];</TT>
<LI>In C++, we have fixed the diagnosis of lexical problems during macro expansion to remove spurious warnings.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #define stringize( x )&nbsp; #x</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; stringize( 2131231236172637126371273612763612731 )</TT>
<LI>We have corrected the check for too many bytes in #pragma for assembler style aux #pragmas.
<LI>Undeclared class names in elaborated class specifiers are now declared in the nearest enclosing non-class scope.&nbsp;
Undeclared classes are also allowed in arguments now.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; struct S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // used to declared ::S::N but now declares ::N</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct N *p;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; void foo( struct Z *p );&nbsp;&nbsp;&nbsp; // declares ::Z</TT>
<LI>We have fixed unduly harsh restriction on virtual ...-style functions.&nbsp; They are now allowed in single inheritance
hierarchies as long as the return type is not changed when the virtual function is overridden.&nbsp; In multiple inheritance
hierarchies, an implementation restriction is still present for generating a 'this' adjustment thunk for virtual functions.
<LI>We have fixed line number information for multi-line statement expressions in some weird cases.
<LI>We have fixed function template parsing of user-defined conversions that use an uninstantiated class in their operator
name.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; void ack( int );</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; template &lt;class T&gt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S( T x )</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ack( x );</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; template &lt;class T&gt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct W {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; operator S&lt;T&gt;();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; template &lt;class T&gt;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; W&lt;T&gt;::operator S&lt;T&gt;() {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<LI>We have fixed a compiler problem that caused a linker warning &quot;lazy reference for &lt;virtual-fn&gt; has different
default resolutions&quot; in cases where the compiler or programmer optimized virtual function calls to direct calls in modules
that also contained virtual calls.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; T.H</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; virtual int foo() { return __LINE__; }</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct T : S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; virtual int foo() { return __LINE__; }</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; T1.CPP</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #include &quot;t.h&quot;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct Q : T {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; virtual int foo() { return S::foo() + __LINE__;
}</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void foo( T *p )</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q y;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y.foo();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;foo();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; T2.CPP</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #include &quot;t.h&quot;</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void foo( T *p );</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void ack( T *p ) {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;foo();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foo(p);</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; main() {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T q;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ack( &amp;q );</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<LI>When a class value is returned and is immediately (in the same expression) used to call a member function, the value may
not be stored in memory.
<BR><BR>Work around:&nbsp; introduce a temporary
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; struct S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int v;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int member();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; S foo();</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; void example( void )</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // foo().member();&nbsp; // replace this line with:</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S temp = foo();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temp.member();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<LI>Throwing pointers to functions did not work when the size of a function pointer is greater than the size of a data pointer.
<BR><BR>Work around:&nbsp; place the function pointer in a class and throw the class object.
<LI>We have fixed default argument processing for const references to an abstract class.&nbsp; The following example would
not compile properly:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; struct A {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; virtual int foo() = 0;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; A &amp;foo();</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; void ack( A const &amp;r = foo() );</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; void bar() {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ack();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<LI>We have made &quot;DllMain&quot; default to extern &quot;C&quot; linkage for Microsoft Visual C++ compatibility.
<LI>We have duplicated a Microsoft Visual C++ extension that was required to parse the Windows 95 SDK header files.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; typedef struct S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; } S, const *CSP;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ^^^^^- not allowed in ISO C or ISO C++</TT>
<LI>We now do not warn about starting a nested comment if the comment is just about to end.
<BR><BR>We also fixed the code that figures out where a comment was started so that a nested comment warning is more helpful.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*/////////*/</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ^-</TT>
<LI>We have fixed a problem where extra informational notes were not being printed for the error message that exceeded the
error message limit.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; // compile -e2</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; struct S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void foo();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; void foo( S const *p )</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;foo();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;foo();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;foo();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;foo();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<LI>We have fixed a problem where the line number for an error message was incorrect.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; struct S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void foo() const;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void bar();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; void S::foo() const</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bar();</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this-&gt;bar();</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<LI>We have fixed output of browser information for instantiated function template typedefs.
<LI>We have upgraded the C++ parser so that casts and member pointer dereferences can appear on the left hand side of the
assignment expression without parentheses.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;*mp = 1;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; (int&amp;)x = 1;</TT>
<LI>In several cases, when a function return or a construction was immediately dotted in an expression, the generated code
was incorrect:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; struct S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int foo();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; extern S gorf();</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; void bar()</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gorf().foo();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<BR><BR>The work around was to break the statement in two:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; S temp = gorf();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; temp.foo();</TT>
<LI>In several cases, when a function return or a construction was immediately addressed in an expression, the generated code
was incorrect:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; struct S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; extern void fun( S* );</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; extern S gorf();</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; void bar()</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fun( &amp;gorf() );</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<BR><BR>The work around was to break the statement in two:
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; S temp = gorf();</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; fun( &amp;temp );</TT>
<LI>We have added support for:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #pragma error &quot;error message&quot;</TT>
<BR><BR>Use the ISO/ANSI method because it is more portable and acceptable (Microsoft header files use the less portable #pragma
when there is a perfectly fine, portable way to issue a message).
<BR><BR>The portable, acceptable method is:
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #error &quot;error message&quot;</TT>
<LI>We have added support for<TT> __declspec(dllexport), __declspec(dllimport), __declspec(thread),</TT> and<TT> __declspec(naked)</TT>
for Win32 (i.e., WinNT 3.5 and Win95) programs.&nbsp; Here are some examples:
<BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __declspec(dllexport) int a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // export 'a'
variable</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __declspec(dllexport) int b()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // export 'b' function</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; struct __declspec(dllexport) S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static int a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // export 'a' static member</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void b();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // export 'b' member fn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; extern __declspec(dllimport) int a; // import 'a' from a .DLL</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; extern __declspec(dllimport) int b();//import 'b' from a .DLL</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; struct __declspec(dllimport) I {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static int a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // import 'a' static member</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void b();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // import 'b' member fn</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<LI>The C++ compiler generates better error messages for in-class initializations and pure virtual functions.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; struct S {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static int const a = 0;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static int const b = 1;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void foo() = 0;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void bar() = 1;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; virtual void ack() = 0;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; virtual void sam() = 1;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; };</TT>
<LI>We have fixed macro processing code so that the following program compiles correctly.&nbsp; The compiler was not treating
&quot;catch&quot; as a keyword after the expansion of &quot;catch_all&quot;.
<BR><BR><B>Example:</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #define catch(n) catch(n &amp;exception)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #define xall (...)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; #define catch_all catch xall</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; main()</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try{</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch_all{</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; }</TT>
<LI>We have fixed a problem where<TT> #pragma code_seg</TT> caused a page fault in the compiler when the code_seg was empty.
<LI>We have fixed a rare problem where a #include of a file that was previously included caused the primary source file to
finish up if the CR/LF pair for the line that the #include was on, straddled the C++ compiler's internal buffering boundary.
<LI>We have added support for<TT> #pragma message( &quot;message text&quot; ).</TT>&nbsp; It outputs a message to stdout when
encountered.&nbsp; It is used in Microsoft SDK header files to warn about directly including header files and obsolete files.
<LI>We have fixed #pragma code_seg/data_seg to properly set the class name of the new segment in the object file.
<LI>We have a fixed a problem with the -zm -d2 options that caused a compiler fault in some circumstances.
<LI>We have fixed default library records in .OBJ file so that user libraries are ahead of default compiler libraries in the
linker search order.
<LI>We have fixed handling of intrinsic math functions so that the code generator will treat functions like sqrt as an operator.
<LI>We have added support for using OS-specific exception handling mechanisms for C++ exception handling during code generation.
&nbsp;Enable it with the new -zo option.
<LI><TT> __stdcall</TT> functions now have Microsoft Visual C/C++ compatible name mangling.
<LI>We have added a number of new functions to the C Library.&nbsp; These have been added to improve Microsoft compatibility.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; dllmain (nt only)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; libmain (nt only)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _access</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _dos_commit</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _dup</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _ecvt</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _fcvt</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _fstat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _fstrdup</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _gcvt</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _itoa</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _itoa</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _locking</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _lseek</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _ltoa</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _ltoa</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _memicmp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _set_new_handler</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _stat</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _strdate</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _strdup</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _stricmp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _strlwr</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _strnicmp</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _strrev</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _strtime</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _strupr</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _tolower</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; _toupper</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __isascii</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __iscsym</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; __iscsymf</TT>
<LI>In version 9.5, the linker used to include LIBFILE object files in reverse order (i.e., the last one listed was the first
to be included).&nbsp; We have corrected this behavior so that they are included in the order listed.
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Directive&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Old Order&nbsp;&nbsp;
New Order</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; -------------&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ---------&nbsp;&nbsp; ---------</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FILE&nbsp;&nbsp;&nbsp; obj_a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; LIBFILE obj_b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; LIBFILE obj_c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; FILE&nbsp;&nbsp;&nbsp; obj_d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4</TT>
<BR><BR>In the above example, the object files will be included in the order indicated (LIBFILE object files are always included
first).
</OL>
<H3 ID="Changes_in_10_5_that_may_Require_Recompilation"> Changes in 10.5 that may Require Recompilation </H3>
<DL>
<DT>__stdcall
<DD>If you use the __stdcall attribute within a program then you must re-compile the function definition and all callers of the
__stdcall function.
<DT>__cdecl
<DD>The __cdecl attribute is not heavily used in Win32 programming so the impact should be minimal but if you do use __cdecl within
your own programs, a re-compilation will be necessary.
</DL>
<H2 ID="Major_Differences_from_Version_10_0_LA"> Major Differences from Version 10.0 LA </H2>
<BR>If you have .tgt files created with the Limited Availability or Beta Integrated Development Environment, when you load
them, the target window may say &quot;Obsolete Form:&nbsp; rename target type&quot;.&nbsp; If it does:
<OL>
<LI>Select the target window by clicking in it,
<LI>Choose &quot;rename target&quot; from the target menu (a rename target dialog will appear),
<LI>Reselect the target type for this target (e.g., Win32 EXE), and
<LI>Select OK.
</OL>
<BR>You should not continue to use .cfg files from the Limited Availability version of the compiler.&nbsp; Several new features
have been added.&nbsp; Using the old files will cause problems.
<BR><BR>The C++ compiler calling conventions have changed.&nbsp; Any program that passes a &quot;data only&quot; class or
struct as a parameter, or returns a C++ object will need to be recompiled.&nbsp; We recommend that you recompile your application.
<BR><BR>The C++ compiler now supports the use of the<B><I> __export</I></B> ,<B><I> __cdecl</I></B> ,<B><I> __pascal</I></B>
,<B><I> __stdcall</I></B> and<B><I> __syscall</I></B> keyword on class definitions.&nbsp; These keywords will affect all members
of the defined class.
<H2 ID="Major_Differences_from_Watcom_C9_5_D386"> Major Differences from Watcom C9.5 /386 </H2>
<UL>
<LI>The functionality of Watcom C/C++(16) and Watcom C/C++(32) is included in a single package.
<LI>An Integrated Development Environment for Windows 3.x, Windows NT, Windows 95 and OS/2 PM is included.
<LI>New, redesigned debugger with GUI interfaces for Windows 3.x, Windows NT, Windows 95 and OS/2 PM is included.
<LI>The optimizer has been enhanced.
<LI>C++ Class Browser
<LI>New, redesigned user interface for the Profiler.
<LI>New support for C and C++ precompiled header files.
<LI>Windows resource editing tools are included:
<DL>
<DT>Dialog Editor
<DD>
<DT>Bitmap Editor
<DD>
<DT>Resource Editor
<DD>
<DT>Menu Editor
<DD>
<DT>String Editor
<DD>
<DT>Accelerator Editor
<DD>
</DL>
<LI>Windows development tools are included:
<DL>
<DT>Dr.&nbsp; Watcom (a post mortem debug utility)
<DD>
<DT>Spy (Windows message spy program)
<DD>
<DT>DDESpy
<DD>
<DT>Heap Walker
<DD>
<DT>Zoom
<DD>
</DL>
<LI>On-line documentation is included.
<LI>Microsoft Foundation Classes for 32-bit Windows applications (MFC 4.1) and 16-bit Windows 3.1 applications (MFC 2.52b)
is included.
<LI>Creation of FlashTek DOS extender applications is supported.
<LI>Compiler executables have been created that run under all supported operating systems.&nbsp; They are located in the BINW
directory.
</UL>
<H3 ID="Items_No_Longer_Supported"> Items No Longer Supported </H3>
<UL>
<LI>PenPoint development
<LI>Debugging of Ergo OS/386 DOS extender applications
<LI>DESQView remote debugging
</UL>
<H3 ID="Changes_in_10_0_that_may_Require_Recompilation"> Changes in 10.0 that may Require Recompilation </H3>
<BR><B>All C++ applications will require recompilation</B> due to changes in the underlying object model.&nbsp; C applications
should not require recompilation, but<B> you should recompile your application if you want to take full advantage new features
in the debugger.</B>&nbsp; The changes to the C++ object model are:
<UL>
<LI>Virtual table layout changed (NULL entry at offset 0 removed)
<LI>derived class packing adjusted to minimize padding bytes
<LI>exception handling code is improved (incompatible with 9.5)
<LI>name mangling for 'char' reduced from two chars to one char
</UL>
<H2 ID="Major_Differences_from_Watcom_C9_01_D386"> Major Differences from Watcom C9.01 /386 </H2>
<UL>
<LI>C++ support added
<LI>Pentium optimizations added (&quot;5r&quot;, &quot;5s&quot;, &quot;fp5&quot; options)
<LI>Windows NT support added
<LI>Microsoft resource compiler (RC.EXE) replaced with Watcom resource compiler (WRC.EXE)
<LI>OS/2 libraries modified so that single library supports single and multiple threads and DLL's
<LI>&quot;fpi287&quot; switch renamed to &quot;fp2&quot;
<LI>#pragma intrinsic and #pragma function added
<LI>80x87 usage modified so that compiler assumes all eight registers are available upon entry to function instead of only
four registers.&nbsp; &quot;fpr&quot; option added for reverse compatibility with object files compiled with previous versions
of compiler
</UL>
<H3 ID="Changes_that_may_Require_Recompilation"> Changes that may Require Recompilation </H3>
<BR>The<B> stat</B> structure in &quot;stat.h&quot; changed in version 9.5.&nbsp; Any object files compiled with an earlier
version of the compiler will have to be recompiled if they use the stat structure.
<BR><BR>A new function<B> _grow_handles</B> was added to version 9.5 for growing the number of available file handles.&nbsp;
Details on how to use this function can be found in the<B> Watcom C/C++32 Commonly Asked Questions &amp; Answers</B> booklet.
<BR><BR>If you compile with structure packing (/zp2, /zp4, /zp8) or use the &quot;pack&quot; pragma to specify a packing value
other than 1, and you have structures that contain other structures, field offsets and structure sizes may be different depending
on the contents of the structures.
<BR><BR>In version 9.01, the new Windows Supervisor now has 32 user-defined callbacks.&nbsp; If you have any user-defined
callbacks in your Windows program, you must recompile because the constant definitions have changed.
<BR><BR>In version 9.0, the compiler will not use FS by default to avoid conflicts with new operating systems (OS/2 2.0, PenPoint,
Windows NT).&nbsp; This will cause compile errors if you have defined a pragma that uses the FS register.
<BR><BR>In version 8.5, the compiler was changed so that it by default does not save and restore segment registers across
function calls.&nbsp; This is to solve problems that occur where a segment register is saved and restored in a function that
tries to free the segment.&nbsp; When the segment register is popped from the stack in the epilogue, a general protection
exception occurs because the selector is no longer valid.&nbsp; In order to provide backward compatibility with existing code,
we have added a &quot;-r&quot; option that will cause the compiler to save and restore segment registers across calls.&nbsp;
The C run-time library has been compiled with the &quot;-r&quot; option so that it will work should you choose to compile
your application with the same option.
<BR><BR>The packing algorithm was also changed in version 8.5.&nbsp; If you are using one of the &quot;-zp2, -zp4, or -zp8&quot;
options to pack structures, you must recompile your application.&nbsp; The packing algorithm has been changed so that the
minimum number of slack bytes are inserted into structures to align fields onto their required alignment.
<H2 ID="Major_Differences_from_Watcom_C9_0_D386"> Major Differences from Watcom C9.0 /386 </H2>
<UL>
<LI>Windows 3.1 SDK components
<LI>Support for Windows 3.1 DLLs
<LI>On-line Watcom C Library Reference help file for OS/2 2.0.&nbsp; Help can be accessed by issuing the command &quot;VIEW
WATCOMC&quot;.&nbsp; The command can be followed by a topic.&nbsp; e.g.&nbsp; VIEW WATCOMC PRINTF.
</UL>
<H3 ID="Command_Line_Options_added_to_Watcom_C9_0_D386"> Command Line Options added to Watcom C9.0 /386 </H3>
<DL>
<DT>4r
<DD>Use register calling conventions and optimize for 486.
<DT>4s
<DD>Use stack calling conventions and optimize for 486.
<DT>ee
<DD>Generate a call to __EPI at the end of a function
<DT>ep{=number}
<DD>Generate a call to __PRO at the start of a function
<DT>oe
<DD>In-line user defined functions.
<DT>or
<DD>Reorder instructions to take advantage of 486 pipelining.
<DT>zff
<DD>Allows the FS register to be used by the code generator for far pointers.
<DT>zfp
<DD>Disallows use of the FS register.&nbsp; This is the default in flat memory model, because operating systems are now using
FS to point to important information.&nbsp; (e.g.&nbsp; OS/2 2.0, PenPoint, Windows NT).
<DT>zm
<DD>Places each function into a separate segment.&nbsp; This will allow for smart linking.
</DL>
<H2 ID="Major_Differences_from_Watcom_C8_5_D386"> Major Differences from Watcom C8.5 /386 </H2>
<BR>Several major items have been added to Watcom C9.0 /386.&nbsp; They are:
<UL>
<LI>486 instruction selection
<LI>486 instruction scheduling
<LI>Tail recursion elimination
<LI>Function inlining
<LI>strcmp function optimized for 486
<LI>Support for OS/2 2.0
<LI>New keywords added (_far16, _Seg16, _Packed, _Cdecl, _Pascal, _System)
<LI>Linkage pragma for compatibility with IBM C Set/2
<LI>Based pointers
<LI>Machine language code sequences can now be entered into pragmas using assembly language instead of numeric codes.
<LI>Remote debugging over the parallel port using either a &quot;LapLink&quot; cable or a &quot;Flying Dutchman&quot; cable.
<LI>Remote debugging of PenPoint applications
</UL>
<H3 ID="Command_Line_Options_added_to_Watcom_C8_5_D386"> Command Line Options added to Watcom C8.5 /386 </H3>
<DL>
<DT>d1+
<DD>to generate line number information plus typing information for global symbols and local structs and arrays
<DT>ei
<DD>force all enumerated types to be of type 'int'
<DT>en
<DD>emit routine name before prologue
<DT>ez
<DD>generate PharLap EZ-OMF object file
<DT>fpi287
<DD>for programs that run on a system with a 287
<DT>of
<DD>to generate traceable stack frames
<DT>of+
<DD>to generate traceable stack frames for all functions
<DT>om
<DD>to generate in-line math functions
<DT>p
<DD>to generate preprocessor output
<DT>pl
<DD>to generate preprocessor output with #line directives
<DT>pc
<DD>to generate preprocessor output preserving comments
<DT>plc
<DD>to generate preprocessor output with #line directives and preserving comments
<DT>r
<DD>save/restore segment registers across calls
<DT>we
<DD>treat warnings as errors
</DL>
<H2 ID="Major_Differences_from_Watcom_C8_0_D386"> Major Differences from Watcom C8.0 /386 </H2>
<BR>Several major items were added to Watcom C8.5 /386.&nbsp; They are:
<UL>
<LI>Royalty-free 32-bit DOS extender
<LI>Windows 3.0 support
<LI>Windows SDK components included
<LI>Improved optimizations
<LI>OS/2 hosted version of the compiler
<LI>The compiler now generates Microsoft format object files by default.&nbsp; Use the '/ez' option to generate Phar Lap EZ-OMF
object files.
<LI>More library functions to create higher compatibility with Microsoft C 5.1 and Microsoft C 6.0.
<LI>Preprocessor output from the compiler
<LI>Standalone help utility
<LI>Object module convert utility can convert debugging information into CodeView format
<LI>Protected-mode version of the linker
<LI>Debugger support for ADS applications
<LI>Support for Pharlap 3.0 and Pharlap 4.0
<LI>Support for Tenberry Software DOS/4G
<LI>Support for Intel 386/486 Code Builder Kit
<LI>Support for UNICODE.&nbsp; Literal strings and character constants that are preceded by &quot;L&quot; map code page 437
onto UNICODE unless one of the options &quot;-zk0, -zk1, or -zk2&quot; is specified.
</UL>
<H3 ID="Command_Line_Options_added_to_Watcom_C8_0_D386"> Command Line Options added to Watcom C8.0 /386 </H3>
<DL>
<DT>d2
<DD>symbolic debugging information
<DT>oc
<DD>disable &quot;call&quot; followed by &quot;ret&quot; being changed into a &quot;jmp&quot; optimization
<DT>u&lt;name&gt;
<DD>undefine a pre-defined name
<DT>zc
<DD>places literal strings in the CODE segment
<DT>zk{0,1,2}
<DD>double-byte character support
</DL>
<H2 ID="Major_Differences_from_Watcom_C7_0_D386"> Major Differences from Watcom C7.0 /386 </H2>
<BR>Several major items have been added to Watcom C8.0 /386.&nbsp; They are:
<UL>
<LI>Linker
<LI>Librarian
<LI>Graphics library
<LI>More library functions to create higher compatibility with Microsoft C 5.1 and Microsoft C 6.0.
</UL>
<BR>The professional edition also gives you the following most asked for features:
<UL>
<LI>Protected-mode version of the compiler
<LI>Full-screen source-level debugger
<LI>Execution profiler
</UL>
<H3 ID="ProtectedMmode_Compiler_and_Linker"> Protected-mode Compiler and Linker </H3>
<BR>The protected-mode version of the compiler &quot;WCC386P.EXE&quot; and linker &quot;WLINKP.EXE&quot; use a DPMI compliant
DOS extender.&nbsp; This allows you to run the compiler and linker on a normal DOS system or in a Windows 3.x DOS box operating
in enhanced mode.
<H1 ID="Sybase_Open_Watcom_Public_License"> Sybase Open Watcom Public License </H1>
<BR><B>USE OF THE SYBASE OPEN WATCOM SOFTWARE DESCRIBED BELOW (&quot;SOFTWARE&quot;) IS SUBJECT TO THE TERMS AND CONDITIONS
SET FORTH IN THE SYBASE OPEN WATCOM PUBLIC LICENSE SET FORTH BELOW (&quot;LICENSE&quot;).&nbsp; YOU MAY NOT USE THE SOFTWARE
IN ANY MANNER UNLESS YOU ACCEPT THE TERMS AND CONDITIONS OF THE LICENSE.&nbsp; YOU INDICATE YOUR ACCEPTANCE BY IN ANY MANNER
USING (INCLUDING WITHOUT LIMITATION BY REPRODUCING, MODIFYING OR DISTRIBUTING) THE SOFTWARE.&nbsp; IF YOU DO NOT ACCEPT ALL
OF THE TERMS AND CONDITIONS OF THE LICENSE, DO NOT USE THE SOFTWARE IN ANY MANNER.</B>
<BR><B>Sybase Open Watcom Public License version 1.0</B>
<BR><BR>1.&nbsp; General; Definitions.&nbsp; This License applies only to the following software programs:&nbsp; the open
source versions of Sybase's Watcom C/C++ and Fortran compiler products (&quot;Software&quot;), which are modified versions
of, with significant changes from, the last versions made commercially available by Sybase.&nbsp; As used in this License:
<BR><BR>1.1 &quot;Applicable Patent Rights&quot; mean:&nbsp; (a) in the case where Sybase is the grantor of rights, (i) claims
of patents that are now or hereafter acquired, owned by or assigned to Sybase and (ii) that cover subject matter contained
in the Original Code, but only to the extent necessary to use, reproduce and/or distribute the Original Code without infringement;
and (b) in the case where You are the grantor of rights, (i) claims of patents that are now or hereafter acquired, owned by
or assigned to You and (ii) that cover subject matter in Your Modifications, taken alone or in combination with Original Code.
<BR><BR>1.2 &quot;Contributor&quot; means any person or entity that creates or contributes to the creation of Modifications.
<BR><BR>1.3 &quot;Covered Code&quot; means the Original Code, Modifications, the combination of Original Code and any Modifications,
and/or any respective portions thereof.
<BR><BR>1.4 &quot;Deploy&quot; means to use, sublicense or distribute Covered Code other than for Your internal research and
development (R&amp;D) and/or Personal Use, and includes without limitation, any and all internal use or distribution of Covered
Code within Your business or organization except for R&amp;D use and/or Personal Use, as well as direct or indirect sublicensing
or distribution of Covered Code by You to any third party in any form or manner.
<BR><BR>1.5 &quot;Larger Work&quot; means a work which combines Covered Code or portions thereof with code not governed by
the terms of this License.
<BR><BR>1.6 &quot;Modifications&quot; mean any addition to, deletion from, and/or change to, the substance and/or structure
of the Original Code, any previous Modifications, the combination of Original Code and any previous Modifications, and/or
any respective portions thereof.&nbsp; When code is released as a series of files, a Modification is:&nbsp; (a) any addition
to or deletion from the contents of a file containing Covered Code; and/or (b) any new file or other representation of computer
program statements that contains any part of Covered Code.
<BR><BR>1.7 &quot;Original Code&quot; means (a) the Source Code of a program or other work as originally made available by
Sybase under this License, including the Source Code of any updates or upgrades to such programs or works made available by
Sybase under this License, and that has been expressly identified by Sybase as such in the header file(s) of such work; and
(b) the object code compiled from such Source Code and originally made available by Sybase under this License.
<BR><BR>1.8 &quot;Personal Use&quot; means use of Covered Code by an individual solely for his or her personal, private and
non-commercial purposes.&nbsp; An individual's use of Covered Code in his or her capacity as an officer, employee, member,
independent contractor or agent of a corporation, business or organization (commercial or non-commercial) does not qualify
as Personal Use.
<BR><BR>1.9 &quot;Source Code&quot; means the human readable form of a program or other work that is suitable for making modifications
to it, including all modules it contains, plus any associated interface definition files, scripts used to control compilation
and installation of an executable (object code).
<BR><BR>1.10 &quot;You&quot; or &quot;Your&quot; means an individual or a legal entity exercising rights under this License.
&nbsp;For legal entities, &quot;You&quot; or &quot;Your&quot; includes any entity which controls, is controlled by, or is
under common control with, You, where &quot;control&quot; means (a) the power, direct or indirect, to cause the direction
or management of such entity, whether by contract or otherwise, or (b) ownership of fifty percent (50%) or more of the outstanding
shares or beneficial ownership of such entity.
<BR><BR>2.&nbsp; Permitted Uses; Conditions &amp; Restrictions.Subject to the terms and conditions of this License, Sybase
hereby grants You, effective on the date You accept this License and download the Original Code, a world-wide, royalty-free,
non-exclusive license, to the extent of Sybase's Applicable Patent Rights and copyrights covering the Original Code, to do
the following:
<BR><BR>2.1 You may use, reproduce, display, perform, modify and distribute Original Code, with or without Modifications,
solely for Your internal research and development and/or Personal Use, provided that in each instance:
<BR><BR>(a) You must retain and reproduce in all copies of Original Code the copyright and other proprietary notices and disclaimers
of Sybase as they appear in the Original Code, and keep intact all notices in the Original Code that refer to this License;
and
<BR><BR>(b) You must retain and reproduce a copy of this License with every copy of Source Code of Covered Code and documentation
You distribute, and You may not offer or impose any terms on such Source Code that alter or restrict this License or the recipients'
rights hereunder, except as permitted under Section 6.
<BR><BR>(c) Whenever reasonably feasible you should include the copy of this License in a click-wrap format, which requires
affirmative acceptance by clicking on an &quot;I accept&quot; button or similar mechanism.&nbsp; If a click-wrap format is
not included, you must include a statement that any use (including without limitation reproduction, modification or distribution)
of the Software, and any other affirmative act that you define, constitutes acceptance of the License, and instructing the
user not to use the Covered Code in any manner if the user does not accept all of the terms and conditions of the License.
<BR><BR>2.2 You may use, reproduce, display, perform, modify and Deploy Covered Code, provided that in each instance:
<BR><BR>(a) You must satisfy all the conditions of Section 2.1 with respect to the Source Code of the Covered Code;
<BR><BR>(b) You must duplicate, to the extent it does not already exist, the notice in Exhibit A in each file of the Source
Code of all Your Modifications, and cause the modified files to carry prominent notices stating that You changed the files
and the date of any change;
<BR><BR>(c) You must make Source Code of all Your Deployed Modifications publicly available under the terms of this License,
including the license grants set forth in Section 3 below, for as long as you Deploy the Covered Code or twelve (12) months
from the date of initial Deployment, whichever is longer.&nbsp; You should preferably distribute the Source Code of Your Deployed
Modifications electronically (e.g.&nbsp; download from a web site);
<BR><BR>(d) if You Deploy Covered Code in object code, executable form only, You must include a prominent notice, in the code
itself as well as in related documentation, stating that Source Code of the Covered Code is available under the terms of this
License with information on how and where to obtain such Source Code; and
<BR><BR>(e) the object code form of the Covered Code may be distributed under Your own license agreement, provided that such
license agreement contains terms no less protective of Sybase and each Contributor than the terms of this License, and stating
that any provisions which differ from this License are offered by You alone and not by any other party.
<BR><BR>2.3 You expressly acknowledge and agree that although Sybase and each Contributor grants the licenses to their respective
portions of the Covered Code set forth herein, no assurances are provided by Sybase or any Contributor that the Covered Code
does not infringe the patent or other intellectual property rights of any other entity.&nbsp; Sybase and each Contributor
disclaim any liability to You for claims brought by any other entity based on infringement of intellectual property rights
or otherwise.&nbsp; As a condition to exercising the rights and licenses granted hereunder, You hereby assume sole responsibility
to secure any other intellectual property rights needed, if any.&nbsp; For example, if a third party patent license is required
to allow You to distribute the Covered Code, it is Your responsibility to acquire that license before distributing the Covered
Code.
<BR><BR>3.&nbsp; Your Grants.&nbsp; In consideration of, and as a condition to, the licenses granted to You under this License,
You hereby grant to Sybase and all third parties a non-exclusive, royalty-free license, under Your Applicable Patent Rights
and other intellectual property rights (other than patent) owned or controlled by You, to use, reproduce, display, perform,
modify, distribute and Deploy Your Modifications of the same scope and extent as Sybase's licenses under Sections 2.1 and
2.2.
<BR><BR>4.&nbsp; Larger Works.&nbsp; You may create a Larger Work by combining Covered Code with other code not governed by
the terms of this License and distribute the Larger Work as a single product.&nbsp; In each such instance, You must make sure
the requirements of this License are fulfilled for the Covered Code or any portion thereof.
<BR><BR>5.&nbsp; Limitations on Patent License.&nbsp; Except as expressly stated in Section 2, no other patent rights, express
or implied, are granted by Sybase herein.&nbsp; Modifications and/or Larger Works may require additional patent licenses from
Sybase which Sybase may grant in its sole discretion.
<BR><BR>6.&nbsp; Additional Terms.&nbsp; You may choose to offer, and to charge a fee for, warranty, support, indemnity or
liability obligations and/or other rights consistent with this License (&quot;Additional Terms&quot;) to one or more recipients
of Covered Code.&nbsp; However, You may do so only on Your own behalf and as Your sole responsibility, and not on behalf of
Sybase or any Contributor.&nbsp; You must obtain the recipient's agreement that any such Additional Terms are offered by You
alone, and You hereby agree to indemnify, defend and hold Sybase and every Contributor harmless for any liability incurred
by or claims asserted against Sybase or such Contributor by reason of any such Additional Terms.
<BR><BR>7.&nbsp; Versions of the License.&nbsp; Sybase may publish revised and/or new versions of this License from time to
time.&nbsp; Each version will be given a distinguishing version number.&nbsp; Once Original Code has been published under
a particular version of this License, You may continue to use it under the terms of that version.&nbsp; You may also choose
to use such Original Code under the terms of any subsequent version of this License published by Sybase.&nbsp; No one other
than Sybase has the right to modify the terms applicable to Covered Code created under this License.
<BR><BR>8.&nbsp; NO WARRANTY OR SUPPORT.&nbsp; The Covered Code may contain in whole or in part pre-release, untested, or
not fully tested works.&nbsp; The Covered Code may contain errors that could cause failures or loss of data, and may be incomplete
or contain inaccuracies.&nbsp; You expressly acknowledge and agree that use of the Covered Code, or any portion thereof, is
at Your sole and entire risk.&nbsp; THE COVERED CODE IS PROVIDED &quot;AS IS&quot; AND WITHOUT WARRANTY, UPGRADES OR SUPPORT
OF ANY KIND AND SYBASE AND SYBASE'S LICENSOR(S) (COLLECTIVELY REFERRED TO AS &quot;SYBASE&quot; FOR THE PURPOSES OF SECTIONS
8 AND 9) AND ALL CONTRIBUTORS EXPRESSLY DISCLAIM ALL WARRANTIES AND/OR CONDITIONS, EXPRESS OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES AND/OR CONDITIONS OF MERCHANTABILITY, OF SATISFACTORY QUALITY, OF FITNESS FOR A PARTICULAR
PURPOSE, OF ACCURACY, OF QUIET ENJOYMENT, AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.&nbsp; SYBASE AND EACH CONTRIBUTOR DOES
NOT WARRANT AGAINST INTERFERENCE WITH YOUR ENJOYMENT OF THE COVERED CODE, THAT THE FUNCTIONS CONTAINED IN THE COVERED CODE
WILL MEET YOUR REQUIREMENTS, THAT THE OPERATION OF THE COVERED CODE WILL BE UNINTERRUPTED OR ERROR-FREE, OR THAT DEFECTS IN
THE COVERED CODE WILL BE CORRECTED.&nbsp; NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY SYBASE, A SYBASE AUTHORIZED REPRESENTATIVE
OR ANY CONTRIBUTOR SHALL CREATE A WARRANTY.&nbsp; You acknowledge that the Covered Code is not intended for use in the operation
of nuclear facilities, aircraft navigation, communication systems, or air traffic control machines in which case the failure
of the Covered Code could lead to death, personal injury, or severe physical or environmental damage.
<BR><BR>9.&nbsp; LIMITATION OF LIABILITY.&nbsp; TO THE EXTENT NOT PROHIBITED BY LAW, IN NO EVENT SHALL SYBASE OR ANY CONTRIBUTOR
BE LIABLE FOR ANY DIRECT, INCIDENTAL, SPECIAL, INDIRECT, CONSEQUENTIAL OR OTHER DAMAGES OF ANY KIND ARISING OUT OF OR RELATING
TO THIS LICENSE OR YOUR USE OR INABILITY TO USE THE COVERED CODE, OR ANY PORTION THEREOF, WHETHER UNDER A THEORY OF CONTRACT,
WARRANTY, TORT (INCLUDING NEGLIGENCE), PRODUCTS LIABILITY OR OTHERWISE, EVEN IF SYBASE OR SUCH CONTRIBUTOR HAS BEEN ADVISED
OF THE POSSIBILITY OF SUCH DAMAGES, AND NOTWITHSTANDING THE FAILURE OF ESSENTIAL PURPOSE OF ANY REMEDY.&nbsp; SOME JURISDICTIONS
DO NOT ALLOW THE LIMITATION OF LIABILITY OF INCIDENTAL OR CONSEQUENTIAL OR OTHER DAMAGES OF ANY KIND, SO THIS LIMITATION MAY
NOT APPLY TO YOU.&nbsp; In no event shall Sybase's or any Contributor's total liability to You for all damages (other than
as may be required by applicable law) under this License exceed the amount of five hundred dollars ($500.00).
<BR><BR>10.&nbsp; Trademarks.&nbsp; This License does not grant any rights to use the trademarks or trade names &quot;Sybase&quot;
or any other trademarks or trade names belonging to Sybase (collectively &quot;Sybase Marks&quot;) or to any trademark or
trade name belonging to any Contributor(&quot;Contributor Marks&quot;).&nbsp; No Sybase Marks or Contributor Marks may be
used to endorse or promote products derived from the Original Code or Covered Code other than with the prior written consent
of Sybase or the Contributor, as applicable.
<BR><BR>11.&nbsp; Ownership.&nbsp; Subject to the licenses granted under this License, each Contributor retains all rights,
title and interest in and to any Modifications made by such Contributor.&nbsp; Sybase retains all rights, title and interest
in and to the Original Code and any Modifications made by or on behalf of Sybase (&quot;Sybase Modifications&quot;), and such
Sybase Modifications will not be automatically subject to this License.&nbsp; Sybase may, at its sole discretion, choose to
license such Sybase Modifications under this License, or on different terms from those contained in this License or may choose
not to license them at all.
<BR><BR>12.&nbsp; Termination.
<BR><BR>12.1 Termination.&nbsp; This License and the rights granted hereunder will terminate:
<BR><BR>(a) automatically without notice if You fail to comply with any term(s) of this License and fail to cure such breach
within 30 days of becoming aware of such breach;
<BR><BR>(b) immediately in the event of the circumstances described in Section 13.5(b); or
<BR><BR>(c) automatically without notice if You, at any time during the term of this License, commence an action for patent
infringement (including as a cross claim or counterclaim) against Sybase or any Contributor.
<BR><BR>12.2 Effect of Termination.&nbsp; Upon termination, You agree to immediately stop any further use, reproduction, modification,
sublicensing and distribution of the Covered Code and to destroy all copies of the Covered Code that are in your possession
or control.&nbsp; All sublicenses to the Covered Code that have been properly granted prior to termination shall survive any
termination of this License.&nbsp; Provisions which, by their nature, should remain in effect beyond the termination of this
License shall survive, including but not limited to Sections 3, 5, 8, 9, 10, 11, 12.2 and 13.&nbsp; No party will be liable
to any other for compensation, indemnity or damages of any sort solely as a result of terminating this License in accordance
with its terms, and termination of this License will be without prejudice to any other right or remedy of any party.
<BR><BR>13.&nbsp; Miscellaneous.
<BR><BR>13.1 Government End Users.&nbsp; The Covered Code is a &quot;commercial item&quot; as defined in FAR 2.101.&nbsp;
Government software and technical data rights in the Covered Code include only those rights customarily provided to the public
as defined in this License.&nbsp; This customary commercial license in technical data and software is provided in accordance
with FAR 12.211 (Technical Data) and 12.212 (Computer Software) and, for Department of Defense purchases, DFAR 252.227-7015
(Technical Data -- Commercial Items) and 227.7202-3 (Rights in Commercial Computer Software or Computer Software Documentation).
&nbsp;Accordingly, all U.S.&nbsp; Government End Users acquire Covered Code with only those rights set forth herein.
<BR><BR>13.2 Relationship of Parties.&nbsp; This License will not be construed as creating an agency, partnership, joint venture
or any other form of legal association between or among you, Sybase or any Contributor, and You will not represent to the
contrary, whether expressly, by implication, appearance or otherwise.
<BR><BR>13.3 Independent Development.&nbsp; Nothing in this License will impair Sybase's or any Contributor's right to acquire,
license, develop, have others develop for it, market and/or distribute technology or products that perform the same or similar
functions as, or otherwise compete with, Modifications, Larger Works, technology or products that You may develop, produce,
market or distribute.
<BR><BR>13.4 Waiver; Construction.&nbsp; Failure by Sybase or any Contributor to enforce any provision of this License will
not be deemed a waiver of future enforcement of that or any other provision.&nbsp; Any law or regulation which provides that
the language of a contract shall be construed against the drafter will not apply to this License.
<BR><BR>13.5 Severability.&nbsp; (a) If for any reason a court of competent jurisdiction finds any provision of this License,
or portion thereof, to be unenforceable, that provision of the License will be enforced to the maximum extent permissible
so as to effect the economic benefits and intent of the parties, and the remainder of this License will continue in full force
and effect.&nbsp; (b) Notwithstanding the foregoing, if applicable law prohibits or restricts You from fully and/or specifically
complying with Sections 2 and/or 3 or prevents the enforceability of either of those Sections, this License will immediately
terminate and You must immediately discontinue any use of the Covered Code and destroy all copies of it that are in your possession
or control.
<BR><BR>13.6 Dispute Resolution.&nbsp; Any litigation or other dispute resolution between You and Sybase relating to this
License shall take place in the Northern District of California, and You and Sybase hereby consent to the personal jurisdiction
of, and venue in, the state and federal courts within that District with respect to this License.&nbsp; The application of
the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded.
<BR><BR>13.7 Entire Agreement; Governing Law.&nbsp; This License constitutes the entire agreement between the parties with
respect to the subject matter hereof.&nbsp; This License shall be governed by the laws of the United States and the State
of California, except that body of California law concerning conflicts of law.
<BR><BR>Where You are located in the province of Quebec, Canada, the following clause applies:&nbsp; The parties hereby confirm
that they have requested that this License and all related documents be drafted in English.&nbsp; Les parties ont exige que
le present contrat et tous les documents connexes soient rediges en anglais.
<BR><BR><B>EXHIBIT A.</B>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Portions Copyright (c) 1983-2002 Sybase, Inc. All Rights Reserved.</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; This file contains Original Code and/or Modifications of</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Original Code as defined in and that are subject to the</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; Sybase Open Watcom Public License version 1.0 (the</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; 'License'). You may not use this file except in compliance</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; with the License. BY USING THIS FILE YOU AGREE TO ALL</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; TERMS AND CONDITIONS OF THE LICENSE. A copy of the License</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; is provided with the Original Code and Modifications, and</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; is also available at www.sybase.com/developer/opensource.</TT>
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; The Original Code and all software distributed under the</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; License are distributed on an 'AS IS' basis, WITHOUT</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND SYBASE</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; AND ALL CONTRIBUTORS HEREBY DISCLAIM ALL SUCH WARRANTIES,</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ENJOYMENT OR NON-INFRINGEMENT. Please see the License for</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; the specific language governing rights and limitations</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; under the License.</TT>
<H1 ID="TroubleMShooting"> Trouble-Shooting </H1>
<BR>This section is intended to provide you with help on some of the common (and not so common) problems that users have encountered
when trying to run the software.
<DL>
<DT>Symptom:
<DD>The message &quot;Cannot connect to batch spawn server&quot; is displayed.
<DT>Resolution:
<DD>This message occurs when the Open Watcom IDE is trying to connect to the batch server.&nbsp; The batch server is a program
that is employed by the Open Watcom IDE to run &quot;makes&quot; in the background.&nbsp; There are several reasons why you
may receive this message.
<UL>
<LI><B> Installing Under the Host System and Selecting &quot;Modify System Files&quot; During Install</B>
<BR><BR>For the IDE to run properly under a particular host operating system, the install program must be run on that system.
<BR><BR>It is very important to check the &quot;Modify System Files&quot; when running the install on the host platform.&nbsp;
Otherwise, changes required in the host system's environment will not be made.&nbsp; If this is the problem, you should re-install
under the host environment and select this option.
<LI><B> System stability</B>
<BR><BR>If for some reason the operating system has become unstable, the IDE may have trouble connecting to the batch server.
&nbsp;This can happen if you have run a badly behaved application that caused an exception, for example a page fault.&nbsp;
If this is the problem, you should shutdown the operating system and reboot.
<LI><B> Running Windows 3.1 in Enhanced Mode</B>
<BR><BR>The IDE requires at least version 3.1 of Windows to be running, in enhanced mode.&nbsp; Windows 3.0 is not supported.
</UL>
</DL>
<BR><B>Running Third-Party Shell Programs</B>
<BR><BR>If you run 4DOS.COM or some other shell besides COMMAND.COM, you must change the &quot;BATCHBOX.PIF&quot; file accordingly.
&nbsp;You can do this using the standard Windows PIF editor.
<BR><BR><B>Running Virus Checkers</B>
<BR><BR>If you are running Central Point's PCTOOLS, VWATCH, or some other virus checker, it may be conflicting with our batch
server.&nbsp; To isolate the problem, uninstall the virus checker and see if the IDE works again.
<BR><BR><B>386 Enhanced &quot;Exclusive in Foreground&quot; Option</B>
<BR><BR>If you go to the Windows Control Panel, &quot;Scheduling Options&quot; of &quot;386 Enhanced&quot;, and the &quot;Exclusive
in Foreground&quot; checkbox is checked, uncheck it.&nbsp; This causes our batch server to starve under Windows.
<BR><BR><B>Changes to the SYSTEM.INI File</B>
<BR><BR>The WDEBUG.386 driver is required to be installed in the [386Enh] section of SYSTEM.INI.&nbsp; This should have been
done automatically by the WATCOM install program when the software was installed under the host environment and the &quot;modify
system files&quot; option was selected.
<BR><BR>It has been reported that the line
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; OverlappedIO=on</TT>
<BR><BR>not appear in the SYSTEM.INI file.
<BR><BR>It appears the user's problem was related to conflicts with other devices installed in the SYSTEM.INI file.&nbsp;
On its own, the above line does not appear to affect the execution of the IDE.
<BR><BR>It has been reported that the line
<BR><BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; NoEMMDriver=ON</TT>
<BR><BR>not appear in the SYSTEM.INI file.&nbsp; It will prevent a link from succeeding in the IDE.
<H2 ID="WinMOSD2_and_OSD2_Specific"> Win-OS/2 and OS/2 Specific </H2>
<BR><B>Installing for a Win-OS/2 Host</B>
<BR><BR>For Win-OS/2, the install must be run under OS/2 and &quot;Modify System Files&quot; must be selected.&nbsp; This
installs the batch server under OS/2, which we require under Win-OS/2.&nbsp; Then the Windows install program should be run
under Win-OS/2 so that the program groups will be created.&nbsp; &quot;Modify System Files&quot; should also be checked for
the Win-OS/2 install.
<BR><BR><B>Named Pipe Conflicts</B>
<BR><BR>Under OS/2, the batch server is a named pipe.&nbsp; Win-OS/2 uses the OS/2 named pipe for the batch server, hence
the OS/2 IDE will conflict with the Win-OS/2 IDE if they are both running.&nbsp; If this is the problem, you should run only
one of the OS/2 and Win-OS/2 IDE, not both at the same time.
</BODY>
